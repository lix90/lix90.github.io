<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lix的博客</title>
  <subtitle>菜鸟笔记，原创不多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//lix90.github.io/"/>
  <updated>2016-11-16T14:16:37.000Z</updated>
  <id>//lix90.github.io/</id>
  
  <author>
    <name>Lix</name>
    <email>xiangli90@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R：使用基本包进行多图布局</title>
    <link href="//lix90.github.io/2016/11/16/2016-11-16-r-vis-layout/"/>
    <id>//lix90.github.io/2016/11/16/2016-11-16-r-vis-layout/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-11-16T14:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h1><p><code>layout</code> 函数可以指定复杂的绘图布局。该函数可以将设备的面板根据第一个参数 <code>mat</code> 矩阵分割为多个行和列，列宽和行高在对应的参数中指定。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout(mat, widths = rep.int(<span class="number">1</span>, ncol(mat)),</div><div class="line">    heights = rep.int(<span class="number">1</span>, nrow(mat)),</div><div class="line">    respect = <span class="literal">FALSE</span>)</div></pre></td></tr></table></figure>
<p><code>layout.show(n)</code> 显示当前布局。<code>n</code> 为显示的图形的个数。<code>n=1</code> 则显示第一个图形的布局，<code>n=2</code> 则显示前两个图形的布局。<br><code>layout</code> 返回的值为图形的个数。</p>
<p>参数：</p>
<ul>
<li><code>mat</code>：矩阵对象，指定接下来的 N 个图形的位置。矩阵中的值必须为 0 或者正整数。</li>
<li><code>widths</code>：向量对象，指定列宽。可以通过数值指定相对宽度。而绝对宽度通过 <code>lcm()</code> 指定。</li>
<li><code>heights</code>：向量对象，指定列高。高度设置跟 <code>widths</code> 一样。</li>
<li><code>respect</code>：要么逻辑值要么矩阵对象。如果为矩阵对象，那么必须与 <code>mat</code> 具有同样的维度，而且每个值为 0 或者 1。该参数控制列宽的单位是否与行高的单位在设备物理测量上相同，控制设备的纵横比。纵横比为列数比上行数。如果 <code>respect = TRUE</code> 那么列宽和行高单位相同，不受页面纵横比的影响。如果 <code>respect = FALSE</code>，那么一行的高和一列的宽不一样，会受到页面的影响。</li>
<li><code>n</code>：绘制的图形个数。</li>
</ul>
<p>需要注意的是，<code>layout</code> 布局与 <code>par(mfrow)</code> <code>par(mfcol)</code> <code>split.screen</code> 完全不兼容。</p>
<h1 id="Par-的-mfrow-和-mfcol-参数布局"><a href="#Par-的-mfrow-和-mfcol-参数布局" class="headerlink" title="Par 的 mfrow 和 mfcol 参数布局"></a>Par 的 mfrow 和 mfcol 参数布局</h1><p><code>par</code> 用于设置或查询绘图参数。<code>par</code> 的合法参数都能在高阶绘图函数中使用。<br>在 <code>par</code> 的众多参数中，有两个参数可以用于多图的布局，即 <code>mfrow</code> 和 <code>mfcol</code>。</p>
<h2 id="par-关于布局的参数"><a href="#par-关于布局的参数" class="headerlink" title="par 关于布局的参数"></a>par 关于布局的参数</h2><p><strong>Outer margin</strong> 外边缘</p>
<p>默认没有外边缘。可以通过 <code>oma</code> 增加外边缘，其单位为线宽，即一行文字的空间。还有 <code>omi</code> 和 <code>omd</code> 设置外边缘宽度，单位分别为英寸和 NDC 归一化坐标。</p>
<ul>
<li><code>oma</code> 向量 <code>c(bottom, left, top, right)</code>，外边缘尺寸，行高</li>
<li><code>omd</code> 向量 <code>c(x1,x2,y1,y2)</code> 外边缘定位，单位为 NDC，即<code>c(left,right,bottom,top)</code></li>
<li><code>omi</code> 向量 <code>c(bottm, left, top, right)</code> 外边缘尺寸，英寸</li>
</ul>
<p><strong>Inner region</strong> 内区域</p>
<p>为除去外边缘之外剩余的区域。如果只有一个图，那么就等于 figure region。如果有多个图，那就是多个图合并的区域。</p>
<p><strong>Figure region</strong> 图形区域</p>
<p>受到外边缘和图的个数的影响。绘图区域通过 <code>fig</code> 和 <code>fin</code> 参数设定。<code>fig</code> 用来定位，<code>c(left, right, bottom, top)</code>，其中的值为内区域的大小（除去外边缘之后的区域）。<code>fin</code> 用于设定绘图区域大小，<code>c(width,height)</code>，单位为英寸，最后绘图区域将在内区域中居中。</p>
<p><strong>Figure margin</strong> 图形边缘</p>
<p>图形边缘，通过 <code>mar</code> 和 <code>mai</code> 参数设定。</p>
<ul>
<li><code>mai</code> 数值向量 <code>c(bottom, left, top, right)</code> 绘图边缘的尺寸，英寸</li>
<li><code>mar</code> 数值向量 <code>c(bottom, left, top, right)</code> 指定绘图边缘尺寸，行高，默认为 <code>c(5,4,4,2)+0.1</code></li>
<li><code>mex</code> 行尺寸扩展因子，用于描述绘图边缘上的坐标。并不改变字体大小，而是指定用来转换 <code>mar</code> 和 <code>mai</code> 以及 <code>oma</code> 和 <code>omi</code> 的文本行尺寸。</li>
<li><code>mgp</code> 边缘行（<code>mex</code> 单位），用于轴标题、标签和线。<code>mgp[1]</code> 影响 <code>title</code>,<code>mgp[2:3]</code> 影响坐标轴。默认为 <code>c(3,1,0)</code>。</li>
</ul>
<p><strong>Plot region</strong> 绘制区域</p>
<ul>
<li><code>plt</code> 向量 <code>c(x1,x2,y1,y2)</code> 图形区域的坐标</li>
<li><code>ply</code> 字符，指定图形区域类型，<code>&quot;s&quot;</code> 为正方形绘图区域，<code>&quot;m&quot;</code> 为最大绘图区域。</li>
<li><code>pin</code> 尺寸，<code>c(width, height)</code></li>
</ul>
<p>子图或多图绘制</p>
<ul>
<li><code>mfcol, mfrow</code> 向量 <code>c(nr, nc)</code>，绘制 nr*nc 子图矩阵。</li>
<li><code>mfg</code> 向量 <code>c(i,j)</code> 表示接下来图形绘制的位置。必须实现定义好 <code>mfcol</code> 或者 <code>mfow</code>。另外，为了兼容 <code>S</code> 语言，还可以以 <code>c(i,j,nr,nc)</code> 的形式指定位置。</li>
</ul>
<h1 id="Split-screen-布局"><a href="#Split-screen-布局" class="headerlink" title="Split.screen 布局"></a>Split.screen 布局</h1><p><code>split.screen</code> 定义在当前设备上一定数量的区域，可以在一定程度上当作独立/分离的图形设备。<br><code>screen</code> 用于选择哪一个 screen 绘制图形。<br><code>erase.screen</code> 用于清除一个 screen，通过填充背景颜色。<br><code>close.screen</code> 移除指定的 screen。</p>
<p><code>split.screen</code> 参数：</p>
<ul>
<li><code>figs</code> 两个元素的向量，描述了在一个屏幕矩阵中的行和列的数目，或者一个4列矩阵。如果是矩阵，那么每一行描述了一个屏幕的左、右、下和上端的值，为 NDC 单位，即0为最左下角，1为最右上角。</li>
<li><code>screen</code> 用于分割的屏幕编号。默认为当前屏幕，否则为整个设备区域。</li>
<li><code>erase</code> 逻辑值，是否清空选中的屏幕。</li>
<li><code>n</code> 代表将准备用于绘制、擦除、或者关闭的屏幕编号。</li>
<li><code>new</code> 逻辑值，代表着是否擦除当前屏幕用于新图的绘制。</li>
<li><code>all.screens</code> 逻辑值，是否关闭所有屏幕。</li>
</ul>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">split.screen(c(<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 构建两行两列的 screen</span></div><div class="line">screen(<span class="number">2</span>) <span class="comment"># 选中第2个 screen</span></div><div class="line">split.screen(c(<span class="number">2</span>,<span class="number">1</span>)) <span class="comment"># 将第2个 screen 再次分割为两行</span></div><div class="line">screen(<span class="number">4</span>) <span class="comment"># 选中第4个 screen</span></div><div class="line">plot(<span class="number">10</span>:<span class="number">1</span>)</div><div class="line">erase.screen() <span class="comment"># 擦除当前 screen</span></div><div class="line">plot(<span class="number">15</span>:<span class="number">1</span>) <span class="comment"># 继续在当前 screen 上绘制</span></div></pre></td></tr></table></figure>
<p>NDC：normalized device coordinates</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Layout-布局&quot;&gt;&lt;a href=&quot;#Layout-布局&quot; class=&quot;headerlink&quot; title=&quot;Layout 布局&quot;&gt;&lt;/a&gt;Layout 布局&lt;/h1&gt;&lt;p&gt;&lt;code&gt;layout&lt;/code&gt; 函数可以指定复杂的绘图布局。该函数可以将设备
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="数据可视化" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-16</title>
    <link href="//lix90.github.io/2016/11/16/2016-11-16-daily/"/>
    <id>//lix90.github.io/2016/11/16/2016-11-16-daily/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-11-16T14:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R：图形设备"><a href="#R：图形设备" class="headerlink" title="R：图形设备"></a>R：图形设备</h1><p><code>grDevices::Devices</code> R 绘图时支持的图形设备。</p>
<ul>
<li><code>pdf</code> <code>postscript</code> <code>xfig</code> <code>bitmap</code> <code>pictex</code></li>
<li><code>X11</code> 在 X11 视窗系统下支持</li>
<li><code>svg</code> 基于 cairo 图形的 SVG 设备</li>
<li>位图 <code>png</code> <code>jpeg</code> <code>bmp</code> <code>tiff</code></li>
<li><code>quartz</code> 仅在 macOS 上支持</li>
</ul>
<p>如果未打开图形设备，高阶图形函数会自动打开设备，默认打开的设备通过 <code>options(&quot;device&quot;)</code> 指定。 返回。默认的设备为初始化设置为当前平台最合适的设备。</p>
<p>在 R 中，只允许存在一个“活动（active）”的设备，所有图形操作均在活动设备之上。只要 R 在运行，就有一个“空设备”一直处于开启状态，但仅仅作为占位，任何使用这个空设备的尝试将会打开一个新的设备。设备与一个名称和数字编号关联，数字编号范围为1到63。空设备为编号1。一旦设备被打开，空设备将变成非活动的设备。可以通过 <code>dev.next</code> 和 <code>dev.prev</code> 选择一列开启的设备中，活动的设备的上一个或者下一个设备。</p>
<p>可以通过 <code>dev.off</code> 关闭指定的设备。如果未指定编号，默认关闭当前活动的设备。如果当前活动设备被关闭，那么下一个设备会被当作活动设备。编号1的设备不能关闭。正常结束一个对话可以执行 <code>graphics.off()</code>。</p>
<p><code>dev.set</code> 将指定设备更改为活动设备。<code>dev.cur</code> 返回当前活动设备。<code>dev.list</code> 列出所有开启的设备，如果不存在开启的设备，那么返回空设备。如果不存在指定编号的设备，那么默认将 <code>dev.next</code> 所得到的设备当作活动设备。如果指定编号1设备，那么将开启新的设备，并将其设置为活动设备。</p>
<p><code>dev.new</code> 将开启新的设备。正常情况下，需要时 R 会自动开启新的设备，但这是<strong>让你开启独立于平台的设备</strong>(?疑问：原文”this enables you to open further devices in a platform-indenpendent way.”)。当基于文件的设备（<code>pdf</code>等），文件名将依次命名为 <code>Rplots&lt;1~99&gt;.pdf</code>。对于标准位图设备，如果未指定单位和分辨率，默认强制设置为 <code>units = &quot;in&quot;, res = 72</code>。</p>
<p>图形设备相关参数：</p>
<ul>
<li><code>title</code> 标题</li>
<li><code>width</code> 宽度</li>
<li><code>height</code> 高度</li>
<li><code>pointsize</code> 点尺寸</li>
<li><code>family</code> 字体</li>
<li><code>antialias</code> 是否抗锯齿</li>
<li><code>type</code> 类型</li>
<li><code>file</code> 文件名</li>
<li><code>bg</code> 背景色</li>
<li><code>canvas</code> 画布</li>
<li><code>dpi</code> 分辨率（每英寸点数）</li>
</ul>
<p>PDF 设备参数：</p>
<ul>
<li><code>paper</code> 纸张类型，<code>&quot;a4&quot;,&quot;letter&quot;,&quot;legal&quot;,...</code></li>
<li><code>bg</code> 背景色，默认为 <code>&quot;transparent&quot;</code></li>
<li><code>fg</code> 前景色，默认为 <code>&quot;black&quot;</code></li>
<li><code>pointsize</code> 默认为 <code>12</code>，1/72英寸为一个点</li>
<li><code>colormodel</code> 颜色模式 <code>&quot;srgb&quot;,&quot;gray&quot;,&quot;cmyk&quot;</code>，默认为 <code>&quot;srgb&quot;</code></li>
</ul>
<p>PDF 设备并不嵌入字体到 PDF 文件中，所以建议使用常见的字体例如：<code>&quot;Times&quot;(=&quot;serif&quot;),&quot;Helvetica&quot;(=&quot;sans&quot;),&quot;Courier&quot;(=&quot;mono&quot;)</code>。</p>
<ul>
<li>默认设备尺寸为 7 英寸的正方形。</li>
<li>字体大小为 “big points”。</li>
<li>默认字体为 Helvetica。</li>
<li>线宽为1/96英寸的倍数，最小为 0.01。</li>
<li>可支持任意弧度的圆形。</li>
<li>颜色模式默认为 sRGB。</li>
<li>如果线宽特别细，线型默认强制为实线。</li>
</ul>
<p>位图设备参数：</p>
<ul>
<li>默认宽高均为 <code>480px</code></li>
<li>默认单位为 <code>px</code></li>
<li>默认点大小为 <code>12</code></li>
<li>默认背景色为 <code>&quot;white&quot;</code></li>
<li>默认分辨率为 <code>res = 72</code> 单位为 ppi</li>
</ul>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p><code>ps</code> 返回正在运行的进程的信息<br><code>ps aux</code> 列出所有运行进程<br><code>ps aux | grep string</code> 列出匹配字符串的进程</p>
<p>使用 <code>$HOME</code> 替代 <code>~</code><br>使用 <code>type -p</code> 替代 <code>which</code></p>
<h2 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h2><h3 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h3><p>从一组数中新添加一个数，数多大能够让<strong>标准差</strong>增加或不变或降低？<br>当新添加的数和原来的均值的差值的绝对值小于、等于、或大于 $s\sqrt{1+1/n}$ 时，数组的标准差会降低，不变或增加。</p>
<blockquote>
<p>If the old sample size is $n$, the old mean is $m$, the old standard deviation is $s$, and a new point $x$ is added to the data, then the new standard deviation will be less than, equal to, or greater than $s$ according as $|x−m|$ is less than, equal to, or greater than $s\sqrt{1+1/n}$.</p>
</blockquote>
<p>来源: <a href="http://stats.stackexchange.com/questions/73498/value-that-increases-the-standard-deviation?rq=1" target="_blank" rel="external">Cross Validated: Value that increases the Standard Deviation</a></p>
<h3 id="循环变量"><a href="#循环变量" class="headerlink" title="循环变量"></a>循环变量</h3><p>小时和风向均为循环变量，在模型中作为预测变量时，需要将其映射到正弦和余弦函数上，将角度使用弧度测量。</p>
<p>来源：<a href="http://stats.stackexchange.com/questions/148380/use-of-circular-predictors-in-linear-regression" target="_blank" rel="external">Cross Validated: Use of circular predictors in linear regression</a></p>
<h2 id="Mac-安装-pip"><a href="#Mac-安装-pip" class="headerlink" title="Mac 安装 pip"></a>Mac 安装 pip</h2><ol>
<li>安装 easy_install<br><code>curl https://bootstrap.pypa.io/ez_setup.py -o - | sudo python</code></li>
<li>安装 pip<br><code>sudo easy_install pip</code><br>或通过 Homebrew 安装 python，会一同安装 pip<br>或直接使用 Anaconda 等发行版，自带 pip</li>
</ol>
<h2 id="CSS：利用偏移垂直居中"><a href="#CSS：利用偏移垂直居中" class="headerlink" title="CSS：利用偏移垂直居中"></a>CSS：利用偏移垂直居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，元素顶端会沿着父容器的顶端内边缘绘制，这时 <code>top = 0;</code>。当设置 <code>top = 50%;</code>，元素顶端会沿着父容器的垂直方向的水平中线绘制，这时元素并未相对父容器垂直居中对齐。利用 <code>transform: translateY(-50%);</code>，将元素沿着 Y 轴，向上（负方向）平移元素自身高度的50%。最后，元素便垂直居中于父容器。</p>
<p>来源：<a href="http://stackoverflow.com/questions/40530101/why-is-translatey-50-needed-to-center-an-element-which-is-at-top-50" target="_blank" rel="external">stackoverflow: Why is translateY(-50%) needed to center an element which is at top: 50%?</a></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>翻译答案 <a href="http://stats.stackexchange.com/questions/2691/making-sense-of-principal-component-analysis-eigenvectors-eigenvalues" target="_blank" rel="external">Making sense of principal component analysis, eigenvectors &amp; eigenvalues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R：图形设备&quot;&gt;&lt;a href=&quot;#R：图形设备&quot; class=&quot;headerlink&quot; title=&quot;R：图形设备&quot;&gt;&lt;/a&gt;R：图形设备&lt;/h1&gt;&lt;p&gt;&lt;code&gt;grDevices::Devices&lt;/code&gt; R 绘图时支持的图形设备。&lt;/p&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="统计学" scheme="//lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="Python" scheme="//lix90.github.io/tags/Python/"/>
    
      <category term="数据可视化" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Shell" scheme="//lix90.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-15</title>
    <link href="//lix90.github.io/2016/11/15/2016-11-15-daily/"/>
    <id>//lix90.github.io/2016/11/15/2016-11-15-daily/</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2016-11-15T10:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-和-JS-加载顺序和位置问题"><a href="#CSS-和-JS-加载顺序和位置问题" class="headerlink" title="CSS 和 JS 加载顺序和位置问题"></a>CSS 和 JS 加载顺序和位置问题</h1><h2 id="为什么要把-CSS-样式表放在头部（Head）"><a href="#为什么要把-CSS-样式表放在头部（Head）" class="headerlink" title="为什么要把 CSS 样式表放在头部（Head）"></a>为什么要把 CSS 样式表放在头部（Head）</h2><p>如果 CSS 放置在头部，页面会渐进渲染。前端工程师需要让页面和样式渐进的显示出来。对于具有大量内容的页面和网络连接效率较低的用户，这是非常重要的。这样可以给用户视觉反馈，来提示页面的渲染进度。这能够整体上提升用户体验。</p>
<p>如果 CSS 防止在页面文档的底端，这会阻止浏览器渐进的渲染页面。浏览器会阻止渲染，为了避免对页面元素进行重绘。这样会出现一段时间的白屏。影响用户体验。</p>
<h2 id="为什么要把-JS-脚本放在底端（the-Bottom-of-Body）"><a href="#为什么要把-JS-脚本放在底端（the-Bottom-of-Body）" class="headerlink" title="为什么要把 JS 脚本放在底端（the Bottom of Body）"></a>为什么要把 JS 脚本放在底端（the Bottom of Body）</h2><p>脚本文件的加载会阻塞并行下载。HTTP/1.1 规定浏览器对于同一个主机的并行下载请求不能超过两个。如果网站图片资源放在多个主机上，那么可以同时超过两个下载请求。但是脚本文件会使浏览器停止其他数据的下载，不同主机的下载都会停止。</p>
<p>但是在某些情况下，并不能将 JS 脚本放在底端。例如，脚本中包含有使用 <code>document.write</code> 插入部分页面内容，这就不能放在后面加载。</p>
<p>替代的做法是，使用 <code>defer</code> 加载脚本，这样就可以放在头部了。<code>defer</code> 属性表明了脚本并不包含 <code>document.write</code>，在加载脚本的同时，页面也一同渲染。Firefox 并不支持 <code>defer</code> 属性。</p>
<h2 id="如果-script-和-link-都在头部，谁在前，谁在后？"><a href="#如果-script-和-link-都在头部，谁在前，谁在后？" class="headerlink" title="如果 script 和 link 都在头部，谁在前，谁在后？"></a>如果 script 和 link 都在头部，谁在前，谁在后？</h2><p>对于现代<strong>桌面</strong>浏览器来说，CSS 在 JS 前声明对性能并没有显著提高。甚至，CSS 在 JS 之后，不但不影响性能，反而在特定情况下还能提升性能。不过，这仅限于现代桌面浏览器。对于老式浏览器，仍然需要在 JS 之前声明 CSS 的外部链接。这归功于现代桌面浏览器使用了“推测渲染技术”（speculative parsing），这种技术能够让浏览器往前一步看，总是在脚本下载和执行之前下载其他资源。老式浏览器并不支持该技术，所以把脚本放在前面会影响性能。</p>
<p>目前，85% 的桌面浏览器均支持推测渲染技术。把脚本放在样式表之前仍然可能会影响 15% 的用户。对于移动端的浏览器，无法获得一个明确的支持该技术的比例。WebKit 内核的移动浏览器已支持该技术。但是即便是最新的 WebKit 内核浏览器，<a href="http://stackoverflow.com/users/201952/josh3736" target="_blank" rel="external">josh3736</a>仍然发现 JS 在 CSS 之前会影响性能，这可能与移动设备在 CPU，内存以及网络上的限制而关闭了限制了该功能。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/6625773/where-should-i-put-the-css-and-javascript-code-in-an-html-webpage" target="_blank" rel="external">stackoverflow: Where should I put the CSS and Javascript code in an HTML webpage?</a></li>
<li><a href="http://stackoverflow.com/questions/9271276/is-the-recommendation-to-include-css-before-javascript-invalid" target="_blank" rel="external">stackoverflow: Is the recommendation to include CSS before JavaScript invalid?</a></li>
<li><a href="http://stackoverflow.com/questions/7120801/group-of-css-and-js-files-import-at-html" target="_blank" rel="external">stackoverflow: Group of CSS and JS files import at HTML?</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Yahoo! Best Practices for Speeding Up Your Web Site</a></li>
</ul>
<hr>
<h1 id="CSS：-import-vs-Link"><a href="#CSS：-import-vs-Link" class="headerlink" title="CSS：@import vs Link"></a>CSS：@import vs Link</h1><blockquote>
<p>The bottomline is: use LINK instead of @import if you want stylesheets to download in parallel resulting in a faster page.</p>
<ul>
<li>Using @import within a stylesheet adds one more roundtrip to the overall download time of the page.</li>
<li>Using @import in IE causes the download order to be altered. This may cause stylesheets to take longer to download, which hinders progress rendering making the page feel slower.</li>
</ul>
</blockquote>
<p>避免使用 <code>@import</code> 能够提升性能。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://www.stevesouders.com/blog/2009/04/09/dont-use-import/" target="_blank" rel="external">SteveSounders: don’t use @import</a></li>
</ul>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><blockquote>
<p><a href="https://github.com/rushter/MLAlgorithms" target="_blank" rel="external">rushter/MLAlgorithms</a><br>A collection of minimal and clean implementations of machine learning algorithms.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-和-JS-加载顺序和位置问题&quot;&gt;&lt;a href=&quot;#CSS-和-JS-加载顺序和位置问题&quot; class=&quot;headerlink&quot; title=&quot;CSS 和 JS 加载顺序和位置问题&quot;&gt;&lt;/a&gt;CSS 和 JS 加载顺序和位置问题&lt;/h1&gt;&lt;h2 id=&quot;为
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="CSS" scheme="//lix90.github.io/tags/CSS/"/>
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="//lix90.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>实验室内部分享一：绘制和编辑可发表的图形</title>
    <link href="//lix90.github.io/2016/11/14/2016-11-14-img-output/"/>
    <id>//lix90.github.io/2016/11/14/2016-11-14-img-output/</id>
    <published>2016-11-13T16:00:00.000Z</published>
    <updated>2016-11-15T15:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为实验室内部分享内容提纲。<br>分享目的：做到在不求人的情况下无痛高效地输出符合论文投稿要求的图形。</p>
<h1 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h1><h2 id="颜色模式"><a href="#颜色模式" class="headerlink" title="颜色模式"></a>颜色模式</h2><ul>
<li>印刷：CMYK，印刷三原色（青品黄），叠加变暗 —&gt; 打印出版</li>
<li>显示：RGB，光影三原色（黄绿蓝），叠加变亮 —&gt; 在线出版</li>
<li>其他：HSB, Lab, 位图模式，灰度模式，索引颜色模式，双色模式，多通道模式等</li>
</ul>
<h2 id="图形格式"><a href="#图形格式" class="headerlink" title="图形格式"></a>图形格式</h2><table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">定义</th>
<th style="text-align:left">特点</th>
<th style="text-align:left">常见格式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">矢量图</td>
<td style="text-align:left">使用点、线、面（多边形）等基于数学方程的几何图元表示的图像</td>
<td style="text-align:left">放大缩小图形质量不变</td>
<td style="text-align:left">eps, svg, pdf, …</td>
</tr>
<tr>
<td style="text-align:left">位图</td>
<td style="text-align:left">使用像素阵列表示的图像</td>
<td style="text-align:left">尺寸放大会影响质量</td>
<td style="text-align:left">jpg, png, tiff, …</td>
</tr>
</tbody>
</table>
<h2 id="图形分辨率"><a href="#图形分辨率" class="headerlink" title="图形分辨率"></a>图形分辨率</h2><p>分辨率：两侧或者显示系统对细节的分辨能力。<br>PPI/DPI 单位：表示打印图像或显示器单位面积上像素/点数量的指数。</p>
<p>PPI</p>
<ul>
<li>每英寸像素数</li>
<li>用于电脑显示领域</li>
<li>人类肉眼能够分辨的最高像素点密度为 300ppi</li>
</ul>
<p>DPI</p>
<ul>
<li>每英寸点数</li>
<li>用于打印或印刷领域</li>
</ul>
<h1 id="图形编辑软件使用"><a href="#图形编辑软件使用" class="headerlink" title="图形编辑软件使用"></a>图形编辑软件使用</h1><ul>
<li>Adobe Illustrator 商业矢量图编辑软件：<strong>主要内容</strong></li>
<li>Adobe Photoshop 商业位图编辑软件</li>
<li>Inkscape 免费开源矢量图编辑软件</li>
</ul>
<h2 id="基本界面"><a href="#基本界面" class="headerlink" title="基本界面"></a>基本界面</h2><ul>
<li>菜单栏</li>
<li>工具栏</li>
<li>控制面板</li>
<li>图形窗口</li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>工具选择快捷键：快速切换当前工具</li>
<li>组合快捷键：快速操作对象，选择功能等</li>
</ul>
<h2 id="常用工具与概念"><a href="#常用工具与概念" class="headerlink" title="常用工具与概念"></a>常用工具与概念</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li>对象：具有一定属性的点，线，面（填充）等</li>
<li>对象的基本操作：移动，旋转，镜像，拷贝 …</li>
<li>建立组与取消组：建立组方便对整体进行操作。</li>
</ul>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ul>
<li>一般选择与直接选择（组选择）</li>
<li>相似对象选择：选择文本对象，选择单独的点，…</li>
<li>相似属性选择：选择具有相同描边的对象，选择具有相同填充的对象，…</li>
</ul>
<h3 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h3><ul>
<li>操作图层：删除，新建，隐藏，锁定</li>
<li>管理图层：移动，合并，重命名</li>
</ul>
<h3 id="其他重要操作"><a href="#其他重要操作" class="headerlink" title="其他重要操作"></a>其他重要操作</h3><ul>
<li>路径查找：Window &gt;&gt;&gt; Pathfinder</li>
<li>排列对齐：Window &gt;&gt;&gt; Align</li>
<li>字体描边：Type &gt;&gt;&gt; Create Outline</li>
<li>取色：工具栏 &gt;&gt;&gt; Eye droper tool</li>
<li>属性修改（线）：Window &gt;&gt;&gt; Appearance</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol>
<li>实验流程图</li>
<li>单图编辑</li>
<li>多图合并</li>
<li>ERP 线图编辑</li>
<li>…</li>
</ol>
<h1 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h1><ul>
<li>编程语言：R, Python, Matlab, … &gt;&gt;&gt; 推荐学习</li>
<li>界面操作：Excel, SPSS, JASP, …</li>
<li>在线绘制：plot.ly, …</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为实验室内部分享内容提纲。&lt;br&gt;分享目的：做到在不求人的情况下无痛高效地输出符合论文投稿要求的图形。&lt;/p&gt;
&lt;h1 id=&quot;准备知识&quot;&gt;&lt;a href=&quot;#准备知识&quot; class=&quot;headerlink&quot; title=&quot;准备知识&quot;&gt;&lt;/a&gt;准备知识&lt;/h1&gt;&lt;h2 
    
    </summary>
    
      <category term="实验室内部分享" scheme="//lix90.github.io/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="学术出版" scheme="//lix90.github.io/tags/%E5%AD%A6%E6%9C%AF%E5%87%BA%E7%89%88/"/>
    
      <category term="统计图表" scheme="//lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8/"/>
    
      <category term="Illustrator" scheme="//lix90.github.io/tags/Illustrator/"/>
    
      <category term="Photoshop" scheme="//lix90.github.io/tags/Photoshop/"/>
    
      <category term="Inkscape" scheme="//lix90.github.io/tags/Inkscape/"/>
    
      <category term="矢量图" scheme="//lix90.github.io/tags/%E7%9F%A2%E9%87%8F%E5%9B%BE/"/>
    
      <category term="位图" scheme="//lix90.github.io/tags/%E4%BD%8D%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-14</title>
    <link href="//lix90.github.io/2016/11/14/2016-11-14-daily/"/>
    <id>//lix90.github.io/2016/11/14/2016-11-14-daily/</id>
    <published>2016-11-13T16:00:00.000Z</published>
    <updated>2016-11-14T14:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-每日学习记录"><a href="#R-每日学习记录" class="headerlink" title="R 每日学习记录"></a>R 每日学习记录</h1><p>Mode &amp; Type</p>
<p>Mode 由 <code>mode</code> 获得<br>Type 由 <code>typeof</code> 获得</p>
<p>在 R 中，模式（Mode）与类型（Type）具有相同的名称集，除了以下例外：</p>
<ul>
<li>类型 <code>integer</code> 和 <code>double</code> 的模式均为 <code>numeric</code></li>
<li>类型 <code>special</code> <code>builtin</code> 的模式均为 <code>function</code></li>
<li>类型 <code>symbol</code> 返回模式 <code>name</code></li>
<li>类型 <code>language</code> 返回为 <code>(</code> 或 <code>call</code></li>
</ul>
<hr>
<h1 id="鸟哥-Linux-私房菜学习记录"><a href="#鸟哥-Linux-私房菜学习记录" class="headerlink" title="鸟哥 Linux 私房菜学习记录"></a>鸟哥 Linux 私房菜学习记录</h1><h2 id="计算机概论"><a href="#计算机概论" class="headerlink" title="计算机概论"></a>计算机概论</h2><p>三大部分：输入单元、主机、输出单元。<br>五大部分：输入、输出、CPU 控制单元、CPU 算数逻辑单元与内存。</p>
<p>中央处理器（Central Processing Unit, CPU），含有微指令集。主机的功能与 CPU 是否具有相关内置的微指令集。<br>CPU 内分为两个主要单元：</p>
<ul>
<li>算数逻辑单元：负责程序运算与逻辑判断</li>
<li>控制单元：协调各周边元件与各单元间的工作</li>
</ul>
<p>CPU 从内存中读取数据，内存中的数据从输入单元传入。CPU 处理完毕的数据必须先写回内存，然后才从内存传输到输出单元。</p>
<p>五大单元：输入单元+{系统单元：[CPU：(控制单元+算数逻辑单元)]+内存}+输出单元+外部储存装置</p>
<p>以上所有单元均由 CPU 内部的控制单元负责协调。</p>
<p>两种 CPU 架构：</p>
<ul>
<li>精简指令集（Reduced Instruction Set Computer, RISC）</li>
<li>复杂指令集（Complex Instruction Set Computer, CISC）</li>
</ul>
<p>RISC：较为精简，每个指令的执行时间都很短，完成动作很单纯，执行性能较佳。若要做复杂的事情，则需多个指令来完成。<br>CISC：每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度不相同。由于指令执行较为复杂，所以每条指令花费时间较长，但每条指令可以处理的工作较为丰富。大量使用于个人电脑中。</p>
<p>位：CPU 一次数据读取的最大量。64位 CPU 表示一次读写 64bits 的数据，32位则读取 32bits。一般32位 CPU 能读写的最大数据量为 4GB 左右。</p>
<hr>
<h1 id="Git-学习记录"><a href="#Git-学习记录" class="headerlink" title="Git 学习记录"></a>Git 学习记录</h1><h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><p>表示项目历史信息的文件由40个字符的“对象名（SHA）”来索引。不同内容的两个对象不可能有相同的对象名。</p>
<ul>
<li>快速判断两个对象是否相同；</li>
<li>不同仓库的同样内容存在相同的对象名下；</li>
<li>通过检查对象内容的哈希值和对象名来判断对象内容是否正确。</li>
</ul>
<h2 id="四种类型的对象"><a href="#四种类型的对象" class="headerlink" title="四种类型的对象"></a>四种类型的对象</h2><ul>
<li>blob：存储文件数据</li>
<li>tree：类似文件目录，管理 tree 或 blob</li>
<li>commit：标记项目某一个特定时间点的状态，包括一些关于时间点的元数据</li>
<li>tag：标记某一次提交的方法</li>
</ul>
<h2 id="Git-与-SVN-的区别"><a href="#Git-与-SVN-的区别" class="headerlink" title="Git 与 SVN 的区别"></a>Git 与 SVN 的区别</h2><p>SVN 使用增量文件系统（Delta storage systems），它们存储每次提交的差异。Git 把每次提交的文件的全部内容（snapshot）都会记录下来。</p>
<hr>
<h1 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h1><h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><p>四种类型的快捷键设置：</p>
<ul>
<li>全局快捷键：<code>(global-set-key (kbd &quot;A&quot;) &#39;your-command&#39;)</code></li>
<li>全局映射键：<code>(define-key key-translation-map (kbd &quot;A&quot;) (kbd &quot;B&quot;))</code></li>
<li>基于 Major-Mode 的局部快捷键：<code>(local-set-key (kbd &quot;A&quot;) &#39;your-command)</code></li>
<li>基于 Minor-Mode 的局部快捷键：<code>(define-key your-minor-mode-map (kbd &quot;A&quot;) &#39;your-command)</code></li>
</ul>
<p>删除或禁用键：<code>(global/local-unset-key (kbd &quot;A&quot;))</code> <code>(global/local-set-key (kbd &quot;A&quot;) &#39;ignore/nil)</code></p>
<p>解决键冲突</p>
<ul>
<li>暴力映射：<code>define-key key-translation-map</code></li>
<li>映射到新的 prefix 键上，再全局或者局部设置键。</li>
</ul>
<p>宏与函数的区别：函数的参数是在传入时 eval，而宏则是传入并展开后再 eval。<br>快捷键的优先级：<code>key-translation-map &gt; minor-mode-map &gt; local-set-key &gt; global-set-key</code><br>在设置局部键时，需写出相应的代理映射键（prefix）。</p>
<p>说明：整理自Emacs（微信公众号）文章《那就从妖艳酷炫的快捷键开始吧！（一）》</p>
<h2 id="amp-符号"><a href="#amp-符号" class="headerlink" title=": &amp; 符号"></a>: &amp; 符号</h2><ul>
<li><code>:foo</code> 在 Emacs Lisp 中是 <code>keyword symbol</code></li>
<li>在 <code>use-package</code> 中被用作 <code>keyword arguments</code></li>
<li><code>&amp;optional</code> 指定的形参是可选的，如果没有指定，则当作 <code>nil</code></li>
<li><code>&amp;rest</code> 指定的形参是可变</li>
</ul>
<blockquote>
<p>宏的实参不会在宏被求值的时候立刻求值，而是会被当做数据直接传递给宏。因此宏可以自己决定那些代码在什么时候被求值。</p>
</blockquote>
<p>参考 emacs-china 社区<a href="https://emacs-china.org/t/emacslisp/1566" target="_blank" rel="external">问答</a></p>
<hr>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><p>在数据挖掘中，理解数据、检查数据，对数据进行预处理至关重要。</p>
<h2 id="数据理解"><a href="#数据理解" class="headerlink" title="数据理解"></a>数据理解</h2><ul>
<li>明确数据记录的详细程度</li>
<li>确定研究群体：用户群，受众；“群体”可以是事物，如电影。</li>
<li>理解每个变量的含义：与业务目标无关的变量可直接剔除（冗余变量）。</li>
</ul>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul>
<li>分类变量：名义变量和定序变量。</li>
<li>数值变量：只有在代数运算下有意义的变量才是数值型变量。</li>
</ul>
<p>许多数据挖掘模型不能直接处理分类自变量，此时需要将分类变量转换成数值变量。对于名义自变量，常用的转换方法是构造0-1型哑变量。当名义变量有 K 个类别取值时，需要构造 K-1 个哑变量。<strong>名义变量取值过多会生成太多的哑变量，此时可能造成模型的过度拟合。</strong></p>
<p>在有些情况下，数值变量需要转换成分类变量，此时需要用到“数据分箱”的方法。</p>
<p><strong>数据分箱</strong></p>
<ul>
<li>通过取值范围转换成不同类别可以有效平滑数据，降低误差；</li>
<li>对于某些算法（如决策树），数据分箱可以提高算法效率；</li>
<li>有些模型算法（如关联规则）只能处理分类型自变量。</li>
</ul>
<p>数据分箱可以使用每个分箱内的均值、中位数、临界值等作为这个类别的代表值，也可以直接将不同取值范围定义成不同的类别。</p>
<p><strong>常见的数据分箱方法</strong></p>
<ul>
<li>等宽分箱：将变量取值范围划分成等宽的几个区间。</li>
<li>等频分箱：按变量取值的分位数进行划分。</li>
<li>基于k均值聚类的分箱：将所有数据进行k均值聚类，所得类别即为不同的分箱。</li>
<li>其他分箱：如使分箱后的结果达到最小熵或最小描述长度等。</li>
</ul>
<h2 id="质量检查"><a href="#质量检查" class="headerlink" title="质量检查"></a>质量检查</h2><p>一般来说，质量检查包括检查每个变量的缺失程度和取值范围的合理性。</p>
<h3 id="缺失检查"><a href="#缺失检查" class="headerlink" title="缺失检查"></a>缺失检查</h3><ul>
<li><strong>有些缺失是合理的</strong>，但是对于这种缺失值，很难判断缺失的原因。</li>
<li><strong>对于不允许缺失的变量，必须进行相应处理。</strong>如果缺失率过高，例如达到70%，可以考虑剔除。如果比例可以接受，可以尝试插补。</li>
<li><strong>插补的目的是使插补值最大可能接近真实的取值</strong>，如果能从其他途径得到真实值，那么优先选择这种方法。</li>
</ul>
<p>插补方法</p>
<ul>
<li>数值变量可用已观测值的均值、中位数、众数等。</li>
<li>分类变量可用已观测值中比例最高的类别取值进行插补。</li>
<li>还可以选择更复杂的模型插补方法：对被插补变量和其他自变量之间的关系建立统计模型，将模型预测值作为插补值。</li>
</ul>
<h3 id="变量取值合理性检查"><a href="#变量取值合理性检查" class="headerlink" title="变量取值合理性检查"></a>变量取值合理性检查</h3><ul>
<li>通过判断变量的取值是否超出它应有的取值范围，可以简单的对异常值进行甄别。</li>
<li>根据变量之间的相互关系进行判断。</li>
</ul>
<p>说明：整理自狗熊会（微信公众号）文章《灰常数据挖掘|数据理解和预处理》</p>
<hr>
<h1 id="交互设计：按钮"><a href="#交互设计：按钮" class="headerlink" title="交互设计：按钮"></a>交互设计：按钮</h1><h2 id="让按钮看起来像按钮"><a href="#让按钮看起来像按钮" class="headerlink" title="让按钮看起来像按钮"></a>让按钮看起来像按钮</h2><p>视觉线索让人确定部件的可点击特性。在可点击的元素上使用合适的视觉线索使得它们看起来想按钮。</p>
<h3 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h3><ul>
<li>比较保险的是使用方形，圆角方形。</li>
<li>在使用其他特别的形状，例如圆形、三角形，或者其他图形时，得确保用户能将其当作按钮。</li>
<li>无论使用什么形状，<strong>确保界面控件的一致性</strong>，这样用户才能识别处所有的元素为按钮。</li>
</ul>
<h3 id="阴影和高光"><a href="#阴影和高光" class="headerlink" title="阴影和高光"></a>阴影和高光</h3><p>阴影可以让元素从背景中凸显出来，更容易识别为可点击的元素，看起来像真实的可以被按下去的按钮。</p>
<h2 id="清晰地标记按钮"><a href="#清晰地标记按钮" class="headerlink" title="清晰地标记按钮"></a>清晰地标记按钮</h2><p>用户容易忽视没有清晰的含义的界面元素。所以，界面中的按钮应该有合适的标签或者图标。但是，需遵循最小装饰原则。</p>
<h3 id="清晰的标签"><a href="#清晰的标签" class="headerlink" title="清晰的标签"></a>清晰的标签</h3><p>按钮上的标签应该与用户将要执行的动作有关联，告知用户点击按钮所要执行的行为。<br>动作按钮应该向用户声明当前任务是什么，这样用户在点击按钮时知道会发生什么。</p>
<h2 id="将按钮放置到用户容易找到的地方"><a href="#将按钮放置到用户容易找到的地方" class="headerlink" title="将按钮放置到用户容易找到的地方"></a>将按钮放置到用户容易找到的地方</h2><h3 id="位置和顺序"><a href="#位置和顺序" class="headerlink" title="位置和顺序"></a>位置和顺序</h3><ul>
<li>如果开发原生 app，则需遵循开发平台的图形界面指南。</li>
<li>如果是基于网页的 app，应该思考哪个位置对用户使用起来最有效。</li>
<li>如果设计移动导航栏，有必要关注下按钮位置的最佳实践。&gt;&gt;&gt; <a href="https://www.smashingmagazine.com/2016/11/the-golden-rules-of-mobile-navigation-design/" target="_blank" rel="external">The Golden Rules Of Bottom Navigation Design</a></li>
</ul>
<h2 id="让用户轻而易举地点击按钮"><a href="#让用户轻而易举地点击按钮" class="headerlink" title="让用户轻而易举地点击按钮"></a>让用户轻而易举地点击按钮</h2><h3 id="尺寸和内边距"><a href="#尺寸和内边距" class="headerlink" title="尺寸和内边距"></a>尺寸和内边距</h3><p>需要考虑相对页面上其他元素来确定按钮的尺寸。</p>
<blockquote>
<p>When a tap is used as a primary input method for your app or site, you can rely on the <a href="http://touchlab.mit.edu/publications/2003_009.pdf" target="_blank" rel="external">MIT Touch Lab</a> study to choose a proper size for your buttons. This study found that the average size of finger pads are between 10–14mm and fingertips are 8–10mm, making 10mm x 10mm a good minimum touch target size. When a mouse and keyboard are the primary input methods, button measurements can be slightly reduced to accommodate dense UIs.</p>
</blockquote>
<h3 id="提供视觉反馈"><a href="#提供视觉反馈" class="headerlink" title="提供视觉反馈"></a>提供视觉反馈</h3><p>按钮具有多个状态，通过提供视觉反馈来提示用户按钮的当前状态。<a href="">Material Design</a> 清晰展示了不同的按钮状态：Normal, Focused, Pressed, Disabled。</p>
<h2 id="在视觉上强调最重要的按钮"><a href="#在视觉上强调最重要的按钮" class="headerlink" title="在视觉上强调最重要的按钮"></a>在视觉上强调最重要的按钮</h2><p>确保在设计中，对主要的或者最重要的动作进行了强调。使用颜色和对比度可以让用户聚焦于动作之上，并且将按钮放置于最显眼的位置。</p>
<h3 id="Call-to-Action-Button"><a href="#Call-to-Action-Button" class="headerlink" title="Call-to-Action Button"></a>Call-to-Action Button</h3><p>Call-to-Action Button：吸引用户注意力并且引诱用户去点击的按钮。创建一个有效的 call-to-action 按钮，需要使用与背景有高对比度的颜色，并且将按钮放置于用户使用路径上。</p>
<h3 id="让首要的和次要的按钮具有视觉区分度"><a href="#让首要的和次要的按钮具有视觉区分度" class="headerlink" title="让首要的和次要的按钮具有视觉区分度"></a>让首要的和次要的按钮具有视觉区分度</h3><ul>
<li>首要的与积极事件/动作关联的按钮应该有较强的视觉权重。</li>
<li>次要的事件/动作，例如“取消”或“退回”，应该具有较弱的视觉权重。</li>
</ul>
<h2 id="按钮设计清单"><a href="#按钮设计清单" class="headerlink" title="按钮设计清单"></a>按钮设计清单</h2><ul>
<li>用户将元素识别为按钮了吗？</li>
<li>按钮的标签传递了清晰的含义了吗？</li>
<li>用户能容易地找到按钮吗？</li>
<li>如果在界面中有两个或多个按钮，最重要的是否具有最强的视觉权重？</li>
</ul>
<p>说明：笔记整理来自<a href="https://www.smashingmagazine.com/2016/11/a-quick-guide-for-designing-better-buttons/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="external">Smashing Magazine: A Quick Guide For Designing Better Buttons</a></p>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><ul>
<li><a href="http://webpro.github.io/programming-principles/" target="_blank" rel="external">Programming Principles</a> 编程原则</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R-每日学习记录&quot;&gt;&lt;a href=&quot;#R-每日学习记录&quot; class=&quot;headerlink&quot; title=&quot;R 每日学习记录&quot;&gt;&lt;/a&gt;R 每日学习记录&lt;/h1&gt;&lt;p&gt;Mode &amp;amp; Type&lt;/p&gt;
&lt;p&gt;Mode 由 &lt;code&gt;mode&lt;/code
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="Git" scheme="//lix90.github.io/tags/Git/"/>
    
      <category term="Emacs" scheme="//lix90.github.io/tags/Emacs/"/>
    
      <category term="计算机概论" scheme="//lix90.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/"/>
    
      <category term="数据挖掘" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据预处理" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
      <category term="交互设计" scheme="//lix90.github.io/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="界面设计" scheme="//lix90.github.io/tags/%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>个人资源长期整理</title>
    <link href="//lix90.github.io/2016/11/13/2016-11-13-wiki/"/>
    <id>//lix90.github.io/2016/11/13/2016-11-13-wiki/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T02:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>活在一个信息社会，信息越来越繁杂，必须不断整理和精简。这个页面仅用于整理个人在学习和娱乐过程中所遇到的非常好的在线资源的整理。方便自己重新回顾和反复查阅。</p>
<h1 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h1><ul>
<li><a href="https://ropensci.org/" target="_blank" rel="external">rOpenSci</a></li>
<li><a href="https://rweekly.org" target="_blank" rel="external">Rweekly</a></li>
<li><a href="http://cos.name/" target="_blank" rel="external">统计之都</a></li>
<li><a href="https://ruby-china.org/" target="_blank" rel="external">Ruby China</a></li>
<li><a href="http://python-china.org/" target="_blank" rel="external">Python China</a></li>
<li><a href="https://cnodejs.org/" target="_blank" rel="external">Node.js中文社区</a></li>
<li><a href="https://emacs-china.org/" target="_blank" rel="external">Emacs China</a></li>
<li><a href="http://yizaoyiwan.com/" target="_blank" rel="external">一早一晚 | 自由工作社区</a></li>
<li><a href="http://gold.xitu.io/welcome" target="_blank" rel="external">掘金：高质量的技术社区</a></li>
<li><a href="http://liqi.io/" target="_blank" rel="external">利器：创造者和他们的工具</a></li>
</ul>
<h1 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h1><ul>
<li><a href="https://ipn.li/" target="_blank" rel="external">IPN</a>：IPN (Intelligent Podcast Network) 是不鳥萬如一和 Rio 创办的播客网络。目前它旗下有十档节目。</li>
<li><a href="https://codetimecn.com/" target="_blank" rel="external">代码时间</a>：代码时间是一个面向程序员的中文播客节目, 致力于通过语音的方式传播程序员的正能量。</li>
<li><a href="http://teahour.fm/" target="_blank" rel="external">Teahour.fm</a>：专注程序员感兴趣的话题，包括 Web 设计和开发，移动应用设计和开发，创业以及一切 Geek 的话题。</li>
<li><a href="http://podcast.uxcoffee.co/" target="_blank" rel="external">UX Coffee 设计咖</a>：一档为产品设计师和关注用户体验的同学准备的播客节目。</li>
<li><a href="http://nyshalong.com/" target="_blank" rel="external">纽约文化沙龙</a></li>
</ul>
<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><ul>
<li><a href="http://djchina.org/" target="_blank" rel="external">数据新闻网</a></li>
<li><a href="http://flowingdata.com/" target="_blank" rel="external">FlowingData</a></li>
<li><a href="http://www.visualisingdata.com/" target="_blank" rel="external">VisualisingData</a></li>
<li><a href="http://blogger.ghostweather.com/" target="_blank" rel="external">Ghostweather R&amp;D Blog</a></li>
<li><a href="http://infosthetics.com/information_aesthetics_about.html" target="_blank" rel="external">Information Aesthetics</a></li>
<li><a href="http://junkcharts.typepad.com/junk_charts/" target="_blank" rel="external">Junk Charts</a></li>
<li><a href="http://lisacharlotterost.github.io/" target="_blank" rel="external">Lisa Charlotte Rost</a></li>
<li><a href="http://vis4.net/blog/" target="_blank" rel="external">vis4.net</a></li>
<li><a href="http://blog.plot.ly/" target="_blank" rel="external">Plotly Blog</a></li>
<li><a href="http://vallandingham.me/" target="_blank" rel="external">Jim Vallandingham</a></li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><a href="https://slides.com" target="_blank" rel="external">slides</a> 在线创建演示文档</li>
<li><a href="https://www.gitbook.com/" target="_blank" rel="external">Gitbook</a> &amp; <a href="https://readthedocs.org/" target="_blank" rel="external">Read the Docs</a> 创建在线电子书或文档</li>
<li><a href="https://feedly.com" target="_blank" rel="external">Feedly</a> + <a href="http://reederapp.com/" target="_blank" rel="external">Reeder</a>：Feed 订阅和阅读黄金搭档</li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a>: an API Documentation Browser and Code Snippet Manager</li>
<li><a href="https://github.com/1995eaton/chromium-vim" target="_blank" rel="external">cVim</a>：让 Chrome/Chromium 具有 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 的高效工作模式</li>
</ul>
<!-- ## 心理与行为科学 -->
<!-- - [Babies Learning Language](http://babieslearninglanguage.blogspot.com/)：斯坦福大学发展心理学教授 [Michael Frank](http://langcog.stanford.edu/) 的个人博客。博客文章涵盖 `发展心理学`、`心理学研究方法`、`开放科学` 等主题。 -->
<h1 id="Courses"><a href="#Courses" class="headerlink" title="Courses"></a>Courses</h1><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><ul>
<li><a href="http://stat545.com/index.html" target="_blank" rel="external">STAT545</a>: Data wrangling, exploration, and analysis with R</li>
<li><a href="http://socviz.github.io/soc880/" target="_blank" rel="external">Soc 880</a>: Data Visualization (with R)</li>
<li><a href="http://grangermoch.com/text-mining-in-r/" target="_blank" rel="external">Text Mining in R</a></li>
<li><a href="http://www.ling.upenn.edu/~joseff/rstudy/" target="_blank" rel="external">R Study Group</a></li>
</ul>
<h1 id="学编程"><a href="#学编程" class="headerlink" title="学编程"></a>学编程</h1><h2 id="lisp-elisp"><a href="#lisp-elisp" class="headerlink" title="lisp/elisp"></a>lisp/elisp</h2><ul>
<li><a href="http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html" target="_blank" rel="external">一个简短的 elisp (Emacs lisp) 入门教程</a></li>
<li><a href="http://www.newthinktank.com/2015/07/learn-lisp-one-video/" target="_blank" rel="external">一个简短的 lisp 教学视频</a></li>
<li><a href="http://book.emacs-china.org/" target="_blank" rel="external">子龙山人出品：Master Emacs in 21 Days</a></li>
<li><a href="http://smacs.github.io/elisp/" target="_blank" rel="external">水木社区：Emacs Lisp 简明教程</a></li>
</ul>
<h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p><a href="https://www.youtube.com/channel/UCOjD18EJYcsBog4IozkF_7w" target="_blank" rel="external">PyData</a><br><a href="https://www.youtube.com/channel/UC98CzaYuFNAA_gOINFB0e4Q" target="_blank" rel="external">EuroPython Conference</a><br><a href="https://www.youtube.com/channel/UCkhm72fuzkS9fYGlGpEmj7A" target="_blank" rel="external">Enthought</a><br><a href="https://www.youtube.com/channel/UCBBd3JxQl455JkWBeulc-9w" target="_blank" rel="external">Berkeley Institute for Data Science</a><br><a href="https://www.youtube.com/channel/UCDUS80bdunpmvWVPyFRPqFQ" target="_blank" rel="external">UofU Data</a><br><a href="https://www.youtube.com/channel/UCcAtD_VYwcYwVbTdvArsm7w" target="_blank" rel="external">mathematicalmonk’s channel</a><br><a href="https://www.youtube.com/channel/UC3xfbCMLCw1Hh4dWop3XtHg" target="_blank" rel="external">RStudio</a><br><a href="https://www.youtube.com/channel/UC8xNPQ-3a5t9uMU7Vah-jWA" target="_blank" rel="external">Jeff Leek</a><br><a href="https://www.youtube.com/channel/UCdjFpvS8lvT2MJVthOUvlyg" target="_blank" rel="external">Brian Caffo</a><br><a href="https://www.youtube.com/channel/UCZA0RbbSK1IXeeJysKYRWuQ" target="_blank" rel="external">Roger Peng</a><br><a href="https://www.youtube.com/channel/UCGwuewhdHD2q0BvuB2oWMRw" target="_blank" rel="external">berkeley-scf</a><br><a href="https://www.youtube.com/channel/UCpOIUW62tnJTtpWFABxWZ8g" target="_blank" rel="external">Codecourse</a><br><a href="https://www.youtube.com/user/learncodeacademy" target="_blank" rel="external">LearnCode.academy</a><br><a href="https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ" target="_blank" rel="external">sentdex</a><br><a href="https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg" target="_blank" rel="external">LevelUpTuts</a><br><a href="https://www.youtube.com/channel/UCFrjdcImgcQVyFbK04MBEhA" target="_blank" rel="external">Brandon Foltz</a><br><a href="https://www.youtube.com/user/noobtoprofessional" target="_blank" rel="external">Chris Hawkes</a><br><a href="https://www.youtube.com/channel/UCUR1pFG_3XoZn3JNKjulqZg" target="_blank" rel="external">thoughtbot</a></p>
<p>前端开发</p>
<ul>
<li><a href="https://www.youtube.com/channel/UCADyUOnhyEoQqrw_RrsGleA" target="_blank" rel="external">Chris Coyier: CSS-TRICKS</a></li>
<li><a href="https://www.youtube.com/channel/UCyIe-61Y8C4_o-zZCtO4ETQ" target="_blank" rel="external">DevTips</a></li>
<li><a href="https://www.youtube.com/user/QuentinWatt" target="_blank" rel="external">Quentin Watt Tutorials</a></li>
</ul>
<p><a href="https://www.youtube.com/channel/UCSk9gGdqmj-NdcYBQ4kt0jA" target="_blank" rel="external">Tristen Grant</a> Illustration<br><a href="https://www.youtube.com/channel/UC3TabHJUsa2BkEkN_xSpMvQ" target="_blank" rel="external">ATypI</a> Topography, Font design<br><a href="https://www.youtube.com/channel/UCRoLLb8MnLX-P_xg-Z-UxqQ" target="_blank" rel="external">Design Driven NYC</a> Talks<br><a href="https://www.youtube.com/channel/UCfWZwsP8trUy5uHJg8gcGIQ" target="_blank" rel="external">Mackenzie Child</a> Graphic Design<br><a href="https://www.youtube.com/channel/UCK_vX6MneWKCLtL0uJwYOxQ" target="_blank" rel="external">Carl Kwan</a> Presentation, Content</p>
<hr>
<p><a href="https://www.youtube.com/channel/UClh-kVGih16yME0-jp3pzVg" target="_blank" rel="external">Sydney Opera House Talks &amp; Ideas</a> Talks, Ideas, and Whatever!<br><a href="https://www.youtube.com/channel/UCWE-aBusAC3UauYLQna7JNQ" target="_blank" rel="external">Shalong NY</a> Talks 纽约文化沙龙</p>
<hr>
<p><a href="https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ" target="_blank" rel="external">Sacha Chua</a> Emacs, Tutorial, Talks, Conversations<br><a href="https://www.youtube.com/channel/UCkRmQ_G_NbdbCQMpALg6UPg" target="_blank" rel="external">emacsrocks</a></p>
<h2 id="Playlist"><a href="#Playlist" class="headerlink" title="Playlist"></a>Playlist</h2><p><a href="https://www.youtube.com/user/dataschool/playlists?shelf_id=4&amp;view=50&amp;sort=dd" target="_blank" rel="external">Introduction to Statistical Learning</a></p>
<h1 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h1><ul>
<li>Create a static presentation: R + Rstudio + Rmarkdown + Revealjs</li>
<li>Create a interactive presentation: R + Rstudio + Shiny</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;活在一个信息社会，信息越来越繁杂，必须不断整理和精简。这个页面仅用于整理个人在学习和娱乐过程中所遇到的非常好的在线资源的整理。方便自己重新回顾和反复查阅。&lt;/p&gt;
&lt;h1 id=&quot;社区&quot;&gt;&lt;a href=&quot;#社区&quot; class=&quot;headerlink&quot; title=&quot;社区&quot;
    
    </summary>
    
      <category term="Wiki" scheme="//lix90.github.io/categories/Wiki/"/>
    
    
      <category term="学习" scheme="//lix90.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>R：加载包</title>
    <link href="//lix90.github.io/2016/11/13/2016-11-13-daily/"/>
    <id>//lix90.github.io/2016/11/13/2016-11-13-daily/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T03:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-library-amp-require"><a href="#R-library-amp-require" class="headerlink" title="R: library &amp; require"></a>R: library &amp; require</h1><p>谢一辉有<a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">一篇博文</a>讨论了 <code>library</code> 和 <code>require</code> 两个函数的区别和误用。其实在文档中已经说明了两者的差别。虽然都可以载入 R 包，但是 <code>require</code> 等于是<strong>尝试</strong>加载包，并返回一个逻辑值，以反映是否加载成功。也就是说，无论是否以安装需要加载的包，<code>require</code> 都能正常执行。只不过 <code>require</code> 会出现警告“不存某个包”。而 <code>library</code> 是直接加载包，如果包不存在，那么就报错，停止执行后面的代码。所以，如果需要加载包，直接使用 <code>library</code> 即可，不需要 <code>require</code> 来画蛇添足。不过 <code>require</code> 有个好处，可以用来检测是否存在某个包，如果不存在，那么就安装。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pkg &lt;- <span class="string">"lix"</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">require</span>(pkg)) &#123;</div><div class="line">  print(paste0(<span class="string">"Cool! You load "</span>, pkg, <span class="string">"."</span>))</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  print(paste0(<span class="string">"Trying to install "</span>, pkg, <span class="string">"."</span>))</div><div class="line">  install.packages(pkg)</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">require</span>(pkg)) &#123;</div><div class="line">    print(paste0(pkg, <span class="string">" installed and loaded."</span>))</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">stop</span>(paste0(<span class="string">"Could not install "</span>, pkg, <span class="string">"."</span>))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，同样地，<code>library</code> 也可以返回逻辑值，通过参数 <code>logical.return = TRUE</code> 实现。但是仍然会给出警告 <code>Warning message</code>。嫌烦可以使用 <code>suppressWarnings</code> 来阻止警告的出现。事实上，看 <code>require</code> 的源码发现 <code>require</code> 本身就是调用的 <code>library</code>。所以说在加载包时，选择 <code>library</code> 肯定是更恰当的。<code>require</code> 只不过加了一层检测机制。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">value &lt;- <span class="keyword">tryCatch</span>(<span class="keyword">library</span>(package, lib.loc = lib.loc, </div><div class="line">                          character.only = <span class="literal">TRUE</span>, logical.return = <span class="literal">TRUE</span>, warn.conflicts = warn.conflicts, </div><div class="line">                          quietly = quietly), error = <span class="keyword">function</span>(e) e)</div></pre></td></tr></table></figure>
<p>对于加载函数，谢老大在<a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">那篇博文</a>中的评论中提到了一点经验，对于仅仅使用一个包中的一两个函数适合于使用 <code>pkg::func</code> 的形式调用函数。因为加载太多包会“污染”命名空间。</p>
<p>参考</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5595512/what-is-the-difference-between-require-and-library" target="_blank" rel="external">StackOverflow: What is the difference between require() and library()?</a></li>
<li><a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">Yihui: library() vs require() in R</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R-library-amp-require&quot;&gt;&lt;a href=&quot;#R-library-amp-require&quot; class=&quot;headerlink&quot; title=&quot;R: library &amp;amp; require&quot;&gt;&lt;/a&gt;R: library &amp;amp; req
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-12</title>
    <link href="//lix90.github.io/2016/11/12/2016-11-12-daily/"/>
    <id>//lix90.github.io/2016/11/12/2016-11-12-daily/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-12T14:11:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="detach-amp-attach"><a href="#detach-amp-attach" class="headerlink" title="detach &amp; attach"></a><code>detach</code> &amp; <code>attach</code></h2><p><code>attach</code></p>
<p>将数据或对象加载到 <code>search path</code> 中。这意味着数据库中可以查找到某对象，从而可以通过名称访问。当计算一个变量或者函数名时，R 需要从 <code>search</code> 列出的数据库名单中搜索。第一个匹配的对象将被使用。当 <code>attach</code> 一个 data frame 或者 list 到 search path，可以仅仅通过名称来访问 data frame 或 list 中的变量，而不需要被当作 data frame 或者 list 的成分。默认情况下，数据库会被 attach 到 search path 中的第二个位置，即 <code>pos = 2</code>，位于用户的 workspace（工作空间）之后，在所有前面 attach 过的包和数据库之前。但是 attach 的位置可以通过参数 <code>pos</code> 指定，但是无法指定到 <code>pos = 1</code>，因为被工作空间占用。事实上，数据库并没有被加载，而是在搜索路径创建了新的环境。list 中的元素或者 data frame 中的列，或者保存文件和环境中的对象被拷贝至新环境中。</p>
<p><code>attach</code> 在使用过程中存在副作用，即改变搜索路径，人们总是容易忘记 <code>detach</code>。在交互式使用中，<code>with</code> 相比 <code>attach/detach</code> 更可取。除非需要加载存储文件，用作 <code>load</code> 的一个封装。在编程中，函数不应该随意改变搜索路径。所以 <code>with</code> 经常被用在函数中。</p>
<p><code>detach</code></p>
<ul>
<li>将对象从 <code>search path</code> 中移除。对象包括 <code>attach</code> 过的 <code>data.frame</code> 和 package。</li>
<li>当没有给 <code>detach()</code> 输入参数将会移除 <code>search path</code> 中的第一个项目。</li>
<li>应该避免在函数中使用 <code>detach/attach</code>。</li>
<li>在控制台和脚本中使用时，应该用对象名称来 <code>detach</code>（而不是 <code>pos</code>）。</li>
</ul>
<h2 id="整数型数值"><a href="#整数型数值" class="headerlink" title="整数型数值"></a>整数型数值</h2><p><code>1L</code> 为 <code>integer</code>；<code>1</code> 为 <code>numeric</code>。即 <code>L</code> 用于声明这个数值为整数型。因为在 R 中整数为 32-bit 的长整型，所以使用 <code>L</code> 指代这样的数据类型。</p>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p>JavaScript：DOM &amp; BOM</p>
<blockquote>
<p>The BOM consists of the objects navigator, history, screen, location and document which are children of window. In the document node is the DOM, the document object model, which represents the contents of the page. You can manipulate it using javascript. （”node is in the DOM tree” or “node is the smallest unit in the DOM tree” or “nodes compose the DOM tree”）</p>
</blockquote>
<ul>
<li><a href="http://stackoverflow.com/questions/4416317/what-is-the-dom-and-bom-in-javascript" target="_blank" rel="external">Stackoverflow: What is the DOM and BOM in JavaScript?</a></li>
<li><a href="https://vkanakaraj.wordpress.com/2009/12/18/javascript-vs-dom-vs-bom-relationship-explained/" target="_blank" rel="external">JavaScript Vs DOM Vs BOM, relationship explained</a></li>
</ul>
<p>HTTP：HTTP 是 web 的核心，也是动态 web 应用的核心。理解 HTTP 是理解现代 web 应用如何工作和如何构建的核心。</p>
<p>数据库的五个基本单位：数据库服务器，数据库，数据表，数据字段（数据列），数据行。</p>
<p>三类 SQL 语句：</p>
<ul>
<li>数据定义语言：定义不同的数据段、数据库、表、列、索引等。常用关键字：<code>create</code> <code>drop</code> <code>alter</code>。</li>
<li>数据操作语言：用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用关键字：<code>insert</code> <code>delete</code> <code>update</code> <code>select</code>。</li>
<li>数据控制语言：用于控制不同数据段直接的许可和访问级别。常用关键字：<code>grant</code> <code>revoke</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;R&quot;&gt;&lt;a href=&quot;#R&quot; class=&quot;headerlink&quot; title=&quot;R&quot;&gt;&lt;/a&gt;R&lt;/h1&gt;&lt;h2 id=&quot;detach-amp-attach&quot;&gt;&lt;a href=&quot;#detach-amp-attach&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="数据库" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="//lix90.github.io/tags/SQL/"/>
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="HTTP" scheme="//lix90.github.io/tags/HTTP/"/>
    
      <category term="DOM" scheme="//lix90.github.io/tags/DOM/"/>
    
      <category term="BOM" scheme="//lix90.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>男士衬衫穿搭技巧</title>
    <link href="//lix90.github.io/2016/11/11/2016-11-11-life-shirt/"/>
    <id>//lix90.github.io/2016/11/11/2016-11-11-life-shirt/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-11T10:09:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>临近求职，即将从学生狗迈入“社会”，需要关注下着装和生活品味。个人喜欢将看起来不严肃的事情也当做很“正经”的事情学习研究一番，这篇笔记便是最好的见证。</p>
<h1 id="男士衬衫穿搭技巧"><a href="#男士衬衫穿搭技巧" class="headerlink" title="男士衬衫穿搭技巧"></a>男士衬衫穿搭技巧</h1><h2 id="正装衬衫"><a href="#正装衬衫" class="headerlink" title="正装衬衫"></a>正装衬衫</h2><h3 id="挑选技巧"><a href="#挑选技巧" class="headerlink" title="挑选技巧"></a>挑选技巧</h3><ol>
<li>合身：首要条件务必合身。</li>
<li>版型：<ul>
<li><strong>Slim</strong> 腰线挺拔</li>
<li><strong>Regular</strong> 严肃商务风</li>
<li><strong>Full</strong> 宽容，适合较胖的人</li>
</ul>
</li>
<li>颜色：白色严肃，适合最正式及重要场合；次重要场合可以选蓝色和灰色。</li>
</ol>
<h3 id="搭配技巧"><a href="#搭配技巧" class="headerlink" title="搭配技巧"></a>搭配技巧</h3><ol>
<li>白衬衫谨慎单穿：对身材要求高；故可做正装内搭；单穿宜选择蓝灰。</li>
<li>搭配灰色或海军蓝的西装：黑色适合场合较少，比较沉闷和老气。</li>
<li>正装衬衫也可以在非正式场合穿：例如，搭配不沉闷的领带。也可以把休闲商务内搭换成正装衬衫。</li>
</ol>
<h2 id="牛津纺衬衫"><a href="#牛津纺衬衫" class="headerlink" title="牛津纺衬衫"></a>牛津纺衬衫</h2><blockquote>
<p>牛津纺一般由白色和其他颜色的纱线交织而成。白色的加入，会在视觉上弱化了另一颜色的色度，形成的特殊“点状肌理”，使整体的色调更加柔和，这也是牛津纺最吸引人之处。<br>牛津纺衬衫的适用性非常强，既可上班，亦可休闲，并往往能体现穿着者儒雅、斯文的一面。</p>
</blockquote>
<h3 id="搭配技巧-1"><a href="#搭配技巧-1" class="headerlink" title="搭配技巧"></a>搭配技巧</h3><ol>
<li>衬衫下摆处理：牛津纺适合单穿，在不同场合可以考虑是否将下摆包进裤子里。<ul>
<li>日常工作场合，可以考虑穿着蓝色、灰色等明度低的牛津纺衬衫，下摆包进裤子。可搭配一条卡其裤/西裤，和一双与之搭配的鞋子。</li>
<li>工作之余下摆可以不用包进裤子，但这种情况下，下摆不宜过长。合适的下摆有利于调整身材比例。</li>
</ul>
</li>
<li>牛津纺色调较柔和，可以尝试多种颜色：白蓝为百搭；粉红色适合偏瘦的人；马卡龙绿、桃红适合沙滩、度假等休闲场合。</li>
<li>无敌内搭单品：虽百搭，但与之绝配的是针织衫/毛衣。还可以搭配外套或夹克。</li>
</ol>
<h2 id="格子衬衫"><a href="#格子衬衫" class="headerlink" title="格子衬衫"></a>格子衬衫</h2><h3 id="挑选原则"><a href="#挑选原则" class="headerlink" title="挑选原则"></a>挑选原则</h3><ol>
<li>小格子：大格子衬衫是屌丝感的罪魁祸首。</li>
<li>颜色鲜而柔和</li>
</ol>
<blockquote>
<p>小格子可以穿出文艺温柔的感觉，鲜亮而柔和的颜色避免了深色线条的粗硬感；另外小格子衬衫可把扣子全扣上穿出一种精致感。</p>
</blockquote>
<h3 id="搭配技巧-2"><a href="#搭配技巧-2" class="headerlink" title="搭配技巧"></a>搭配技巧</h3><p>格子衬衫单穿对衬衫及个人气质要求相对高，但内搭比较容易穿出彩。</p>
<p>格子衬衫搭配需要遵循2个原则：</p>
<ol>
<li>同色系：搭配的其他单品最好呼应其中的颜色，而不要给造型新增颜色。</li>
<li>简约（Simple）：搭配单品尽量保持 simple（纯色、无花纹）</li>
</ol>
<p>技巧：</p>
<ol>
<li>内搭纯白 Tee：选择跟格子颜色相关的裤子。</li>
<li>绑在腰上，作为造型装饰。</li>
<li>内搭：西装、马甲、皮衣都非常合适。<ul>
<li>西装：可不需要格子衬衫与西装色系呼应，可以大胆撞色。</li>
<li>马甲：化解了单穿格子衬衫的难度。</li>
</ul>
</li>
<li>如何化解深色大格子衬衫的屌丝既视感：搭配牛仔外套，将衬衫内搭，其他单品遵循同色系、simple两个原则。</li>
</ol>
<h2 id="牛仔衬衫"><a href="#牛仔衬衫" class="headerlink" title="牛仔衬衫"></a>牛仔衬衫</h2><p>牛仔衬衫包括两种风格：</p>
<ol>
<li>阳刚不羁：牛仔布厚实、织纹清晰，加上洗水工艺</li>
<li>优雅清新：牛仔布细密柔软，水洗致颜色柔和</li>
</ol>
<h3 id="搭配技巧-3"><a href="#搭配技巧-3" class="headerlink" title="搭配技巧"></a>搭配技巧</h3><ol>
<li>单穿、外穿牛仔衬衫：让牛仔衬衫成为主角！<ul>
<li>下身可搭配深色牛仔裤、卡其裤、中长靴；</li>
<li>避免同牛仔衬衫颜色接近的牛仔裤；</li>
</ul>
</li>
<li>内搭：可搭配棒球外套、皮衣和针织衫。</li>
<li>搭配军绿色单品：军绿色风格与天然有着硬朗感的牛仔衬衫风格匹配。</li>
</ol>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ul>
<li>正式场合颜色和面料宜淡雅</li>
<li>分清主配角</li>
<li>灵活运用加减法</li>
<li>一定要考虑身材和场合</li>
<li>正装衬衫可以和休闲单品搭配，但休闲款谨慎当正装穿</li>
<li>你柔我柔，你刚我刚</li>
<li>没有完美的单品，单穿还是内外搭，需具体分析</li>
</ul>
<hr>
<p>该博文总结浓缩于<a href="https://www.douban.com/note/513750015/" target="_blank" rel="external">这篇文章</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;临近求职，即将从学生狗迈入“社会”，需要关注下着装和生活品味。个人喜欢将看起来不严肃的事情也当做很“正经”的事情学习研究一番，这篇笔记便是最好的见证。&lt;/p&gt;
&lt;h1 id=&quot;男士衬衫穿搭技巧&quot;&gt;&lt;a href=&quot;#男士衬衫穿搭技巧&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="生活方式" scheme="//lix90.github.io/categories/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
    
      <category term="生活方式" scheme="//lix90.github.io/tags/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
      <category term="衬衫" scheme="//lix90.github.io/tags/%E8%A1%AC%E8%A1%AB/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-10</title>
    <link href="//lix90.github.io/2016/11/10/2016-11-10-daily/"/>
    <id>//lix90.github.io/2016/11/10/2016-11-10-daily/</id>
    <published>2016-11-09T16:00:00.000Z</published>
    <updated>2016-11-12T14:11:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ruby：修改-RubyGems-镜像"><a href="#Ruby：修改-RubyGems-镜像" class="headerlink" title="Ruby：修改 RubyGems 镜像"></a>Ruby：修改 RubyGems 镜像</h1><p>在此使用较新的 RubyGems 版本，建议 2.6.X 以上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gem update --system # 需要翻墙</div><div class="line">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class="line">$ gem sources -l</div><div class="line">https: //gems.ruby-china.org</div><div class="line"># 确保只有以上一项</div></pre></td></tr></table></figure>
<p>如果使用 Gemfile 和 Bundle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org</div></pre></td></tr></table></figure>
<p>参考网址：<a href="https://gems.ruby-china.org/" target="_blank" rel="external">https://gems.ruby-china.org/</a></p>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><ul>
<li><a href="https://www.datacamp.com/community/blog/python-pandas-cheat-sheet" target="_blank" rel="external">Pandas Cheat Sheet for Data Science in Python</a></li>
</ul>
<p>几篇关于统计显著性和统计显著性水平 p 值的论文和讨论：</p>
<ul>
<li><a href="http://stats.stackexchange.com/questions/134890/is-p-value-essentially-useless-and-dangerous-to-use" target="_blank" rel="external">Cross Validated: Is p-value essentially useless and dangerous to use?</a></li>
<li>Wasserstein, R. L., &amp; Lazar, N. A. (2016). The ASA’s statement on p-values: context, process, and purpose. The American Statistician.</li>
<li>Nuzzo, R. (2014). Statistical errors. Nature, 506(7487), 150-152.</li>
<li>Greenland, S., Senn, S. J., Rothman, K. J., et al. (2016). Statistical tests, P values, confidence intervals, and power: a guide to misinterpretations. European journal of epidemiology, 1-14.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ruby：修改-RubyGems-镜像&quot;&gt;&lt;a href=&quot;#Ruby：修改-RubyGems-镜像&quot; class=&quot;headerlink&quot; title=&quot;Ruby：修改 RubyGems 镜像&quot;&gt;&lt;/a&gt;Ruby：修改 RubyGems 镜像&lt;/h1&gt;&lt;p&gt;在此
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="P-value" scheme="//lix90.github.io/tags/P-value/"/>
    
      <category term="Python" scheme="//lix90.github.io/tags/Python/"/>
    
      <category term="Ruby" scheme="//lix90.github.io/tags/Ruby/"/>
    
      <category term="Pandas" scheme="//lix90.github.io/tags/Pandas/"/>
    
      <category term="统计显著性" scheme="//lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E6%98%BE%E8%91%97%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>R：处理缺失值</title>
    <link href="//lix90.github.io/2016/11/09/2016-11-09-r-missing-value-outlier/"/>
    <id>//lix90.github.io/2016/11/09/2016-11-09-r-missing-value-outlier/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2016-11-10T07:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近在分析毕业论文数据，顺便复习和学习新的数据分析方法，本文纯属搬运和整理他人的分享。</p>
<h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><p><code>mice</code> 包是专门用来处理缺失值的 R 语言包。可以通过 <code>mice::md.pattern()</code> 查看缺失值的“数据模式”。</p>
<h2 id="删除记录-样本"><a href="#删除记录-样本" class="headerlink" title="删除记录/样本"></a>删除记录/样本</h2><p>在 R 中，通过 <code>na.action = na.omit</code> 删除包含有缺失值的观测行。但需要满足两个条件：</p>
<ul>
<li>有足够的样本点；</li>
<li>不会引入偏差。</li>
</ul>
<h2 id="删除变量-属性"><a href="#删除变量-属性" class="headerlink" title="删除变量/属性"></a>删除变量/属性</h2><p>如果数据集中某个特定变量包含较多的缺失值，并且删除这个变量能够保留更多的观测值。如果该变量不太重要，那么可以删除它。该方法需要权衡变量的重要性和观测值数量。</p>
<h2 id="使用均值-中位数-众数进行插补"><a href="#使用均值-中位数-众数进行插补" class="headerlink" title="使用均值/中位数/众数进行插补"></a>使用均值/中位数/众数进行插补</h2><p>这是一种比较简单粗暴的方法，如果该变量对因变量的影响较小，该方法是可以接受的。但是，很可能人为增加噪音。</p>
<h2 id="预测法"><a href="#预测法" class="headerlink" title="预测法"></a>预测法</h2><p>可使用的方法包括：KNN差值，rpart包，mice包。</p>
<h3 id="kNN-差值法"><a href="#kNN-差值法" class="headerlink" title="kNN 差值法"></a>kNN 差值法</h3><p><code>DMwR::knnImputation()</code> 函数使用 k 近邻方法来填充缺失值。</p>
<blockquote>
<p>具体过程如下：对于需要插值的记录，基于欧氏距离计算k个和它最近的观测。接着将这k个近邻的数据利用距离逆加权算出填充值，最后用该值替代缺失值。</p>
</blockquote>
<h3 id="rpart"><a href="#rpart" class="headerlink" title="rpart"></a>rpart</h3><p>kNN 插值法的缺点对因子类变量的插补效果不好。rpart 的优点是只需一个未缺失值就可以填充整个数据样本。</p>
<h3 id="mice"><a href="#mice" class="headerlink" title="mice"></a>mice</h3><blockquote>
<p>mice 是链式方程多元插值的简写（Multivariate Imputation by Chained Equations）。mice包提供了多种先进的缺失值处理方法。它使用一种不同寻常的方法来进行两步插值：首先利用mice函数建模再用complete函数生成完整数据。mice(df)会返回df的多个完整副本，每个副本都对缺失的数据插补了不同的值。complete()函数则会返回这些数据集中的一个（默认）或多个。</p>
</blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://www.xueqing.tv/cms/article/185" target="_blank" rel="external">雪晴数据网：R语言处理缺失值的若干方法</a><a href="http://datascienceplus.com/missing-value-treatment/" target="_blank" rel="external">原文</a></li>
<li><a href="http://datascienceplus.com/imputing-missing-data-with-r-mice-package/" target="_blank" rel="external">datascience+: Imputing Missing Data with R; MICE package</a></li>
<li><a href="http://www.zhaokv.com/2016/01/missing-values.html" target="_blank" rel="external">如何处理数据中的缺失值</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近在分析毕业论文数据，顺便复习和学习新的数据分析方法，本文纯属搬运和整理他人的分享。&lt;/p&gt;
&lt;h1 id=&quot;缺失值处理&quot;&gt;&lt;a href=&quot;#缺失值处理&quot; class=&quot;headerlink&quot; title=&quot;缺失值处理&quot;&gt;&lt;/a&gt;缺失值处理&lt;/h1&gt;&lt;p&gt;&lt;code
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="统计学" scheme="//lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="数据分析" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="缺失值" scheme="//lix90.github.io/tags/%E7%BC%BA%E5%A4%B1%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>R：数据导入</title>
    <link href="//lix90.github.io/2016/11/08/2016-11-08-r-import-data/"/>
    <id>//lix90.github.io/2016/11/08/2016-11-08-r-import-data/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-08T13:20:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导入-CSV-数据"><a href="#导入-CSV-数据" class="headerlink" title="导入 CSV 数据"></a>导入 CSV 数据</h1><p>使用基本包函数</p>
<p><code>read.csv()</code></p>
<p>使用 <code>readr</code> 包</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## wrapper function of data loading for reusing</span></div><div class="line">importdata &lt;- <span class="keyword">function</span>(d,f) &#123;</div><div class="line">  data &lt;- readr::read_csv(</div><div class="line">                   file = file.path(d, f),</div><div class="line">                   col_names = <span class="literal">TRUE</span>,</div><div class="line">                   na = <span class="string">"NULL"</span>,</div><div class="line">                   trim_ws = <span class="literal">TRUE</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">## load data</span></div><div class="line">data &lt;- importdata(input_dir, input_file)</div></pre></td></tr></table></figure>
<h1 id="导入-EXCEL-数据"><a href="#导入-EXCEL-数据" class="headerlink" title="导入 EXCEL 数据"></a>导入 EXCEL 数据</h1><h1 id="导入-SPSS-数据"><a href="#导入-SPSS-数据" class="headerlink" title="导入 SPSS 数据"></a>导入 SPSS 数据</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导入-CSV-数据&quot;&gt;&lt;a href=&quot;#导入-CSV-数据&quot; class=&quot;headerlink&quot; title=&quot;导入 CSV 数据&quot;&gt;&lt;/a&gt;导入 CSV 数据&lt;/h1&gt;&lt;p&gt;使用基本包函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="数据分析" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>R：基本数据可视化</title>
    <link href="//lix90.github.io/2016/11/08/2016-11-08-r-basic-vis/"/>
    <id>//lix90.github.io/2016/11/08/2016-11-08-r-basic-vis/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-09T14:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要分析毕业论文数据，借机温习一下常见的统计图形，并且熟悉下如何在 R 下进行数据可视化。</p>
<h1 id="箱图-Boxplot"><a href="#箱图-Boxplot" class="headerlink" title="箱图 Boxplot"></a>箱图 Boxplot</h1><h2 id="什么是箱图？"><a href="#什么是箱图？" class="headerlink" title="什么是箱图？"></a>什么是箱图？</h2><p>箱形图，又叫箱须图（Box-Whisker Plot），是利用数据的五个特征值来描述数据的图形。这五个特征值为：最小值、第一四分位数、中位数、第三四分位数、最大值。</p>
<h2 id="箱形图的用处"><a href="#箱形图的用处" class="headerlink" title="箱形图的用处"></a>箱形图的用处</h2><ul>
<li>粗略估计数据的<strong>对称性</strong>：由上下箱须和箱高度的长短差异表现出来</li>
<li>粗略观察数据的<strong>离散程度</strong>和<strong>集中程度</strong>：由上下箱须距离和箱的高度表现出来</li>
<li>粗略比较样本之间的特征</li>
</ul>
<h2 id="箱形图的不足"><a href="#箱形图的不足" class="headerlink" title="箱形图的不足"></a>箱形图的不足</h2><ul>
<li>无法精确度量数据分布的偏态和尾重程度：可通过偏态值</li>
<li>对于较大的数据集，反映的信息较为模糊</li>
<li>中位数代表总体集中程度存在局限性</li>
</ul>
<h2 id="绘制过程"><a href="#绘制过程" class="headerlink" title="绘制过程"></a>绘制过程</h2><p><img src="/img/boxplot.jpg" alt="箱形图"></p>
<ul>
<li>计算上四分位数，中位数，下四分位数。</li>
<li>计算上四分位数和下四分位数之间的差值，即四分位数差（IQR，interquantile range）。</li>
<li>绘制箱线图的上下范围，上限为上四分位数，下限为下四分位数。在箱子内部中位数的位置绘制横线。</li>
<li>大于上四分位数1.5倍四分位数差的值，或者小于下四分位数1.5倍四分位数差的值，划为异常值（outliers）。</li>
<li>异常值之外，最靠近上边缘和下边缘的两个值处，画横线，作为箱线图的触须。</li>
<li>极端异常值，即超出四分位数差3倍距离的异常值，用实心点表示；较为温和的异常值，即处于1.5倍-3倍四分位数差之间的异常值，用空心点表示。</li>
<li>为箱线图添加名称，数轴等。</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="http://blog.sciencenet.cn/blog-255662-239993.html" target="_blank" rel="external">科学网：什么是箱线图</a></li>
<li><a href="http://web.pdx.edu/~stipakb/download/PA551/boxplot.html" target="_blank" rel="external">http://web.pdx.edu/~stipakb/download/PA551/boxplot.html</a></li>
</ul>
<h2 id="使用-R-绘制箱图"><a href="#使用-R-绘制箱图" class="headerlink" title="使用 R 绘制箱图"></a>使用 R 绘制箱图</h2><h3 id="基本包函数-boxplot"><a href="#基本包函数-boxplot" class="headerlink" title="基本包函数 boxplot"></a>基本包函数 <code>boxplot</code></h3><p>基本用法：<code>boxplot(x)</code> 或者 <code>boxplot(x~y, data)</code></p>
<p>常用参数：</p>
<ul>
<li><code>formula</code> <code>y ~ grp</code> <code>y</code> 为数值型向量，<code>grp</code> 为组或者因素水平。</li>
<li><code>range</code> 设定箱须的长度，默认为 1.5 个箱高，即 1.5 倍四分位数差。</li>
<li><code>width</code></li>
<li><code>varwidth</code></li>
<li><code>notch</code></li>
<li><code>outline</code> 是否绘制异常值</li>
<li><code>names</code> 组标签</li>
<li><code>boxwex</code> 缩放参数</li>
<li><code>staplewex</code> 须顶端的横线的宽度（按盒宽比例）</li>
<li><code>outwex</code></li>
<li><code>border</code> 边框颜色</li>
<li><code>col</code> 箱体的颜色</li>
<li><code>log</code> 对数坐标</li>
<li><code>pars</code> 更多绘图参数列表</li>
<li><code>add</code> 添加到当前图中</li>
<li><code>at</code> 绘制的位置</li>
</ul>
<h3 id="ggplot2"><a href="#ggplot2" class="headerlink" title="ggplot2"></a>ggplot2</h3><p><code>ggplot</code> 的绘图语法是以添加图层的形式绘制图形。虽然语法上与 <code>boxplot()</code> 存在差异，但是参数都几乎一样。</p>
<p>首先通过 <code>ggplot()</code> 创建图形（初始化一个 ggplot 的对象），声明输入数据和一般的图形视觉参数（aesthetic mapping，例如线形，颜色等）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box_plot &lt;- ggplot(data, aes(x, y, <span class="keyword">...</span>))</div></pre></td></tr></table></figure>
<p>然后添加 <code>geom_boxplot</code> 图层（layers）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box_plot &lt;- box_plot + geom_boxplot(<span class="keyword">...</span>)</div></pre></td></tr></table></figure>
<p><code>geom_boxplot()</code> 函数有以下一些参数：</p>
<ul>
<li><code>mapping</code> 和 <code>data</code> 跟 <code>ggplot()</code> 的一样，当没有声明时，直接继承 <code>ggplot</code>。</li>
<li>位置：<code>position</code></li>
<li>设置异常值的样式：<code>outlier.colour</code> <code>outlier.shape</code> <code>outlier.size</code> <code>outlier.stroke</code></li>
<li>槽的样式：<code>notch</code> <code>notchwidth</code></li>
<li><code>show.legend</code> 显示图例</li>
<li><code>coef</code> 等同于 <code>boxplot</code> 中的 <code>range</code></li>
</ul>
<h3 id="lattice"><a href="#lattice" class="headerlink" title="lattice"></a>lattice</h3><blockquote>
<p>The lattice package, written by Deepayan Sarkar, attempts to improve on base R graphics by providing better defaults and the ability to easily display multivariate relationships. In particular, the package supports the creation of trellis graphs - graphs that display a variable or the relationship between variables, conditioned on one or more other variables.</p>
</blockquote>
<p><code>lattice</code> 的特长在于展示多变量关系。</p>
<p>变量的关系通过 <code>formula</code> 表示，例如：</p>
<ul>
<li><code>~x|A</code> 表示在因素 <code>A</code> 的所有水平下绘制相应的数值变量 <code>x</code> 的图形</li>
<li><code>y~x | A*B</code> <code>A</code> 和 <code>B</code> 两个因素混合条件下的 <code>y</code> 和 <code>x</code> 的关系</li>
</ul>
<p>参考 <a href="http://www.statmethods.net/advgraphs/trellis.html" target="_blank" rel="external">Quick-R: Lattice Graphs</a></p>
<p><code>lattice</code> 中绘制箱图的函数为 <code>bwplot()</code></p>
<h2 id="与箱图类似的图"><a href="#与箱图类似的图" class="headerlink" title="与箱图类似的图"></a>与箱图类似的图</h2><ul>
<li>Violin Plots <code>vioplot</code> 包<ul>
<li>呈现出了分布特征</li>
</ul>
</li>
<li>Tufte boxplot</li>
</ul>
<h1 id="散点图-Scatterplot"><a href="#散点图-Scatterplot" class="headerlink" title="散点图 Scatterplot"></a>散点图 Scatterplot</h1><h2 id="什么是散点图？"><a href="#什么是散点图？" class="headerlink" title="什么是散点图？"></a>什么是散点图？</h2><blockquote>
<p>散点图对于绘制多变量数据非常有用。它们可帮助您确定各刻度变量之间的潜在关系。简单散点图使用二维坐标系绘制两个变量。三维散点图使用三维坐标系绘制三个变量。如果需要绘制更多的变量，则可以尝试重叠散点图和散点图矩阵 (SPLOM)。重叠散点图显示 x-y 变量的重叠对，其中每一对都以颜色或形状加以区分。SPLOM 创建一个二维散点图的矩阵，在 SPLOM 中每个变量都参照另外一个变量进行绘制。</p>
</blockquote>
<ul>
<li>保留了原始数据信息</li>
<li>展示多变量关系</li>
</ul>
<h2 id="在-R-中绘制基本的散点图"><a href="#在-R-中绘制基本的散点图" class="headerlink" title="在 R 中绘制基本的散点图"></a>在 R 中绘制基本的散点图</h2><ul>
<li>基本包 <code>plot</code> 顶层绘图函数：<code>plot(x, type=&quot;p&quot;, pch=1)</code></li>
<li><code>ggplot2::geom_point()</code></li>
</ul>
<h2 id="散点图矩阵"><a href="#散点图矩阵" class="headerlink" title="散点图矩阵"></a>散点图矩阵</h2><blockquote>
<p>散点图矩阵是散点图的高维扩展，它从一定程度上克服了在平面上展示高维数据的困难，在展示多维数据的两两关系时有着不可替代的作用。— <a href="http://cos.name/2009/03/scatterplot-matrix-visualization/" target="_blank" rel="external">统计之都</a></p>
</blockquote>
<ul>
<li><code>graphics::pairs()</code> 是 R 中绘制散点图矩阵的经典函数</li>
<li><code>car::scatterplot.matrix()</code> 或者简写 <code>car::spm()</code>：可以直接指定散点图中主对角线上的绘图元素（密度图、箱线图、直方图、QQ图等）。</li>
<li><code>YaleToolkit::gpairs()</code></li>
<li><code>lattice::splom()</code> 可以按类别绘制散点图矩阵。</li>
<li><code>GGally::ggpairs()</code> Hadley 推荐的绘制散点图矩阵的函数，用于替代 <code>ggplot2::plotmatrix()</code></li>
</ul>
<h2 id="散点图变式或类似的图形"><a href="#散点图变式或类似的图形" class="headerlink" title="散点图变式或类似的图形"></a>散点图变式或类似的图形</h2><p>热图</p>
<ul>
<li><code>gplots::heatmap.2()</code></li>
<li><code>ggplot2::geom_raster()</code> <code>ggplot2::geom_tile()</code></li>
</ul>
<p>hexbin plot</p>
<blockquote>
<p>We can use the hexbin package in case we have multiple points in the same place (overplotting). Hexagon binning is a form of bivariate histogram useful for visualizing the structure in datasets with large n.</p>
</blockquote>
<ul>
<li><code>Hexbin::hexbinplot()</code></li>
<li><p><code>ggplot2</code>: <code>stat_binhex()</code> <code>geom_bin2d()</code></p>
</li>
<li><p>在散点图上添加等高线：<code>ggplot2::geom_density2d()</code></p>
</li>
<li>对散点图进行平滑 <code>graphics::smoothScatter()</code></li>
<li>在散点图上加上分布图或者直方图<ul>
<li>使用 <code>ggplot2</code> 分别绘制散点图和直方图，然后用 <code>gridExtra</code> 把图拼接在一起。</li>
<li>使用 <code>ggplot2</code> 中的 <code>geom_rug()</code> 图层（rug plots）</li>
<li>使用 <code>ggExtra::ggMarginal()</code> 添加直方图到 <code>ggplot</code> 图层上。</li>
<li>在这里可能需要对齐图，可以用到 <code>gtable</code> 包，可以将不同的 <code>ggplot</code> 图拼接时对齐。</li>
</ul>
</li>
</ul>
<p>参考: <a href="http://stackoverflow.com/questions/7714677/r-scatterplot-with-too-many-points" target="_blank" rel="external">StackOverflow: Scatterplot with too many points</a></p>
<h1 id="直方图-Histogram"><a href="#直方图-Histogram" class="headerlink" title="直方图 Histogram"></a>直方图 Histogram</h1><p>直方图用来展示数值型数据的分布，可以用来估计连续性数据的概率分布。直方图的纵轴为频率或者相对频率。</p>
<p>使用 R 绘制直方图：</p>
<p><code>graphics::hist()</code><br><code>graphics::plot.histogram()</code><br><code>lattice::histogram()</code><br><code>MASS::hist.scott()</code> 可以自动指派 bin 宽度。<br><code>MASS::truehist()</code><br><code>ggplot2::geom_histogram()</code><br><code>ggplot2::geom_freqpoly()</code><br><code>plotrix::histStack()</code><br><code>plotrix::multhist()</code><br><code>plotrix::plotH()</code><br><code>plotrix::weighted.hist()</code><br><code>psych::multi.hist()</code><br><code>psych::pairs.panels()</code><br><code>psych::scatter.hist()</code></p>
<p>等等</p>
<h1 id="其他统计图"><a href="#其他统计图" class="headerlink" title="其他统计图"></a>其他统计图</h1><p>Mosaic Plot 类别数据，面积大小相对比例<br>Heat Map 多变量关系，通过色彩深浅区分频率、密度和大小<br>Pareto chart 条形图+累加线图，质量控制<br>Sparkline 时间序列，气候，金融<br>Radar chart 雷达图<br>Line Chart 连续数据，趋势，时间序列数据<br>Bar Chart 类别数据，大小比较<br>Correlogram 相关图，展示相关矩阵</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/List_of_graphical_methods" target="_blank" rel="external">Wikipedia: List of graphical methods</a></p>
<h1 id="数据可视化的几点原则"><a href="#数据可视化的几点原则" class="headerlink" title="数据可视化的几点原则"></a>数据可视化的几点原则</h1><blockquote>
<p>Graphical displays should:</p>
<ul>
<li>show the data 显示原始数据</li>
<li>induce the viewer to think about the substance rather than about methodology, graphic design, the technology of graphic production or something else 引导观察者思考内容而非其他</li>
<li>avoid distorting what the data has to say 避免扭曲真实数据要展现的东西</li>
<li>present many numbers in a small space 在较小的空间展现大量的数据</li>
<li>make large data sets coherent 让大数据集具有一致性（清晰明了）？</li>
<li>encourage the eye to compare different pieces of data 鼓励用眼睛去比较数据之间的差异</li>
<li>reveal the data at several levels of detail, from a broad overview to the fine structure 从宏观到微观揭示数据表达的信息</li>
<li>serve a reasonably clear purpose: description, exploration, tabulation or decoration 服务于合理清晰的目标：描述，探索，制表或者装饰？</li>
<li>be closely integrated with the statistical and verbal descriptions of a data set. 紧密整合统计和言语上对数据集的描述</li>
</ul>
<p>— The Visual Display of Quantitative Information, Edward Tufte</p>
</blockquote>
<h1 id="统计图表所要展示的一些定量信息"><a href="#统计图表所要展示的一些定量信息" class="headerlink" title="统计图表所要展示的一些定量信息"></a>统计图表所要展示的一些定量信息</h1><p>参考：<a href="https://en.wikipedia.org/wiki/Data_visualization" target="_blank" rel="external">Wikipedia: Data Visualization</a></p>
<blockquote>
<p>Quantitative messages</p>
<p>Author Stephen Few described eight types of quantitative messages that users may attempt to understand or communicate from a set of data and the associated graphs used to help communicate the message:</p>
<ul>
<li><strong>Time-series</strong>: A single variable is captured over a period of time. A line chart may be used to demonstrate the trend. 时序，随着时间发展而变化</li>
<li><strong>Ranking</strong>: Categorical subdivisions are ranked in ascending or descending order. A bar chart may be used to show the comparison across the sales persons. 顺序，类别之间的大小顺序</li>
<li><strong>Part-to-whole</strong>: Categorical subdivisions are measured as a ratio to the whole. A bar chart can show the comparison of ratios. 部分相对于整体的比例</li>
<li><strong>Deviation</strong>: Categorical subdivisions are compared against a reference. A bar chart can show comparison of the actual versus the reference amount. 变异，与参考对象进行比较</li>
<li><strong>Frequency distribution</strong>: Shows the number of observations of a particular variable for given interval. A histogram, a type of bar chart, may be used for this analysis. A boxplot helps visualize key statistics about the distribution, such as median, quartiles, outliers, etc. 频率分布</li>
<li><strong>Correlation</strong>: Comparison between observations represented by two variables (X,Y) to determine if they tend to move in the same or opposite directions. A scatter plot is typically used for this message. 相关性</li>
<li><strong>Nominal comparison</strong>: Comparing categorical subdivisions in no particular order. A bar chart may be used for this comparison. 类别比较，无特定顺序</li>
<li><strong>Geographic or geospatial</strong>: Comparison of a variable across a map or layout. A cartogram is a typical graphic used. 地理和空间信息</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要分析毕业论文数据，借机温习一下常见的统计图形，并且熟悉下如何在 R 下进行数据可视化。&lt;/p&gt;
&lt;h1 id=&quot;箱图-Boxplot&quot;&gt;&lt;a href=&quot;#箱图-Boxplot&quot; class=&quot;headerlink&quot; title=&quot;箱图 Boxplot&quot;&gt;&lt;/a&gt;箱
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="数据可视化" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>R：描述性统计</title>
    <link href="//lix90.github.io/2016/11/08/2016-11-08-r-desc-stats/"/>
    <id>//lix90.github.io/2016/11/08/2016-11-08-r-desc-stats/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-08T13:01:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取数据表的属性：</p>
<ul>
<li><code>str(data)</code> 数据构成</li>
<li>列数：<code>ncol(data)</code></li>
<li>行数：<code>nrow(data)</code></li>
<li>名称：<code>names(data)</code> 或者 <code>col.names(data)</code> <code>row.names(data)</code></li>
<li>长度：<code>length(data)</code> 或者查看某一列的唯一值个数 <code>length(unique(data[,&quot;col_name&quot;]))</code> 或者 <code>length(unique(data$col_name))</code></li>
</ul>
<p>描述性统计：</p>
<p>直接使用 <code>summary(data)</code> 就可以得到描述性统计值。<code>summary</code> 会根据输入对象的类型而返回不同的统计值。<br>如果对象为 <code>charactor</code> 那么得到的是字符串总长度和 <code>Class</code> 和 <code>Mode</code>。如果对象为 <code>factor</code>，得到的是每个 <code>factor</code> 的数目。如果是 <code>integer</code>，得到的是最小值、中位数、平均数、四分位数、最大值。</p>
<p>如果用特定的计算统计量的函数呢？</p>
<ul>
<li>最小值 <code>min(data$col_name)</code></li>
<li>最大值 <code>max(data$col_name)</code></li>
<li>标准差 <code>sd(data$col_name)</code></li>
<li>方差 <code>var(data$col_name)</code></li>
<li>均值 <code>mean(data$col_name)</code></li>
<li>四分位数 <code>quantile(data$col_name, c(0.25, 0.75))</code></li>
<li>中位数 <code>median(data$col_name)</code></li>
<li>中位数绝对偏差 <code>mad(data$col_name)</code></li>
</ul>
<p>还有偏度和峰度两个描述性统计指标，但是 R 基本包里头没有提供直接算的函数。要么自己写一个函数，要么使用第三方开发包中的函数计算。</p>
<p>参考<a href="http://jackycode.github.io/blog/2014/03/12/rseries5/" target="_blank" rel="external">这篇博文</a>，作者给出了公式和代码：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">desc.stats &lt;- <span class="keyword">function</span>(x, na.omit=<span class="literal">FALSE</span> &#123;</div><div class="line">  <span class="keyword">if</span> (na.omit)</div><div class="line">    x &lt;- x[!is.na(x)]</div><div class="line">  n &lt;- length(x)</div><div class="line">  mean &lt;- mean(x)</div><div class="line">  var &lt;- var(x)</div><div class="line">  sd &lt;- sd(x)</div><div class="line">  skew &lt;- sum((x-mean)^<span class="number">3</span>/sd^<span class="number">3</span>)/n <span class="comment">#计算偏度</span></div><div class="line">  kurt &lt;- sum((x-mean)^<span class="number">4</span>/sd^<span class="number">4</span>)/n - <span class="number">3</span> <span class="comment">#计算峰度</span></div><div class="line">  <span class="keyword">return</span>(list(Mean=mean, Variance=var, skewness=skew, kurtosis=kurt))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有有哪些包提供了描述性统计的函数呢？</p>
<ul>
<li><code>Hmisc</code> 包中的 <code>Hmisc::describe()</code> 函数，可以返回变量数目、缺失值数目、均值、分位数等；</li>
<li><code>fBasic</code> 包中有 <code>skewness()</code> 和 <code>kurtosis()</code> 函数分别计算偏度和峰度；该包还有一个 <code>fBasic::basicStats()</code> 可以得到大部分描述性统计量。</li>
<li><code>psych</code> 专门用于心理统计学的包，里头也有关于描述性统计的函数，<code>psych::describe()</code> <code>psych::describeData()</code> <code>psych::describeBy()</code></li>
</ul>
<p>如果按照组或者变量水平来进行描述性统计呢？</p>
<ul>
<li>可以使用基本包里头的向量化运算的 <code>apply()</code> 族，<code>by()</code> <code>aggregate()</code> 等。</li>
<li>Hackley 大神开发的 <code>plyr</code> 和加强版 <code>dplyr</code> 也是可以组的描述性统计的。</li>
<li>还有如 <code>psych::describeBy()</code> <code>doBy::summaryBy()</code></li>
</ul>
<p>参考: <a href="http://www.statmethods.net/stats/descriptives.html" target="_blank" rel="external">Quick-R: Descriptive Statistics</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取数据表的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str(data)&lt;/code&gt; 数据构成&lt;/li&gt;
&lt;li&gt;列数：&lt;code&gt;ncol(data)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;行数：&lt;code&gt;nrow(data)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;名称：&lt;c
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="统计学" scheme="//lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="数据分析" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-08</title>
    <link href="//lix90.github.io/2016/11/08/2016-11-08-daily/"/>
    <id>//lix90.github.io/2016/11/08/2016-11-08-daily/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-08T03:26:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>查看环境变量 <code>echo $VAR</code><br>设置新的环境变量 <code>export VAR=&quot;fool!&quot;</code><br>显示所有环境变量 <code>env</code><br>显示所有本地定义的 Shell 变量 <code>set</code><br>清除环境变量 <code>unset $VAR</code><br>设置环境变量为只读 <code>readonly VAR</code></p>
<blockquote>
<p>The <code>export</code> and <code>declare -x</code> commands allow parameters and functions to be added to and deleted from the environment. If the value of a parameter in the environment is modified, the new value becomes part of the environment, replacing the old. The environment inherited by any executed command consists of the shell’s initial environment, whose values may be modified in the shell, less any pairs removed by the <code>unset</code> and <code>export -n</code> commands, plus any additions via the <code>export</code> and <code>declare -x</code> commands.</p>
</blockquote>
<h1 id="R-如何一次性加载多个-package？"><a href="#R-如何一次性加载多个-package？" class="headerlink" title="R: 如何一次性加载多个 package？"></a>R: 如何一次性加载多个 package？</h1><p>参考：<a href="http://stackoverflow.com/questions/8175912/load-multiple-packages-at-once" target="_blank" rel="external">Stackoverflow: Load multiple packages at once</a></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x &lt;- c(<span class="string">"pkg1"</span>, <span class="string">"pkg2"</span>, <span class="string">"pkg3"</span>)</div></pre></td></tr></table></figure>
<h2 id="使用-lapply"><a href="#使用-lapply" class="headerlink" title="使用 lapply"></a>使用 <code>lapply</code></h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">require</span>, character.only = <span class="literal">TRUE</span>)</div></pre></td></tr></table></figure>
<p>或者简写方式：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">require</span>, c = <span class="literal">T</span>)</div></pre></td></tr></table></figure>
<p>或者配上 <code>do.call()</code>：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, FUN = <span class="keyword">function</span>(X) &#123; do.call(<span class="string">"require"</span>, list(X)) &#125;)</div></pre></td></tr></table></figure>
<p>如果 package 没有安装呢？</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">function</span>(x) &#123;<span class="keyword">if</span> (!<span class="keyword">require</span>(x, character.only=<span class="literal">T</span>)) &#123;install.packages(x);<span class="keyword">require</span>(x)&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="使用-package-pacman"><a href="#使用-package-pacman" class="headerlink" title="使用 package pacman"></a>使用 package <code>pacman</code></h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## install.packages("pacman")</span></div><div class="line">pacman::p_load(pkg1, pkg2, pkg3)</div></pre></td></tr></table></figure>
<p><a href="http://trinker.github.io/pacman_dev/" target="_blank" rel="external">pacman</a> 是一个包管理工具，除了可以同时加载多个包之外，还有以下一些方便的函数：</p>
<ul>
<li><code>p_install</code> 等同于 <code>install.packages</code> 从 CRAN 安装包</li>
<li><code>p_load_gh</code> 加载和安装 Github 上的包</li>
<li><code>p_install_gh</code> 从 Github 来源安装包</li>
<li><code>p_temp</code> 安装临时包</li>
<li><code>p_unload</code> 等于 <code>detach</code> 卸载包</li>
<li><code>p_update/p_up</code> 等于 <code>update.packages</code> 更新包</li>
<li><code>p_delete/p_del</code> 从库中永久删除包</li>
</ul>
<p>此外，该包还可以方便地获取包信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bash&quot;&gt;&lt;a href=&quot;#Bash&quot; class=&quot;headerlink&quot; title=&quot;Bash&quot;&gt;&lt;/a&gt;Bash&lt;/h1&gt;&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="Bash" scheme="//lix90.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-07</title>
    <link href="//lix90.github.io/2016/11/07/2016-11-07-daily/"/>
    <id>//lix90.github.io/2016/11/07/2016-11-07-daily/</id>
    <published>2016-11-06T16:00:00.000Z</published>
    <updated>2016-11-07T09:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天忙一些事情，没有积累多少东西，比较零碎。</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p><code>:focus</code> 伪类</p>
<p>当元素获得“关注”，例如被用户通过键盘选中或者用鼠标激活（表单输入），该伪类就被触发。</p>
<p><code>:link</code> 未访问的链接<br><code>:visited</code> 已访问的链接<br><code>:hover</code> 鼠标移动到链接上方<br><code>:active</code> 链接激活</p>
<p><code>:active</code> 允许页面给予反馈，告诉用户浏览器检测到了点击或者 <code>tab</code> 键。该伪类的样式会被任何其他的链接有关的伪类覆盖，例如 <code>:hover</code> <code>:link</code> <code>visited</code>。如果要合适的链接样式，需要按照 <code>:link</code> - <code>:visited</code> - <code>:hover</code> - <code>:active</code> 顺序。</p>
<p><code>Outline</code> 与 <code>Border</code> 的差别：</p>
<ul>
<li><code>outline</code> 不影响布局，不影响盒大小，它是纯表现上的，对页面空间没有影响；<code>border</code> 会增加盒的尺寸，影响布局。</li>
<li><code>outline</code> 不一定是规则的矩形框；<code>border</code> 是规则的矩形框或者圆形，且可以根据四个边和角设置样式。</li>
</ul>
<h1 id="Emacs-中使用-Rmarkdown"><a href="#Emacs-中使用-Rmarkdown" class="headerlink" title="Emacs 中使用 Rmarkdown"></a>Emacs 中使用 Rmarkdown</h1><p>需要用到 ESS 和 polymode。先默认已经在 Emacs 中安装好了 ESS。然后进行如下配置（使用 <code>use-package</code>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(use-package polymode</div><div class="line">  :ensure t</div><div class="line">  :mode ((&quot;\\.[SR]nw\\&apos;&quot; . poly-noweb+r-mode)</div><div class="line">         (&quot;\\.Rmd\\&apos;&quot; . Rmd-mode))</div><div class="line">  :init</div><div class="line">  (progn</div><div class="line">    (defun Rmd-mode ()</div><div class="line">      &quot;ESS Markdown mode for Rmd files.&quot;</div><div class="line">      (interactive)</div><div class="line">      (require &apos;poly-R)</div><div class="line">      (require &apos;poly-markdown)</div><div class="line">      (R-mode)</div><div class="line">      (poly-markdown+r-mode))))</div><div class="line"></div><div class="line">(defun ess-rmarkdown-to-html ()</div><div class="line">  (interactive)</div><div class="line">  &quot;Run kintr::knit2html on the current file.&quot;</div><div class="line">  &quot;https://gist.github.com/kohske/9128031&quot;</div><div class="line">  (shell-command</div><div class="line">   (format &quot;Rscript -e \&quot;kintr::knit2html (&apos;%s&apos;)\&quot;&quot;</div><div class="line">           (shell-quote-argument (buffer-file-name)))))</div></pre></td></tr></table></figure>
<p>参考：<a href="http://futurismo.biz/archives/2982" target="_blank" rel="external">http://futurismo.biz/archives/2982</a></p>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="在-Terminal-中使用-socks5-代理"><a href="#在-Terminal-中使用-socks5-代理" class="headerlink" title="在 Terminal 中使用 socks5 代理"></a>在 Terminal 中使用 socks5 代理</h2><p>前提当然是需要有 socks5 代理了。个人使用 <code>shodowsocks</code>。</p>
<p>在终端使用代理，可以通过 proxychains，MacOS 下叫 proxychains-ng。</p>
<p>修改配置：<code>/usr/local/Cellar/proxychains-ng/&lt;version&gt;/etc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ProxyList]</div><div class="line">socks5 127.0.0.1 1080</div></pre></td></tr></table></figure>
<p>然后绑定个别名啦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias fq=&quot;/usr/local/Cellar/proxychains-ng/4.11/bin/proxychains4&quot;</div></pre></td></tr></table></figure>
<h2 id="PNG-图片压缩"><a href="#PNG-图片压缩" class="headerlink" title="PNG 图片压缩"></a>PNG 图片压缩</h2><p>一些常用压缩工具的对比：<a href="http://jamiemason.github.io/ImageOptim-CLI/" target="_blank" rel="external">http://jamiemason.github.io/ImageOptim-CLI/</a></p>
<ul>
<li><a href="https://github.com/ImageOptim/ImageOptim" target="_blank" rel="external">ImageOptim</a></li>
<li><a href="https://github.com/JohnWong/imageoptim" target="_blank" rel="external">ImageOptim with pngquant</a></li>
<li><a href="https://tinypng.com/" target="_blank" rel="external">TinyPNG</a></li>
<li><a href="http://www.smushit.com/ysmush.it/" target="_blank" rel="external">Smush.it</a></li>
</ul>
<p>参考：<a href="http://johnwong.github.io/showcase/2015/02/19/png-compress.html" target="_blank" rel="external">PNG图片极限压缩</a></p>
<h2 id="命令行直接调用-Chrome-进行谷歌检索"><a href="#命令行直接调用-Chrome-进行谷歌检索" class="headerlink" title="命令行直接调用 Chrome 进行谷歌检索"></a>命令行直接调用 Chrome 进行谷歌检索</h2><p>在 bash_profile 里头添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function gg() &#123; open /Applications/Google\ Chrome.app/ &quot;http://www.google.com/search?q= $1&quot;; &#125;</div></pre></td></tr></table></figure>
<p>在 zshrc 里头添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gg() &#123; open -a &quot;Google Chrome&quot; &quot;http://www.google.com/search?q=$1&quot;; &#125;</div></pre></td></tr></table></figure>
<h2 id="Windows-下包管理器神器：Chocolatey"><a href="#Windows-下包管理器神器：Chocolatey" class="headerlink" title="Windows 下包管理器神器：Chocolatey"></a>Windows 下包管理器神器：<a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a></h2><p>参考：<a href="http://ju.outofmemory.cn/entry/141470" target="_blank" rel="external">Chocolatey, 我爱你</a></p>
<h2 id="MacOS-访问-Windows-中的共享文件夹"><a href="#MacOS-访问-Windows-中的共享文件夹" class="headerlink" title="MacOS 访问 Windows 中的共享文件夹"></a>MacOS 访问 Windows 中的共享文件夹</h2><ol>
<li>进入 Finder</li>
<li>前往 &gt;&gt;&gt; 连接服务器（Command + K）</li>
<li>服务器地址输入：<code>smb://Computer-Name</code> 或者 <code>smb://IP-Address</code></li>
</ol>
<blockquote>
<p>SMB：服务器信息块协议（Server Message Block protocol）</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天忙一些事情，没有积累多少东西，比较零碎。&lt;/p&gt;
&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;p&gt;&lt;code&gt;:focus&lt;/code&gt; 伪类&lt;/p&gt;
&lt;p&gt;当元素获
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="CSS" scheme="//lix90.github.io/tags/CSS/"/>
    
      <category term="Emacs" scheme="//lix90.github.io/tags/Emacs/"/>
    
      <category term="ESS" scheme="//lix90.github.io/tags/ESS/"/>
    
      <category term="Rmarkdown" scheme="//lix90.github.io/tags/Rmarkdown/"/>
    
      <category term="Terminal" scheme="//lix90.github.io/tags/Terminal/"/>
    
      <category term="MacOS" scheme="//lix90.github.io/tags/MacOS/"/>
    
      <category term="Tools" scheme="//lix90.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-01</title>
    <link href="//lix90.github.io/2016/11/02/2016-11-01-daily/"/>
    <id>//lix90.github.io/2016/11/02/2016-11-01-daily/</id>
    <published>2016-11-01T16:23:13.000Z</published>
    <updated>2016-11-01T16:26:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h2><p>JS 的对象是一种<strong>无序的集合数据类型</strong>，由若干个键值组成。实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
<p>对象属性的访问：</p>
<ul>
<li><code>object.property</code> 通过 <code>.</code> 号</li>
<li><code>object[&#39;property&#39;]</code></li>
</ul>
<p>检测是否拥有某一属性：</p>
<ul>
<li><code>in</code>： 但是继承所得到的属性 <code>in</code> 也会返回真的结果</li>
<li><code>hasOwnProperty</code> 判断自身具有的属性</li>
</ul>
<h2 id="Map-与-Set"><a href="#Map-与-Set" class="headerlink" title="Map 与 Set"></a>Map 与 Set</h2><p><code>Map</code> 和 <code>Set</code> 为 ES6 规范引入的新数据类型。</p>
<p><code>Map</code> 是一组<strong>键值对</strong>的结构，具有极快的查找速度。一个 <code>key</code> 只能对应一个 <code>value</code>。初始化 <code>Map</code> 需要一个二维数组。初始化空 <code>Map</code>：<code>var m = new Map()</code>。<code>Map</code> 类型有以下方法：</p>
<ul>
<li><code>set(key, value)</code> 添加新的键值对</li>
<li><code>has(key)</code> 是否存在键</li>
<li><code>get(key)</code> 获取键所对应的值</li>
<li><code>delete(key)</code> 删除键</li>
</ul>
<p><code>Set</code> 和 <code>Map</code> 类似，也是一组 Key 的集合，但是并不存储 Value。而且，Key 不能重复。创建新的 <code>Set</code> 需要提供一个 <code>Array</code> 作为输入。初始化新 <code>Set</code>：<code>var s = new Set()</code>。<code>Set</code> 包含以下常见方法：</p>
<ul>
<li><code>add</code> 增加键</li>
<li><code>delete</code> 删除键</li>
<li><code>has</code> 是否存在键</li>
<li><code>clear</code> 清除所有键</li>
</ul>
<h2 id="iterable-类型"><a href="#iterable-类型" class="headerlink" title="iterable 类型"></a>iterable 类型</h2><p>遍历 <code>Array</code> 可以采用下标循环，遍历 <code>Map</code> 和 <code>Set</code> 就无法使用下标。为了统一集合类型，ES6 标准引入了新的 <code>iterable</code> 类型，<code>Array</code>、<code>Map</code> 和 <code>Set</code> 都属于 <code>iterable</code> 类型。</p>
<p>具有 <code>iterable</code> 类型的集合可以通过新的 <code>for ... of</code> 循环来遍历。</p>
<p><code>for ... in</code> 和 <code>for ... of</code> 有什么差别？</p>
<ul>
<li><code>for ... in</code> 遍历对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</li>
<li><code>for ... of</code> 只遍历集合本身的元素。</li>
</ul>
<p>遍历集合更好的方式是直接使用 <code>iterable</code> 内置的 <code>forEach</code> 方法，它接收一个函数，每次迭代就自动回调该函数。<code>arr.forEach(function(element, index, array) {});</code></p>
<p><code>Set</code> 与 <code>Array</code> 类似，但 <code>Set</code> 没有索引，因此回调函数的前两个参数都是元素本身。</p>
<p><code>Map</code> 的回调函数参数依次为 <code>value</code>、<code>key</code> 和 <code>map</code> 本身。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在 JavaScript 里，函数是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>
<p>抽象：借助抽象，可以不用关心底层的具体计算过程，而直接在更高的层次上思考问题。写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>
<p>函数体内部的语句在执行时，一旦执行到 <code>return</code> 时，函数就执行完毕，并将结果返回。如果没有 <code>return</code> 语句，函数执行完毕后也会返回结果，只是结果为 <code>undefined</code>。</p>
<p>两种等价的函数定义方式：</p>
<ul>
<li><code>function funName() {}</code></li>
<li><code>var funName = function() {};</code></li>
</ul>
<p>注意第二种需要用 <code>;</code> 结尾，表示赋值结束。</p>
<p>JavaScript 允许传入任意个参数。</p>
<p><code>arguments</code> 在函数内部起作用，永远指向当前函数的调用者传入的所有参数。</p>
<p>ES6 标准引入了 <code>rest</code> 参数。<code>rest</code> 参数只能写在最后，前面用 <code>...</code> 标识。<code>function foo(a, b, ...rest) {}</code>。用来表示参数中多余的参数，当没有多余的参数时，<code>rest</code> 就为空。</p>
<p>变量作用域</p>
<ul>
<li>一个变量在函数内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量；</li>
<li>不同函数内部的同名变量相互独立，互不影响；</li>
<li>在函数嵌套时，内部函数可以访问外部函数定义的变量，反过来则不行；</li>
<li>函数在查找变量时，从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</li>
</ul>
<p>变量提升</p>
<p>JS 函数会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。由于 JavaScript 的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。</p>
<p>全局作用域</p>
<p><strong>不在任何函数内定义的变量就具有全局作用域</strong>。实际上，JavaScript 默认有一个全局对象 <code>window</code>，全局作用域的变量实际上被绑定到 <code>window</code> 的一个属性。JavaScript 实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报 <code>ReferenceError</code> 错误。</p>
<p>命名空间</p>
<p>全局变量会绑定到 window 上，不同的 JavaScript 文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。<strong>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中</strong>。</p>
<p>局部作用域</p>
<p>在 for 循环等语句块中无法定义具有局部作用域的变量。<br>为了解决块级作用域，ES6 引入了新的关键字 <code>let</code>，用 <code>let</code> 替代 <code>var</code> 可以申明一个块级作用域的变量。</p>
<p>常量</p>
<p>由于 <code>var</code> 和 <code>let</code> 申明的是变量，如果要申明一个常量，在 ES6 之前是不行的，我们通常用<strong>全部大写的变量</strong>来表示常量。<br>ES6 标准引入了新的关键字 <code>const</code> 来定义常量，<code>const</code> 与 <code>let</code> 都具有块级作用域。</p>
<p>方法</p>
<p>在一个对象中绑定的函数就是这个对象的方法。<br>在一个方法内部，<code>this</code> 是一个特殊变量，它始终指向当前对象。</p>
<p>JavaScript 的函数内部如果调用了 <code>this</code>，那么这个 <code>this</code> 到底指向谁？视情况而定。</p>
<ul>
<li>如果以对象的方法形式调用，该函数的 <code>this</code> 指向被调用的对象；</li>
<li>如果单独调用函数，此时，该函数的 <code>this</code> 指向全局对象，也就是 <code>window</code>。</li>
</ul>
<p>要保证 <code>this</code> 指向正确，必须用 <code>obj.xxx()</code> 的形式调用！<br>ECMA 决定，在 <code>strict</code> 模式下让函数的 <code>this</code> 指向 <code>undefined</code>。<br>用 <code>var that = this;</code>，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。</p>
<p><code>apply</code> 方法：它接收两个参数，第一个参数就是需要绑定的 <code>this</code> 变量，第二个参数是 <code>Array</code>，表示函数本身的参数。<br><code>apply</code>和<code>call</code>方法：</p>
<ul>
<li><code>apply()</code> 把参数打包成 <code>Array</code> 再传入；</li>
<li><code>call()</code> 把参数按顺序传入；</li>
</ul>
<p>对普通函数调用，通常把 <code>this</code> 绑定为 <code>null</code>。</p>
<p>装饰器：利用 <code>apply</code> 可以动态改变函数的行为。</p>
<p>高阶函数</p>
<p>一个函数接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
<ul>
<li><code>map</code></li>
<li><code>reduce</code></li>
<li><code>filter</code></li>
<li><code>sort</code>：<code>sort</code> 方法会直接对 <code>Array</code> 进行修改，它返回的结果仍是当前 <code>Array</code>。</li>
</ul>
<p>闭包</p>
<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。<br>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br>闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p>
<p>箭头函数</p>
<p>箭头函数内部的 <code>this</code> 是词法作用域，由上下文确定。<br>箭头函数完全修复了 <code>this</code> 的指向，<code>this</code> 总是指向词法作用域，也就是外层调用者 <code>obj</code>。</p>
<p>generator 生成器</p>
<p>ES6 标准引入的新的数据类型。一个 <code>generator</code> 看上去像一个函数，但可以返回多次。</p>
<p>小结：</p>
<p>看了廖雪峰的 JS 入门教程，发现 JS 有许多奇怪的特性，抽象的用法，难以理解。对于我个人来说有以下几个难点：</p>
<ul>
<li>作用域</li>
<li><code>this</code></li>
<li>闭包</li>
<li><code>generator</code></li>
</ul>
<p>有待后续掌握。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>生成器</p>
<p>在 Python 中，这种一边循环一边计算的机制，称为生成器：<code>generator</code>。</p>
<ul>
<li><code>generator</code> 保存的是算法</li>
<li><code>generator</code> 可迭代</li>
<li>在调用时，局部变量和执行状态自动地保存</li>
<li>创建生成器时，使用 <code>yield</code> 语句返回数据</li>
<li>使用 <code>next</code> 调用生成器</li>
<li>生成器使用圆括号构建</li>
</ul>
<p>类 Classes</p>
<p>至少三级嵌套作用域：</p>
<ul>
<li>最内层的作用域，首先被检索，包含了局部命名</li>
<li>封装的函数的作用域（enclosing functions），包含非局部，但又非全局命名</li>
<li>包含当前模块的全局命名</li>
<li>最外层的作用域，也最后被检索，包含了内建命名（built-in names）</li>
</ul>
<blockquote>
<p>if no <code>global</code> statement is in effect – assignments to names always go into the innermost scope. Assignments do not copy data — they just bind names to objects. The same is true for deletions: the statement <code>del x</code> removes the binding of x from the namespace referenced by the local scope.</p>
</blockquote>
<p>将数据分派给变量时，并未复制数据，而仅仅是将变量名与对象绑定起来。</p>
<p>类对象支持两种运算：属性引用（attribute references）和实例化（instantiation）。</p>
<ul>
<li>属性引用：<code>obj.name</code>。</li>
<li>实例化使用函数符号，<code>varName = myClass()</code> 可以创建一个关于该类的新的实例，并指派给局部变量 <code>varName</code>。</li>
</ul>
<p><code>__init__()</code> 方法可以指定类的初始状态，在新的类的实例中自动的初始化。</p>
<p>实例对象具有唯一的运算，属性引用，数据属性和方法。</p>
<blockquote>
<p>If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.</p>
</blockquote>
<p>—&gt; 未完</p>
<h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><p>关于引号：单引号内变量名会被当作字符串，双引号则会被当作变量处理。</p>
<p>算术运算：<code>expr</code> <code>$(())</code> <code>$[]</code> <code>+</code> <code>-</code> <code>/</code> <code>%</code> <code>**</code></p>
<p>条件控制:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if 命令为真</div><div class="line">then</div><div class="line">    命令</div><div class="line">fi</div><div class="line"># 或者</div><div class="line">if 命令为真; then</div><div class="line">    命令</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>测试比较符：</p>
<ul>
<li><code>-gt</code> 大于</li>
<li><code>-eq</code> <code>=</code> 等于</li>
<li><code>-ne</code> <code>!=</code> 不等于</li>
<li><code>-lt</code> 小于</li>
<li><code>-ge</code> 大于或等于</li>
<li><code>-le</code> 小于或等于</li>
<li><code>-n</code> 非零长度</li>
<li><code>-z</code> 零长度</li>
<li><code>-d</code> 存在路径</li>
<li><code>-f</code> 存在文件</li>
</ul>
<p>循环语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for ((i=1; i&lt;=10; i++))</div><div class="line">do</div><div class="line">    echo &quot;$i&quot;</div><div class="line">done</div><div class="line"></div><div class="line"># 或者</div><div class="line"></div><div class="line">for var in &#123;1..10&#125;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h1 id="Hackerrank-笔记"><a href="#Hackerrank-笔记" class="headerlink" title="Hackerrank 笔记"></a>Hackerrank 笔记</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for i in &#123;1..100..2&#125;</div><div class="line">do</div><div class="line">    echo $i</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq 1 2 99</div></pre></td></tr></table></figure>
<h2 id="来自于纪录片《Helvetica》"><a href="#来自于纪录片《Helvetica》" class="headerlink" title="来自于纪录片《Helvetica》"></a>来自于纪录片《Helvetica》</h2><blockquote>
<ul>
<li>别把易读性和信息传达混为一谈。某样东西清晰易读，并不说明它能传达信息。更重要的是，并不意味着它传达了正确的信息。反过来说，某个东西或许开始的时候很难辨识，但它传达了一种全然不同的信息。同时又切合主题。那么，或许它就是需要读者多花点时间和心思的。这种方式表达的效果往往要更为强烈。如果有条非常重要的信息用一种平凡无聊的方式排出来。这条消息很可能就被忽略了。</li>
<li>“简洁有力” 和 “空洞乏味” 之间的界限其实很模糊。</li>
<li>用设计的语言来说，我觉得最重要的是，于细微处获得情感上的回馈。我觉得这是最棒的设计。</li>
<li>你越是接近它，对它看得越多，就越能够欣赏它的优秀。</li>
</ul>
</blockquote>
<h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><p>recursive invocation 递归调用<br>unqualified reference 没有资格的引用 or 无授权的引用？<br>wrapper 封装</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;JS-对象&quot;&gt;&lt;a href=&quot;#JS-对象&quot; class=&quot;he
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Python" scheme="//lix90.github.io/tags/Python/"/>
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="Bash" scheme="//lix90.github.io/tags/Bash/"/>
    
      <category term="Helvetica" scheme="//lix90.github.io/tags/Helvetica/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-31</title>
    <link href="//lix90.github.io/2016/10/31/2016-10-31-daily/"/>
    <id>//lix90.github.io/2016/10/31/2016-10-31-daily/</id>
    <published>2016-10-31T15:36:55.000Z</published>
    <updated>2016-10-31T15:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p><code>with expression as target:</code></p>
<h2 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h2><p><code>open(name[, mode[, buffering]])</code></p>
<p>打开文件，并返回 <code>file</code> 类型的对象。如果无法打开，将抛出 <code>IOError</code> 错误。</p>
<ul>
<li><code>name</code> 参数为文件名；</li>
<li><code>mode</code> 为字符串，指定文件如何打开<ul>
<li><code>r</code> 读取（默认）</li>
<li><code>w</code> 写入，如果文件存在，则删掉文件</li>
<li><code>a</code> 添加到文件末尾</li>
<li><code>b</code> 二进制</li>
<li><code>r+</code> <code>w+</code> <code>a+</code> 更新打开的文件</li>
</ul>
</li>
<li><code>buffering</code> 缓存大小<ul>
<li>0，不进行缓存</li>
<li>1，按行缓存</li>
<li>其他正值表示按相应的大小（bytes）进行缓存</li>
<li>负值意味着使用系统默认的缓存方式</li>
</ul>
</li>
</ul>
<p>具有相似功能的模块：</p>
<ul>
<li><code>fileinput</code> 提供辅助类和函数来快速对标准输入或文件列表进行迭代。</li>
<li><code>os</code> 提供一些与操作系统有关功能：进程参数、创建文件对象、文件描述符操作、文件和路径操作、进程管理等</li>
<li><code>os.path</code> 对路径名进行操作</li>
<li><code>tempfile</code> 创建临时文件和路径</li>
<li><code>shutil</code> high-level 文件和路径的操作</li>
</ul>
<h2 id="csv-模块"><a href="#csv-模块" class="headerlink" title="csv 模块"></a>csv 模块</h2><p>csv 文件的读写（2.3版不支持 Unicode 的输入）。</p>
<ul>
<li><code>csv.reader(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code> 返回 reader 对象，按行迭代</li>
<li><code>csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code> 返回 writer 对象</li>
<li><code>csv.DictReader(csvfile, fieldnames=None, restkey=None, restval=None, dialect=&#39;excel&#39;, *args, **kwds)</code> 返回与 reader 类似的对象，但是将信息读取为词典形式</li>
<li><code>csv.DictWriter(csvfile, fieldnames, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, *args, **kwds)</code> 返回与 writer 类似的对象，但是将词典数据写入到行</li>
</ul>
<h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><p>提供基本的用于操作日期和时间的类和函数。</p>
<p>在此有两类日期和时间对象：</p>
<ul>
<li>aware object: 包含丰富的信息，如时区，夏时令，可以用于和其他 aware 对象进行定位。</li>
<li><p>naive object: naive object 缺少 aware object 所包含的那些信息，仅仅包含时间。</p>
</li>
<li><p><code>date</code> 对象</p>
</li>
<li><code>datetime</code> 对象</li>
<li><code>time</code> 对象</li>
<li><code>tzinfo</code> 对象</li>
</ul>
<p>其他与时间和日期有关的模块</p>
<ul>
<li><code>time</code> 模块：提供了许多时间相关的函数，可以访问和转换时间对象。<ul>
<li><code>time.strftime</code> 将元组或 <code>struct_time</code> 按照时间格式转换为字符串。</li>
</ul>
</li>
<li><code>calendar</code> 模块</li>
<li><code>locale</code> 模块</li>
</ul>
<h1 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h1><h2 id="谷歌翻译插件-google-translate"><a href="#谷歌翻译插件-google-translate" class="headerlink" title="谷歌翻译插件 google-translate"></a>谷歌翻译插件 <a href="https://github.com/atykhonov/google-translate" target="_blank" rel="external">google-translate</a></h2><p>感谢强大的 emacers，在 emacs 里头实现了<a href="https://github.com/xuchunyang/youdao-dictionary.el" target="_blank" rel="external">有道词典</a>、<a href="https://github.com/cute-jumper/bing-dict.el" target="_blank" rel="external">Bing词典</a>等功能，也想直接在 emacs 里使用谷歌翻译。以下是配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(use-package google-translate</div><div class="line">  :ensure t</div><div class="line">  :defer t</div><div class="line">  :bind ((&quot;C-c C-d g&quot; . google-translate-at-point)</div><div class="line">         (&quot;C-c C-d G&quot; . google-translate-smooth-translate)</div><div class="line">         (&quot;C-c C-d r&quot; . google-translate-at-point-reverse)</div><div class="line">         (&quot;C-c C-d R&quot; . google-translate-query-translate-reverse))</div><div class="line">  :config</div><div class="line">  (progn</div><div class="line">  (require &apos;google-translate-smooth-ui)</div><div class="line">  (setq google-translate-default-source-language &quot;en&quot;</div><div class="line">        google-translate-default-target-language &quot;zh&quot;</div><div class="line">        max-mini-window-height 0.5)</div><div class="line">  (setq google-translate-translation-directions-alist</div><div class="line">        &apos;((&quot;en&quot; . &quot;zh&quot;) (&quot;zh&quot; . &quot;zh&quot;))))</div><div class="line">  )</div></pre></td></tr></table></figure>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p><a href="https://github.com/hallvors/postcss-flexboxfixer" target="_blank" rel="external">flexboxfixer</a>: flexbox 兼容处理</p>
<p><a href="http://www.browsersync.cn/" target="_blank" rel="external">Browsersync</a></p>
<blockquote>
<p>Browsersync 能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync 可以同时在 PC、平板、手机等设备下进项调试。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;h2 id=&quot;with-语句&quot;&gt;&lt;a href=&quot;#with-语句&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Python" scheme="//lix90.github.io/tags/Python/"/>
    
      <category term="Emacs" scheme="//lix90.github.io/tags/Emacs/"/>
    
      <category term="Flexbox" scheme="//lix90.github.io/tags/Flexbox/"/>
    
      <category term="Browsersync" scheme="//lix90.github.io/tags/Browsersync/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-30</title>
    <link href="//lix90.github.io/2016/10/30/2016-10-30-daily/"/>
    <id>//lix90.github.io/2016/10/30/2016-10-30-daily/</id>
    <published>2016-10-30T05:57:32.000Z</published>
    <updated>2016-10-30T12:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搞不懂的-callback"><a href="#搞不懂的-callback" class="headerlink" title="搞不懂的 callback"></a>搞不懂的 callback</h1><p>JS 单线程 :—&gt; 性能 :—&gt; 异步思维（不仅限于针对用户输入时）</p>
<p>JS 三个异步支持阶段：callback —&gt; promise —&gt; generator</p>
<blockquote>
<p>Generators by themselves do not provide any sort of asynchronous support: they rely on either promises or a special type of callback to provide asynchronous behavior. 事实上，generator 本身并未提供异步支持，它依赖于 promise 或特殊类型的 callback 来提供异步行为。</p>
</blockquote>
<p>使用异步技术的三种情况：</p>
<ul>
<li>网络请求 Network requests</li>
<li>文件系统的操作（读写等） Filesystem operations</li>
<li>有目的的延迟功能 Intentionally time-delayed functionality</li>
</ul>
<blockquote>
<p>A <strong>callback</strong> is simply a function that you write that will be <strong>invoked at some point in the future</strong>. There’s nothing special about the function itself: it’s just a regular JavaScript function. Typically, you provide these callback functions to other functions, or set them as properties on objects (or, rarely, provide them in an array). Callbacks are very often (but not always) anonymous functions.</p>
</blockquote>
<p>Callback, 回调，就是一般的函数，并无特殊性。只不过因为某个未来的事件或时间点被诱发。回调往往是匿名函数。</p>
<p><code>回调函数</code> <code>登记回调函数</code> <code>触发回调关联事件</code> <code>调用回调函数</code> <code>响应回调事件</code> <code>回调地狱</code></p>
<blockquote>
<p>在js里函数都是对象，这表示它们可以作为参数传递给其他的函数。举例：当函数b()作为参数传递给函数a()，那么在某一时刻函数a()可能会执行或者调用函数b()。这种情况下，函数b()就被称为回调函数，也可以简称叫做回调。</p>
<p>you have to be mindful of the scope your callbacks are declared in: they will have access to everything in that scope (closure). And because of that, the value may be different when the callback actually executes. This principle applies to all asynchronous techniques, not just callbacks. 需要特别注意回调函数的作用域。</p>
<p>在传入一个回调函数之前，中间函数是不完整的。换句话说，程序可以在运行时，通过登记不同的回调函数，来决定、改变中间函数的行为。这就比简单的函数调用要灵活太多了。</p>
<p>回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。</p>
</blockquote>
<p>关于回调等 JS 学到一定地步再来总结吧。</p>
<ul>
<li><a href="http://callbackhell.com/" target="_blank" rel="external">Callback Hell</a></li>
<li><a href="http://www.75team.com/post/%E8%AF%91%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.html" target="_blank" rel="external">360奇舞团：回调地狱（译）</a></li>
<li><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="external">知乎：回调函数（callback）是什么？</a></li>
<li><a href="http://www.alloyteam.com/2015/04/solve-callback-hell-with-generator/" target="_blank" rel="external">腾讯全端 AlloyTeam 团队：使用Generator解决回调地狱</a></li>
<li><a href="http://web.jobbole.com/85909/" target="_blank" rel="external">伯乐在线：后端程序员的 Js 之旅 : 回调地狱终结者</a></li>
<li><a href="https://codefalling.com/2016/08/14/get-out-of-callback-hell-with-generator/" target="_blank" rel="external">Codefalling：利用 generator 解决回调地狱</a></li>
</ul>
<hr>
<h1 id="SCSS-amp-SASS"><a href="#SCSS-amp-SASS" class="headerlink" title="SCSS &amp; SASS"></a><a href="http://sass.bootcss.com/" target="_blank" rel="external">SCSS &amp; SASS</a></h1><p>SCSS 源自 SASS。</p>
<ul>
<li>SASS 具有严格的缩进，而没有花括号和分号，变量的标志用 <code>!</code>，分配符为 <code>=</code>。缩进语法更短并且更易于书写。使用 SASS 甚至不需要 <code>@mixin</code> 或者 <code>@include</code>, 一个字符就足够了：<code>=</code> 和 <code>+</code>。但是严格缩进有时会带来麻烦，一处错，处处错。</li>
<li>SCSS 与原生 CSS 很相似，使用花括号和分号，变量标志用 <code>$</code>，分配符用 <code>:</code>。SCSS 相当于是只是加了一些功能的 CSS。虽然 SCSS 没有 SASS 简洁，但是保证了良好的易读性，易于理解。</li>
</ul>
<hr>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="语义化版本控制规范（SemVer）"><a href="#语义化版本控制规范（SemVer）" class="headerlink" title="语义化版本控制规范（SemVer）"></a><a href="http://semver.org/lang/zh-CN/#spec-item-1" target="_blank" rel="external">语义化版本控制规范（SemVer）</a></h2><p>为了避免软件开发陷入“依赖地狱”的困境，可以使用语义化版本的命令方式。在这套命名方式的约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>
<blockquote>
<p>版本格式为：主板本号.次版本号.修订号，版本号递增规则如下：</p>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ol>
<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>
</blockquote>
<h2 id="Notes-out-of-youtube"><a href="#Notes-out-of-youtube" class="headerlink" title="Notes out of youtube"></a>Notes out of youtube</h2><p><a href="https://www.youtube.com/watch?v=lfiopzfE5-0" target="_blank" rel="external">The Three Most Important Skills Of A Web Designer</a></p>
<p><code>empathy</code> <code>awareness</code> <code>grit</code></p>
<p><a href="https://www.youtube.com/watch?v=t14MwuWH_ts" target="_blank" rel="external">How to desing a killer home page</a></p>
<ul>
<li>engagement media</li>
<li>content silos {what?}</li>
<li>scrollable</li>
<li>connects to your main offer</li>
<li>define your role</li>
<li>footer: information in general</li>
<li>no flash</li>
</ul>
<h2 id="D3-js"><a href="#D3-js" class="headerlink" title="D3.js"></a>D3.js</h2><p>数据标准：</p>
<ul>
<li>表格数据（Tabular data）：D3 提供了三种抓取数据的方法 <code>d3.dsv</code> <code>d3.tsv</code> <code>d3.csv</code></li>
<li>嵌套数据（Nested data）</li>
<li>网络数据（Network data）</li>
<li>地理数据（Geographic data）：常见如 <code>GeoJSON</code> <code>TopoJSON</code></li>
<li>原始数据（Raw data）：文本、图片、视频</li>
<li>JS 对象（JavaScripit Object Notation，JSON），<code>d3.json</code></li>
</ul>
<h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><p><code>Geometric primitives</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搞不懂的-callback&quot;&gt;&lt;a href=&quot;#搞不懂的-callback&quot; class=&quot;headerlink&quot; title=&quot;搞不懂的 callback&quot;&gt;&lt;/a&gt;搞不懂的 callback&lt;/h1&gt;&lt;p&gt;JS 单线程 :—&amp;gt; 性能 :—&amp;gt; 异步
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="Callback" scheme="//lix90.github.io/tags/Callback/"/>
    
      <category term="SCSS" scheme="//lix90.github.io/tags/SCSS/"/>
    
      <category term="SASS" scheme="//lix90.github.io/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-29</title>
    <link href="//lix90.github.io/2016/10/29/2016-10-29-daily/"/>
    <id>//lix90.github.io/2016/10/29/2016-10-29-daily/</id>
    <published>2016-10-29T06:03:30.000Z</published>
    <updated>2016-10-30T06:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天修改了下博客模板，顺便了解了下相关的工具和模块。</p>
<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><p>辅助函数</p>
<p><code>url_for()</code> 在路径前加根目录 <code>&lt;% url_for(path) %&gt;</code><br><code>relative_url(from, to)</code> 获得一个从 <code>from</code> 到 <code>to</code> 的路径<br><code>css(path, ...)</code> 载入 css 文件<br><code>js(path, ...)</code> 载入 js 文件<br><code>link_to(path, [text], [options])</code> 插入链接<br><code>mail_to(path, [text], [options])</code> 插入电子邮件<br><code>image_tag(path, [options])</code> 插入图片<br><code>favicon_tag(path)</code> 插入 favicon<br><code>feed_tag(path, [options])</code> 插入 feed 链接<br><code>is_*()</code> 系列条件函数，<code>current</code> <code>home</code> <code>post</code> <code>archive</code> <code>year</code> <code>month</code> <code>category</code> <code>tag</code></p>
<p><code>partial(layout, [locals], [options])</code> 载入其他模板文件，您可在 locals 设定区域变量。<br><code>paginator(options)</code> 插入分页链接<br><code>toc(str, [options])</code></p>
<p><code>__(&#39;next&#39;)</code> 多语言支持时，<code>__()</code> 用于转换语言。</p>
<blockquote>
<p>在模板中，透过 __ 或 _p 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。</p>
</blockquote>
<h1 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a><a href="http://www.gruntjs.net/" target="_blank" rel="external">Grunt</a></h1><h2 id="构建自动化"><a href="#构建自动化" class="headerlink" title="构建自动化"></a>构建自动化</h2><p>谈 Grunt，就要谈到“构建自动化”。</p>
<blockquote>
<p><strong>Build automation</strong> is the process of automating the creation of a software build and the associated processes including: compiling computer source code into binary code, packaging binary code, and running automated tests.</p>
</blockquote>
<p>构建自动化有以下一些好处：</p>
<blockquote>
<ul>
<li>A necessary pre-condition for continuous integration and continuous testing 在连续集成和测试中的必要的前置条件</li>
<li>Improve product quality 改善产品质量</li>
<li>Accelerate the compile and link processing 加速编译和链接处理</li>
<li>Eliminate redundant tasks 去除冗余的任务</li>
<li>Minimize “bad builds” 减少低质量的构建</li>
<li>Eliminate dependencies on key personnel 去除关键的人员依赖</li>
<li>Have history of builds and releases in order to investigate issues 具有可供查询的构建和发布历史</li>
<li>Save time and money - because of the reasons listed above 节省时间和财力</li>
</ul>
</blockquote>
<h2 id="使用-Grunt"><a href="#使用-Grunt" class="headerlink" title="使用 Grunt"></a>使用 Grunt</h2><p>使用 Grunt 可以加快开发和自动构建。可以帮助开发者将压缩、编译、单元测试、代码检查等工作自动化。</p>
<p>三步使用 grunt：</p>
<blockquote>
<ul>
<li>Change to the project’s root directory.</li>
<li>Install project dependencies with npm install.</li>
<li>Run Grunt with grunt.</li>
</ul>
</blockquote>
<p><code>package.json</code> 保存项目元数据；<br><code>Gruntfile.js</code> 配置或定义任务、加载 Grunt 插件。<br><code>npm install &lt;module&gt; --save-dev</code> 本地安装并将依赖写入 <code>package.json</code> 中 <code>devDependencies</code>。</p>
<h2 id="Gruntfile-js-配置文件"><a href="#Gruntfile-js-配置文件" class="headerlink" title="Gruntfile.js 配置文件"></a><code>Gruntfile.js</code> 配置文件</h2><p>Gruntfile.js 包括下面四个部分：</p>
<blockquote>
<ul>
<li>The “wrapper” function</li>
<li>Project and task configuration</li>
<li>Loading Grunt plugins and tasks</li>
<li>Custom tasks</li>
</ul>
</blockquote>
<p>包装函数（wrapper function）：概括 grunt 的配置信息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在包装函数内，初始化配置对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将 <code>package.json</code> 的项目设置保存到 <code>pkg</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkg: grunt.file.readJSON(<span class="string">'package.json'</span>)</div></pre></td></tr></table></figure>
<p>插件配置（grunt-contrib-concat 为例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">concat: &#123;</div><div class="line">    options: &#123;</div><div class="line">        seperator: <span class="string">';'</span></div><div class="line">    &#125;,</div><div class="line">    dist: &#123;</div><div class="line">    src: [],</div><div class="line">    dest: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加载用到的插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div></pre></td></tr></table></figure>
<p>创建任务：</p>
<p>直接输入 <code>grunt</code> 执行默认任务（default）；<br>输入 <code>grunt test</code> 可以执行自定义的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>]);</div><div class="line">grunt.registerTask(<span class="string">'test'</span>, [<span class="string">'jshint'</span>]);</div></pre></td></tr></table></figure>
<p>Grunt 常见插件：</p>
<p><code>grunt-contrib-uglify</code> 压缩 js, css 文件<br><code>grunt-contrib-concat</code> 连接文件<br><code>grunt-contrib-jshint</code> js 代码检测<br><code>grunt-contrib-watch</code> 代码监视</p>
<h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp</a></h1><p>Gulp 和 Grunt 干差不多的活，目前还不知道优劣。Gulp 显得简单一些。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h1><blockquote>
<p>EJS 是一个简单的模板语言，可以让你使用原生 JavaScript 生成 HTML 标记。没有关于如何组织内容的语法规则，也没有循环和控制流的重载，只是使用原生的 JavaScript。</p>
</blockquote>
<p>EJS 一个在 HTML 中嵌入原生 JS 语言的模板语言。</p>
<p>有以下特点：</p>
<blockquote>
<p>快速的编写和解析<br>简单的模板标签: &lt;% %&gt;<br>自定义分隔符（例如使用 &lt;? ?&gt;替换&lt;% %&gt;）<br>使用 include 引入其他模板<br>同时支持服务器端和客户端使用<br>JavaScript 的静态缓存<br>模板的静态缓存<br>与 Express 视图系统兼容</p>
</blockquote>
<p>一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>), <span class="comment">// 加载 ejs 模块</span></div><div class="line">    people = [<span class="string">'geddy'</span>, <span class="string">'neil'</span>, <span class="string">'alex'</span>], <span class="comment">// 数据</span></div><div class="line">    html = ejs.render(<span class="string">'&lt;%= people.join(", "); %&gt;'</span>, &#123;people: people&#125;); <span class="comment">// ejs 渲染</span></div></pre></td></tr></table></figure>
<p>熟悉这几个标签：</p>
<ul>
<li><code>&lt;%</code> ‘Scriptlet’ 标签, 用于控制流，没有输出</li>
<li><code>&lt;%=</code> 向模板输出值（带有转义）</li>
<li><code>&lt;%-</code> 向模板输出没有转义的值</li>
<li><code>&lt;%#</code> 注释标签，不执行，也没有输出</li>
<li><code>&lt;%%</code> 输出字面的 ‘&lt;%’</li>
<li><code>%&gt;</code> 普通的结束标签</li>
<li><code>-%&gt;</code> Trim-mode (‘newline slurp’) 标签, 移除随后的换行符</li>
</ul>
<p>使用 <code>include</code> 调用的模板时路径需要 filename 选项。</p>
<h1 id="JADE"><a href="#JADE" class="headerlink" title="JADE"></a>JADE</h1><p>JADE（现在改名为 Pugjs） 是一个极度注重代码简洁性的模板语言。相比 EJS 来说，渲染性能较低一些。但因为其简单的语法（对其他人来说也许算是“复杂”了）受到欢迎。</p>
<p>下面记录一些容易忘记的特殊语法：</p>
<p><code>= &#39;\n&#39;</code> 换行<br><code>!=</code> 不转义的属性</p>
<blockquote>
<p>未经转义的缓存代码十分危险。您必须正确处理和过滤用户的输入来避免跨站脚本攻击。</p>
</blockquote>
<p><code>&#39;${}&#39;</code> 字符串中嵌入变量</p>
<p><code>&amp;attributes({&#39;data-foo&#39;: &#39;bar&#39;})</code> 语法可以将一个对象转化为一个元素的属性列表</p>
<p>分支条件（Case）：case 是 JavaScript 的 switch 指令的缩写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var foo = 10</div><div class="line">case foo</div><div class="line">    when 0</div><div class="line">        p eee</div><div class="line">    when 1</div><div class="line">        p fff</div><div class="line">    default</div><div class="line">        p ggg #&#123;foo&#125;</div></pre></td></tr></table></figure>
<p>分支传递 (Case Fall Through) :在 Pug 中，传递会在遇到非空的语法块前一直进行下去。如果不想输出任何东西的话，可以明确地加上一个原生的 break 语句。也可以使用块展开的语法</p>
<p>由 <code>-</code> 开始的一段为不输出的代码。另起一行并缩进可以写成块的形式。<br>用 <code>=</code> 开始一段带有输出的代码，它应该是可以被求值的一个 JavaScript 表达式。<br>用 <code>!=</code> 开始一段不转义的，带有输出的代码。</p>
<p>用 <code>//-</code> 进行单行注释，使用 <code>//</code> 并另起一行缩进，可进行块注释。pug 的条件注释跟 html 一样，并没有特殊的写法。</p>
<p>条件判断形式可以省略开头的 <code>-</code>, <code>if !x</code> === <code>unless x</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if x</div><div class="line">else if y</div><div class="line">else</div><div class="line">    z</div></pre></td></tr></table></figure>
<p>模板继承：<code>extends</code> 关键字允许模板去扩展一个布局或父模板，这样它就可以覆盖某些预定义的内容。</p>
<p>包含 <code>include</code> 功能允许您把另外的文件内容插入进来。</p>
<p>Pug 支持使用 <code>block</code> 和 <code>extends</code> 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。</p>
<p>Pug 允许您去替换（默认的行为）、<code>prepend</code>（向头部添加内容），或者 <code>append</code>（向尾部添加内容）一个块。当使用 <code>block append</code> 或者 <code>block prepend</code> 时，<code>block</code> 关键字是可省略的</p>
<p>嵌入 Interpolation：Pug 提供了好几种方式满足不同的嵌入需求。</p>
<p>迭代 Iteration</p>
<p><code>each</code> <code>each ... in ...</code> <code>each val, index in arr</code></p>
<p><code>for</code> <code>while</code> 也可以创建迭代</p>
<p>混入 Mixin：混入是一种允许您在 Pug 中重复使用一整个代码块的方法。<code>mixin</code> 可以写成函数形式，传入参数。在使用 <code>mixin</code> 的函数形式时，在前面加上 <code>+</code> 号，即 <code>+foo(faz)</code>。还可以使用剩余参数（rest arguments）<code>...</code> 语法来表示参数列表传入若干长度不定的参数。</p>
<p>放置纯文本</p>
<ul>
<li>管道文本：在每行加一个 <code>|</code> 字符。</li>
<li>标签的行内：文本只需要和标签名隔开一个空格。</li>
<li>标签中的块：在标签后街上一个 <code>.</code> 点号（没有空格）。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天修改了下博客模板，顺便了解了下相关的工具和模块。&lt;/p&gt;
&lt;h1 id=&quot;HEXO&quot;&gt;&lt;a href=&quot;#HEXO&quot; class=&quot;headerlink&quot; title=&quot;HEXO&quot;&gt;&lt;/a&gt;HEXO&lt;/h1&gt;&lt;p&gt;辅助函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url_for()&lt;
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="hexo" scheme="//lix90.github.io/tags/hexo/"/>
    
      <category term="Grunt" scheme="//lix90.github.io/tags/Grunt/"/>
    
      <category term="Gulp" scheme="//lix90.github.io/tags/Gulp/"/>
    
      <category term="Jade" scheme="//lix90.github.io/tags/Jade/"/>
    
      <category term="Pugjs" scheme="//lix90.github.io/tags/Pugjs/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-28</title>
    <link href="//lix90.github.io/2016/10/28/2016-10-28-daily/"/>
    <id>//lix90.github.io/2016/10/28/2016-10-28-daily/</id>
    <published>2016-10-28T06:10:36.000Z</published>
    <updated>2016-10-30T06:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>常见的 JS 的鼠标事件：</p>
<ul>
<li>mousedown：鼠标的键钮被按下。</li>
<li>mouseup：鼠标的键钮被释放弹起。</li>
<li>click：单击鼠标的键钮。</li>
<li>dblclick：鼠标的键钮被按下。</li>
<li>contextmenu ：弹出右键菜单。</li>
<li>mouseover：鼠标移到目标的上方。</li>
<li>mouseout：鼠标移出目标的上方。</li>
<li>mousemove：鼠标在目标的上方移动。</li>
<li>mouseleave：鼠标离开目标。</li>
</ul>
<p>jQuery 有与此对应的鼠标事件的方法</p>
<p><code>map</code> 方法</p>
<p><code>arr.map(callback[, thisArg])</code>: <code>callback(currentValue, index, array)</code></p>
<p>就是遍历 <code>arr</code> 里元素，将每个元素传入给 <code>callback</code>，然后生成新的 <code>arr</code>。</p>
<p><code>setInterval</code> 在固定的时间间隔，重复调用一个函数或代码块，返回 <code>timeoutID</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> intervalID = <span class="built_in">window</span>.setInterval(myCallback, <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Code here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>===&gt; WindowTimers</p>
<p><code>clearInterval()</code> <code>clearTimeout()</code> <code>setInterval()</code> <code>setTimeout()</code><br><code>start</code></p>
<hr>
<h1 id="前端代码规范"><a href="#前端代码规范" class="headerlink" title="前端代码规范"></a>前端代码规范</h1><p><a href="http://codeguide.bootcss.com/" target="_blank" rel="external">代码规范 by @mdo</a></p>
<blockquote>
<p>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p>
</blockquote>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul>
<li>强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言；</li>
<li>在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性；</li>
<li>尽量最少使用标签，并保持最小的复杂度；</li>
<li>HTML 属性顺序：<code>class</code> (<code>id</code> <code>name</code>) <code>data-*</code> (<code>src</code> <code>for</code> <code>type</code> <code>href</code>) (<code>title</code> <code>alt</code>) (<code>aria-*</code>, <code>role</code>)；</li>
<li>布尔型属性不用赋值；</li>
<li>尽量避免多余的父元素；</li>
<li>尽量避免 JS 生成的标签。</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li>用两个空格来代替制表符；</li>
<li>为选择器分组时，将单独的选择器单独放在一行；</li>
<li>在每个声明块的左花括号前添加一个空格；</li>
<li>声明块的右花括号应当单独成行；</li>
<li>每条声明语句的 <code>:</code> 后应该插入一个空格；</li>
<li>为了获得更准确的错误报告，每条声明都应该独占一行；</li>
<li>所有声明语句都应当以分号结尾；</li>
<li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格；</li>
<li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格；</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0；</li>
<li>十六进制值应该全部小写；</li>
<li>尽量使用简写形式的十六进制值；</li>
<li>为选择器中的属性添加双引号；</li>
<li>避免为 0 值指定单位。</li>
</ul>
<h3 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h3><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p>
<ul>
<li>Positioning</li>
<li>Box model</li>
<li>Typographic</li>
<li>Visual</li>
</ul>
<blockquote>
<p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。</p>
</blockquote>
<h3 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用 @import"></a>不要使用 @import</h3><blockquote>
<p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p>
<ul>
<li>使用多个 <code>&lt;link&gt;</code> 元素</li>
<li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li>
<li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li>
</ul>
</blockquote>
<h3 id="媒体查询的位置"><a href="#媒体查询的位置" class="headerlink" title="媒体查询的位置"></a>媒体查询的位置</h3><blockquote>
<p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。</p>
</blockquote>
<h3 id="单行规则声明"><a href="#单行规则声明" class="headerlink" title="单行规则声明"></a>单行规则声明</h3><blockquote>
<p>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p>
</blockquote>
<h3 id="简写形式的属性声明"><a href="#简写形式的属性声明" class="headerlink" title="简写形式的属性声明"></a>简写形式的属性声明</h3><blockquote>
<p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。</p>
</blockquote>
<h3 id="Less-和-Sass-中的嵌套"><a href="#Less-和-Sass-中的嵌套" class="headerlink" title="Less 和 Sass 中的嵌套"></a>Less 和 Sass 中的嵌套</h3><p>避免非必要的嵌套。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote>
<p>请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p>
</blockquote>
<h3 id="class-命名"><a href="#class-命名" class="headerlink" title="class 命名"></a>class 命名</h3><ul>
<li>class 名称中只能出现小写字符和破折号（dashe）；</li>
<li>破折号应当用于相关 class 的命名（类似于命名空间）；</li>
<li>避免过度任意的简写；</li>
<li>class 名称应当尽可能短，并且意义明确；</li>
<li>使用有意义的名称；</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>对于通用元素使用 class ，这样利于渲染性能的优化。</li>
<li>对于经常出现的组件，避免使用属性选择器（例如，[class^=”…”]）。浏览器的性能会受到这些因素的影响。</li>
<li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3；</li>
<li>只有在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）。</li>
</ul>
<p><code>合理使用标签</code> <code>降低选择器复杂度</code></p>
<h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><ul>
<li>以组件为单位组织代码段。</li>
<li>制定一致的<strong>注释规范</strong>。</li>
<li><strong>使用一致的空白符将代码分隔成块</strong>，这样利于扫描较大的文档。</li>
<li>如果使用了多个 CSS 文件，将其<strong>按照组件而非页面的形式分拆</strong>，因为页面会被重组，而组件只会被移动。</li>
</ul>
<p><code>组件化</code> <code>块状</code></p>
<h3 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h3><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p>
<ul>
<li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li>
<li>保存文件时，删除尾部的空白符。</li>
<li>设置文件编码为 UTF-8。</li>
<li>在文件结尾添加一个空白行。</li>
</ul>
<p>在 Emacs 中配置两个空格缩进：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(defun my/web-mode-indent-style ()</div><div class="line">    &quot;Personal web mode indent style.&quot;</div><div class="line">    ;; 设置默认的缩进方式</div><div class="line">    (setq-default indent-tabs-mode nil)</div><div class="line"></div><div class="line">    ;; 设置 web-mode 的缩进</div><div class="line">    (setq web-mode-markup-indent-offset 2</div><div class="line">        web-mode-css-indent-offset 2</div><div class="line">        web-mode-code-indent-offset 2</div><div class="line">        web-mode-indent-style 2)</div><div class="line">)</div><div class="line">(add-hook &apos;web-mode-book &apos;my/web-mode-indent-style)</div><div class="line"></div><div class="line">;; 设置 CSS 缩进</div><div class="line">(setq css-indent-offset 2)</div></pre></td></tr></table></figure>
<hr>
<h1 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h1><h2 id="golden-ratio-mode"><a href="#golden-ratio-mode" class="headerlink" title="golden-ratio-mode"></a>golden-ratio-mode</h2><p>当开启多个缓冲区（buffers）时，希望对不同的 buffer 高度和宽度进行调整。<a href="https://github.com/roman/golden-ratio.el" target="_blank" rel="external">golden-ratio-mode</a> 满足此要求，可用于自动调整 buffer 宽高。当切换到某个 buffer，会自动增加活动 buffer 的高度或宽度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(use-package golden-ratio</div><div class="line">  :ensure t</div><div class="line">  :diminish golden-ratio-mode</div><div class="line">  :init</div><div class="line">  (progn</div><div class="line">  (golden-ratio-mode t) ;; 开启 golden-ratio</div><div class="line">  (setq golden-ratio-adjust-factor .8 ;; 调整垂直比例</div><div class="line">    golden-ratio-wide-adjust-factor .8 ;; 调整水平宽度比例</div><div class="line">    golden-ratio-exclude-modes &apos;(list &quot;projectile-mode&quot; &quot;project-explorer-mode&quot;) ;; 指定不使用 golden-ratio 的 major-mode</div><div class="line">    )</div><div class="line">    (golden-ratio-toggle-widescreen) ;; 开启宽屏模式</div><div class="line">    ))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;p&gt;常见的 JS 的鼠标事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mousedown：鼠
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="CSS" scheme="//lix90.github.io/tags/CSS/"/>
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="Emacs" scheme="//lix90.github.io/tags/Emacs/"/>
    
      <category term="HTML" scheme="//lix90.github.io/tags/HTML/"/>
    
      <category term="代码规范" scheme="//lix90.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-27</title>
    <link href="//lix90.github.io/2016/10/27/2016-10-27-daily/"/>
    <id>//lix90.github.io/2016/10/27/2016-10-27-daily/</id>
    <published>2016-10-27T15:11:30.000Z</published>
    <updated>2016-10-27T15:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><p>可包含任意数据类型，并通过索引来访问每个元素。<br>Array 是可变的，很灵活，可通过索引或者赋新的值和长度值改变 Array 的大小和值。<br>在写代码时，不建议直接修改 Array 的大小，访问索引时要确保索引不会越界。</p>
<p><code>length</code> 获取长度<br><code>indexOf()</code> 搜索指定元素的位置<br><code>slice</code> 截取 Array 的部分元素，返回新的 Array；注意 slice 的起始参数包括开始索引，不包括结束索引。<br><code>push</code> 向 Array 的末尾添加若干元素<br><code>pop</code> 删除 Array 的最后一个元素<br><code>unshift</code> 往 Array 头部添加若干元素<br><code>shift</code> 删除 Array 的第一个元素<br><code>sort</code> 对 Array 进行排序，并且修改 Array 的元素位置，默认排序标准为 <code>string Unicode code points</code>。<br><code>reverse</code> 反转 Array<br><code>splice</code> 从指定的索引开始删除若干元素，再从该位置添加若干元素。<br><code>concat</code> 连接 Array，并返回新的 Array；concat 方法可以接收任一个元素和 Array。<br><code>join</code> 将 Array 的每个元素都用指定的字符串连接起来，然后返回连接后的字符串。</p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>jQuery 可以做许多事情：</p>
<ul>
<li>selectors 选择器 <code>$(&#39;*&#39;).css(&#39;property&#39;, &#39;values&#39;);</code></li>
<li>animations 创建动画 <code>$(&#39;selector&#39;).animate(...);</code></li>
<li>filters 过滤机制:<ul>
<li>index filters; <code>$(&#39;selector:eq(2)&#39;.css(...));</code></li>
<li>relationship filters; <code>$(&#39;selector:parent&#39;.css(...));</code></li>
<li>attribute filters; <code>$(&#39;tag[name^=&quot;foo&quot;]&#39;).css(...);</code></li>
</ul>
</li>
<li>image swap 图片的操作 <code>$(&#39;img&#39;).attr(&#39;src&#39;, &#39;...&#39;);</code></li>
<li>methods 方法<ul>
<li>attr methods; <code>.attr(&#39;attribute&#39;, &#39;...&#39;);</code></li>
<li>class methods; <code>.hasClass()</code> <code>.addClass()</code></li>
<li>content methods; <code>.text()</code></li>
</ul>
</li>
<li>DOM traversal DOM 遍历</li>
<li>event binding 事件绑定 <code>.bind(&#39;event&#39;, ...)</code></li>
</ul>
<p>@ 2016-10-20 15:36:55</p>
<h2 id="Optimizing-the-DOM"><a href="#Optimizing-the-DOM" class="headerlink" title="Optimizing the DOM"></a>Optimizing the DOM</h2><ol>
<li>minify 最小化</li>
<li>compress 压缩</li>
<li>cache 缓存</li>
</ol>
<h3 id="onblocking-css"><a href="#onblocking-css" class="headerlink" title="onblocking css"></a>onblocking css</h3><p>将不同媒体的样式分离为单独的样式表，然后根据媒体类型进行加载。</p>
<h3 id="Optimization-JS"><a href="#Optimization-JS" class="headerlink" title="Optimization JS"></a>Optimization JS</h3><p>JS 阻碍网页的解析</p>
<h3 id="Async-JS"><a href="#Async-JS" class="headerlink" title="Async JS"></a>Async JS</h3><ol>
<li>Does not block DOM construction</li>
<li>Does not block on CSSOM</li>
</ol>
<p>@ 2016-10-19 10:57:59</p>
<p>Q: What is <strong>callback</strong>?</p>
<hr>
<h1 id="Vuejs"><a href="#Vuejs" class="headerlink" title="Vuejs"></a>Vuejs</h1><p>Vuejs 有哪些优点？</p>
<ul>
<li>Reactive</li>
<li>Component based</li>
<li>Modular</li>
<li>Simple to use animations right out of the box</li>
<li>Easy to learn</li>
</ul>
<hr>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="zoom-属性"><a href="#zoom-属性" class="headerlink" title="zoom 属性"></a>zoom 属性</h2><p><code>zoom: auto | &lt;number&gt; | &lt;percentage&gt;;</code></p>
<blockquote>
<p>The zoom property in CSS allows you to scale your content. It is non-standard, and was originally implemented only in Internet Explorer. Although several other browsers now support zoom, it isn’t recommended for production sites.</p>
</blockquote>
<p>用于内容的缩放。zoom 是一个老版 IE 属性，在实际的使用中，不建议使用。如果要缩放内容，可以使用 <code>CSS transforms</code>，也可以使用 filters，如果需要老版的 IE 支持。</p>
<p>兼容 IE6、IE7、IE8 浏览器，经常会遇到一些问题，可以使用 <code>zoom:1</code> 来解决，有如下作用：</p>
<ul>
<li>触发 IE 浏览器的 haslayout</li>
<li>解决 IE 下的浮动，margin 重叠等问题。</li>
</ul>
<p>zoom 的作用：</p>
<ul>
<li>检查页面的标签是否闭合</li>
<li>样式排除法</li>
<li>模块确认法</li>
<li>检查是否清除浮动</li>
<li>检查 IE 下是否触发 haslayout</li>
<li>边框背景调试法</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.jb51.net/css/40285.html" target="_blank" rel="external">CSS中不为人知Zoom属性的使用介绍(IE私有属性)</a></li>
<li><a href="https://css-tricks.com/almanac/properties/z/zoom/" target="_blank" rel="external">CSS-tricks: zoom</a></li>
<li><a href="http://www.useragentman.com/IETransformsTranslator/" target="_blank" rel="external">IE’s CSS3 Transforms Translator</a></li>
</ul>
<h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h2><p>BFC 决定盒子的布局及浮动元素相互影响的一个因素。</p>
<p>下列情况可以创建一个块格式化上下文：</p>
<ul>
<li>根元素或其它包含它的元素（超级块级元素）</li>
<li>浮动（元素 float 不为 none）</li>
<li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li>
<li>行内块 inline-blocks（元素的 display: ineline-block;）</li>
<li>表格单元格（元素的 display: table-cell, HTML 表格单元格默认属性）</li>
<li>表格标题（元素的 display: table-caption, HTML表格标题默认属性）</li>
<li>overflow 的值不为 visible 的元素</li>
<li>弹性盒子 flexboxes（元素的 display: flex 或 inline-block）</li>
</ul>
<p>块格式化上下文包括了创建该上下文的元素的所有子元素，但不包括创建了新的块格式化上下文的子元素。<br>块格式化上下文对定位与清除浮动很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除 同一块格式化上下文中 在它前面的元素的浮动。</p>
<p>参考资料：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">块级格式化上下文</a></p>
<h2 id="如何通过-CSS-动画提升用户体验？"><a href="#如何通过-CSS-动画提升用户体验？" class="headerlink" title="如何通过 CSS 动画提升用户体验？"></a>如何通过 CSS 动画提升用户体验？</h2><p>什么时候使用动画？</p>
<ul>
<li>指明方向 orientation: where am i now</li>
<li>提示功能的变化 functional change: what does this element to now</li>
<li>提示新的元素 new element: what should i look at</li>
<li>强调 highlight: what is important here</li>
<li>视觉反馈 visual feedback: is the layout understanding what I am asking it to do</li>
<li>提示系统状态 system status: is this working? how long will it take</li>
</ul>
<hr>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML-语义化"><a href="#HTML-语义化" class="headerlink" title="HTML 语义化"></a>HTML 语义化</h2><p>语义化：让机器读懂内容。</p>
<p>Web 规模扩大 —&gt; 机器处理内容 —&gt; 机器读懂内容？—&gt; 语义化</p>
<blockquote>
<p>内容的语义表达能力和 AI 的智能程度决定了机器分析处理 Web 内容能力的高低。</p>
<p><strong>内容与样式分离</strong>：将内容本身的语义合理地表述出来，再为不同的用户代理设计不同的样式描述。这样我们在提供内容的时候，首先要做的就是将内容本身进行合理的描述，暂时不用考虑它的最终呈现会是什么样子。</p>
<p>所谓语义本身就是对符号的一种共识，被认可的程度越高、范围越广，人们就越可以依赖它实现各种各样的功能。</p>
<p>大部分的语义网的表示规范都基于XML，因为它是一种完备的通用描述语言。</p>
<p>所谓 web 语义化，从广义上来说，不仅要使机器（搜索引擎等）易于理解，也要使人易于理解。</p>
<p>语义网的目标就是为了使得网络上的信息更加容易被机器理解和查找，从而提升人类使用网络获取信息的体验。</p>
<p>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和写出更优雅的代码的同时，让浏览器的爬虫和机器很好的解析。</p>
</blockquote>
<p>Why?</p>
<blockquote>
<ul>
<li>有利于 SEO，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重。</li>
<li>语义化的 HTML 在没有 CSS 的情况下也能呈现较好的内容结构与代码结构</li>
<li>方便其他设备的解析</li>
<li>便于团队开发和维护</li>
</ul>
</blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000005626375" target="_blank" rel="external">HTML语义化</a></li>
<li><a href="https://www.zhihu.com/question/20455165" target="_blank" rel="external">如何理解 Web 语义化？</a></li>
<li><a href="http://chenhaizhou.github.io/2015/12/09/html-sense.html" target="_blank" rel="external">谈谈对HTML语义化的理解</a></li>
</ul>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="GET-与-POST"><a href="#GET-与-POST" class="headerlink" title="GET 与 POST"></a>GET 与 POST</h2><p>HTTP 协议中的两种发送请求的方法。</p>
<p>HTTP 是基于 TCP/IP 的关于数据如何在万维网中如何通信的协议。</p>
<blockquote>
<p>HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET/POST 都是TCP链接。GET 和 POST 能做的事情是一样一样的。你要给 GET 加上 request body，给 POST 带上 url 参数，技术上是完全行的通的。<br>HTTP 只是个行为准则，而 TCP 才是 GET 和 POST 怎么实现的基本。<br>GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。<br>GET 和 POST 还有一个重大区别，简单的说：GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。<br>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</p>
</blockquote>
<hr>
<h1 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h1><p>将启动 Emacs 后默认的 <code>*scratch* buffer</code> 的 major mode 改为 markdown-mode</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(setq initial-major-mode &apos;markdown-mode)</div><div class="line">(setq initial-scratch-message &quot;\</div><div class="line"># This buffer is for notes you don&apos;t want to save, and for Markdown.)</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<ul>
<li><a href="http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/" target="_blank" rel="external">Configure the Scratch Buffer’s Mode</a></li>
</ul>
<h2 id="lisp-and-elisp-小记"><a href="#lisp-and-elisp-小记" class="headerlink" title="lisp and elisp 小记"></a>lisp and elisp 小记</h2><p><code>when</code>: <code>(when COND BODY ...)</code> 当 COND 为真，eval BODY；按顺序 eval BODY 中的项，返回最后一项的值。<br><code>and</code>: <code>(and CONDITIONS ...)</code> 当 CONDITIONS 全部为 non-nil 时返回最后一个 arg 的值；如果一个为 nil，后面的都不用 eval，直接返回 nil。<br><code>listp</code>: <code>(listp OBJECT)</code> 当 OBJECT 为 list 返回 t，否则返回 nil。<br><code>cons</code>: <code>(cons CAR CDR)</code> 创建新的 cons。<br><code>not</code>: <code>(not OBJECT)</code> 如果 OBJECT 为 nil 范围 t，否则返回 nil。<br><code>car</code>: <code>(car LIST)</code> 返回 LIST 中的第一个值；如果 arg 为 nil，返回 nil；如果 arg non-nil 且不是 cons cell，那么报错。<br><code>cdr</code>: <code>(cdr LIST)</code> 返回 LIST 中除第一个值之外剩余的值；如果 arg 为 nil，返回 nil；如果 arg non-nil 且不是 cons cell，那么报错。<br><code>cadr</code>: <code>(cadr X)</code> 返回 X 的 cdr 的 car，即范围 X 的第二个元素。<br><code>nth</code>: <code>(nth N LIST)</code> 范围 LIST 中第 N 个元素。<br><code>progn</code>: <code>(progn BODY ...)</code> 按顺序 eval BODY，返回最后一项的值。<br><code>if</code>: <code>(if COND THEN ELSE)</code> 如果 COND 为 non-nil，执行 THEN，否则执行 ELSE；返回 THEN 的值，或者 ELSE 的最后一项的值；THEN 只能有一个表达式，但是 ELSE 可以有零到多个表达式；如果 COND 为 nil，且没有 ELSE，整个 IF 语句返回的值为 nil。<br><code>cond</code>: <code>(cond CLAUSES...)</code> 当一个 clause 执行完再执行下一个 clause. clause 的表达式为 <code>(CONDITION BODY...)</code>. CONDITION eval 的值为 non-nil，那么 eval BODY 表达式中的项目，并且返回最后一个项目的值。如果 clause 表达式仅仅只有一个元素，如 <code>(CONDITION)</code>，如果 CONDITION 为 non-nil，那么返回 CONDITION 的值。如果没有 clause 执行成功，那么 cond 返回 nil。<br><code>eq</code>: <code>(eq OBJ1 OBJ2)</code> 如果两个 args 为相同的 Lisp 对象，那么返回 t。<br><code>defvar</code>: <code>(defvar SYMBOL &amp;optional INITVALUE DOCSTRING)</code> 定义 SYMBOL 为一个变量，然后返回 SYMBOL 的值。</p>
<p><strong>Q: The differences between Macros and Functions?</strong></p>
<hr>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><code>/</code> 与 <code>//</code> 的差别</p>
<p>在 python2 中，当除数和被除数有一个为浮点型，/ 为一般的除法，如果除数和被除数均为整数型，/ 为整除。而 // 在任何情况下都是整除。而在 python3 中，/ 为浮点除法，// 为整除除法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;&lt;h2 id=&quot;数组-Array&quot;&gt;&lt;a href=&quot;#数组-Array&quot; cla
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Python" scheme="//lix90.github.io/tags/Python/"/>
    
      <category term="CSS" scheme="//lix90.github.io/tags/CSS/"/>
    
      <category term="HTTP" scheme="//lix90.github.io/tags/HTTP/"/>
    
      <category term="Javascript" scheme="//lix90.github.io/tags/Javascript/"/>
    
      <category term="jQuery" scheme="//lix90.github.io/tags/jQuery/"/>
    
      <category term="VueJS" scheme="//lix90.github.io/tags/VueJS/"/>
    
      <category term="DOM" scheme="//lix90.github.io/tags/DOM/"/>
    
      <category term="Emacs" scheme="//lix90.github.io/tags/Emacs/"/>
    
      <category term="elisp" scheme="//lix90.github.io/tags/elisp/"/>
    
      <category term="HTML" scheme="//lix90.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-26</title>
    <link href="//lix90.github.io/2016/10/26/2016-10-26-daily/"/>
    <id>//lix90.github.io/2016/10/26/2016-10-26-daily/</id>
    <published>2016-10-26T01:30:34.000Z</published>
    <updated>2016-10-27T15:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h1><h2 id="解决-Git-push-冲突"><a href="#解决-Git-push-冲突" class="headerlink" title="解决 Git push 冲突"></a>解决 Git push 冲突</h2><p>当Git无法自动合并分支时，就必须首先解决冲突。Git用 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容。解决冲突后，再提交，合并完成。用git log –graph命令可以看到分支合并图。</p>
<h1 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h1><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>Basic premise of learning</p>
<blockquote>
<p>using a set of observations (samples) to uncover an underlying process (distributions)</p>
</blockquote>
<p>几种学习类型：</p>
<ul>
<li>Supervised learning: we get (input, correct output)</li>
<li>Unsupervised learning: instead of (input, correct output), we get (input, ?)</li>
<li>Reinforcement learning: instead of (input, correct output), we get (input, <em>some</em> output, <strong>grade for this output</strong>)</li>
</ul>
<p>什么是机器学习？</p>
<blockquote>
<p>Algorithms for inferring unknowns from knowns.<br>算法，推论，未知，已知</p>
</blockquote>
<h3 id="机器学习应用"><a href="#机器学习应用" class="headerlink" title="机器学习应用"></a>机器学习应用</h3><ul>
<li>识别垃圾邮件</li>
<li>识别手写字</li>
<li>谷歌街道</li>
<li>语音识别</li>
<li>Netflix 推荐系统</li>
<li>Navigation 导航</li>
<li>气候模型：解释和预测</li>
</ul>
<h3 id="什么时候使用机器学习？"><a href="#什么时候使用机器学习？" class="headerlink" title="什么时候使用机器学习？"></a>什么时候使用机器学习？</h3><ul>
<li>人类能力不可及：火星探测</li>
<li>人类无法解释的问题：语音识别</li>
<li>解决方案随着时间而变化：温度控制</li>
<li>解决方案需要对个案进行调整</li>
<li>问题大小超出了人类的合理能力范围</li>
</ul>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><ul>
<li>分类问题</li>
<li>回归问题</li>
</ul>
<p>有训练集（包含数据及其分类）及测试集（有数据没分类）<br>从二元分类到多元分类</p>
<h3 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h3><ul>
<li>聚类（Clustering）：K-均值、混合高斯、层次聚类、最大期望算法</li>
<li>密度估计（Density estimation）</li>
<li>降维（Dimensionality reduction）：因子分析、主成分分析、独立成分分析、隐马尔科夫模型</li>
</ul>
<p>没有训练集也没有奖励与惩罚</p>
<h3 id="监督学习与非监督学习的变式"><a href="#监督学习与非监督学习的变式" class="headerlink" title="监督学习与非监督学习的变式"></a>监督学习与非监督学习的变式</h3><p>Semi-supervised learning<br>Active learning<br>Decision theory<br>Reinforcement learning 增强学习</p>
<ul>
<li>结果会有相应的奖励与惩罚（Rewards or losses）</li>
<li>目标：奖励最大化</li>
</ul>
<hr>
<h2 id="学习的成分"><a href="#学习的成分" class="headerlink" title="学习的成分"></a>学习的成分</h2><ul>
<li>未知的目标函数 f: x —&gt; y；</li>
<li>X 的分布 P；</li>
<li>训练集 D；</li>
<li>学习算法 A；</li>
<li>假设集 H。</li>
</ul>
<h2 id="机器学习的本质"><a href="#机器学习的本质" class="headerlink" title="机器学习的本质"></a>机器学习的本质</h2><ul>
<li>A pattern exists; 有规律存在（学习的对象）</li>
<li>We cannot pin it down mathematically; 无法在数学上进行确定（否则没有学习的必要）</li>
<li>We have data on it. 有足够的数据（学习的基础）</li>
</ul>
<hr>
<p>Hoeffding’s inequality</p>
<p>PAC: probability approximately correct</p>
<p>通过概率论的方法来表示对未知的学习。</p>
<p>什么为学习？当前数据集所告知我们数据集之外信息（推广度问题）。</p>
<p><strong>样本复杂度</strong>：随着问题规模的增长所带来的所需训练样本的增长。</p>
<p>在实际问题中，限制学习器成功的最大因素是有限的可用的训练数据。</p>
<p><strong>学习的可行性</strong>：可以通过训练错误率估计真实错误率；存在数据集 D，使得可以在假设集 H 中自由的选择子假设 h。</p>
<p>如果现有有限个假设且训练数据量够多的情况下，那么不管我们如何选择训练数据，训练错误率和真实错误率都会很接近；我们设计算法来找一个 Ein 最小的假设，PAC 理论就保证了 Eout 很小。这样机器学习算法是有可能学到有用的知识的。</p>
<hr>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h2><p>关于 Margin：</p>
<blockquote>
<p>The margin property defines <strong>the outermost portion of the box model</strong>, creating space around an element, outside of any defined borders. Margins are set using lengths, percentages, or the keyword auto and can have <strong>negative values</strong>.</p>
</blockquote>
<p>垂直 margin 合并的好处：</p>
<ul>
<li>First, they prevent empty elements from adding extra, usually undesirable, vertical margin space. 组织了空元素增加多余的垂直外边距空间。</li>
<li>Second, they allow for a more consistent approach to declaring universal margins across page elements. 让整个页面元素具有更一致的方式来声明外边距。</li>
<li>Third, margin collapse also applies to nested elements. 外边距合并对嵌入的元素也起作用。</li>
</ul>
<h2 id="CSS-浮动"><a href="#CSS-浮动" class="headerlink" title="CSS 浮动"></a>CSS 浮动</h2><ul>
<li><strong>脱离</strong>文档的常规流（Normal flow）</li>
<li>不出现外边距合并</li>
<li>需要指明浮动元素宽度，否则元素的宽度为<strong>零</strong>（或者最小字符宽度）</li>
<li>浮动元素的容器块为最近的<strong>块级</strong>祖先元素</li>
<li>一般来说浮动元素会成为块级盒</li>
</ul>
<blockquote>
<p>Collapsing almost always needs to be dealt with to prevent strange layout and cross-browser problems. We fix it <strong>by clearing the float after the floated elements in the container but before the close of the container.</strong></p>
</blockquote>
<h2 id="常见清除浮动的办法"><a href="#常见清除浮动的办法" class="headerlink" title="常见清除浮动的办法"></a>常见清除浮动的办法</h2><ol>
<li>clear 属性</li>
<li>空 DIV 法：不如何“结构与表现分离原则”</li>
<li>Overflow 法：可能有副作用</li>
<li>Clearfix 法</li>
</ol>
<blockquote>
<p>bear in mind that the overflow property isn’t specifically for clearing floats. <strong>Be careful not to hide content or trigger unwanted scrollbars.</strong></p>
</blockquote>
<h2 id="CSS3-提供了几种新的处理布局的方法"><a href="#CSS3-提供了几种新的处理布局的方法" class="headerlink" title="CSS3 提供了几种新的处理布局的方法"></a>CSS3 提供了几种新的处理布局的方法</h2><ol>
<li>Flexbox 弹性盒子</li>
<li>Multi-column layout 多栏布局</li>
<li>Grid layout 格子布局</li>
</ol>
<h1 id="Good-stuff"><a href="#Good-stuff" class="headerlink" title="Good stuff"></a>Good stuff</h1><ul>
<li>Helvetica 纪录片：字体设计</li>
<li>Code Rush 纪录片：代码奔腾 Firefox 的诞生</li>
<li>Just for Fun 书籍：Linus 讲述 Linux 如何发明</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Skills&quot;&gt;&lt;a href=&quot;#Skills&quot; class=&quot;headerlink&quot; title=&quot;Skills&quot;&gt;&lt;/a&gt;Skills&lt;/h1&gt;&lt;h2 id=&quot;解决-Git-push-冲突&quot;&gt;&lt;a href=&quot;#解决-Git-push-冲突&quot; class=&quot;
    
    </summary>
    
      <category term="每日总结" scheme="//lix90.github.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="CSS" scheme="//lix90.github.io/tags/CSS/"/>
    
      <category term="机器学习" scheme="//lix90.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Git" scheme="//lix90.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 学习记录</title>
    <link href="//lix90.github.io/2016/10/22/2016-10-22-http/"/>
    <id>//lix90.github.io/2016/10/22/2016-10-22-http/</id>
    <published>2016-10-22T11:45:33.000Z</published>
    <updated>2016-11-10T01:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP/0.9 —&gt; HTTP/1.0 —&gt; HTTP/1.1 —&gt; SPDY 协议 —&gt; HTTP/2</p>
<h1 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h1><p>主要缺点：每个 TCP 连接只能发送一个请求。TCP 连接的新建成本高，所以 HTTP/1.0 性能较差。为了避免这个问题，在浏览器请求时，使用一个非标准的 <code>Connection</code> 字段：<code>Connection: keep-alive</code>，要求服务器不要关闭 TCP 连接，以便其他请求复用。然而，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p>
<h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>目前是最流行的版本。该版本最大的变化是，引入了<strong>持久连接（persistent connection）</strong>，即 TCP 连接默认不关闭，可被多个请求复用，无须申明 <code>Connection: keep-alive</code>。当客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。更规范的做法是，在客户端最后一次请求时，发送 <code>Connection: close</code>，明确要求服务器关闭 TCP 连接。</p>
<p>引入管道机制：在同一个 TCP 连接里面，客户端可以同时发送多个请求。</p>
<p>缺点：虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这就会出现”队头堵塞”（Head-of-line blocking）。</p>
<h1 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h1><ul>
<li>二进制协议：头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。<br>多工：双向的、实时的通信。</li>
<li>数据流：HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。</li>
<li>头信息压缩机制（header compression）</li>
<li>服务器推送</li>
</ul>
<p>问题：</p>
<ol>
<li>HTTP/1.0 相对于 HTTP/0.9 有哪些新标准？HTTP/1.0 有什么缺点？</li>
<li>HTTP/1.1 相对于 HTTP/1.0 有哪些新标准？HTTP/1.1 有什么缺点？</li>
<li>HTTP/2 相对于 HTTP/1.1 有哪些新标准？</li>
<li>HTTPS 是什么？与 HTTP/2 有什么差别？</li>
</ol>
<p>参考资料：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">阮一峰：HTTP 协议入门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP/0.9 —&amp;gt; HTTP/1.0 —&amp;gt; HTTP/1.1 —&amp;gt; SPDY 协议 —&amp;gt; HTTP/2&lt;/p&gt;
&lt;h1 id=&quot;HTTP-1-0&quot;&gt;&lt;a href=&quot;#HTTP-1-0&quot; class=&quot;headerlink&quot; title=&quot;HTT
    
    </summary>
    
      <category term="前端开发" scheme="//lix90.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="//lix90.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTTP" scheme="//lix90.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>D3.js 入门学习记录</title>
    <link href="//lix90.github.io/2016/10/17/2016-10-17-d3js-intro/"/>
    <id>//lix90.github.io/2016/10/17/2016-10-17-d3js-intro/</id>
    <published>2016-10-17T08:23:07.000Z</published>
    <updated>2016-10-28T02:05:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dashingd3js.com 上的 D3.js 教程学习笔记。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>使用 D3.js 进行数据可视化需要了解以下内容：</p>
<ul>
<li>现代浏览器</li>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
<li>DOM</li>
<li>SVG</li>
<li>网页元素审查器（Web Inspecter）</li>
</ul>
<h1 id="添加-DOM-元素"><a href="#添加-DOM-元素" class="headerlink" title="添加 DOM 元素"></a>添加 DOM 元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>).append(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
<p><code>D3.select()</code> 选择方法使用 CSS3 选择器来抓取 DOM 元素。当元素被选中，算子（operators）能够获取或设置属性、样式、文本内容等。</p>
<p><code>D3.append()</code> 添加元素为当前选中的父级元素的最后一个子元素。</p>
<h1 id="添加-SVG-元素"><a href="#添加-SVG-元素" class="headerlink" title="添加 SVG 元素"></a>添加 SVG 元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">  .append(<span class="string">"svg"</span>)</div><div class="line">  .attr(<span class="string">"width"</span>, <span class="number">50</span>)</div><div class="line">  .attr(<span class="string">"height"</span>, <span class="number">50</span>)</div><div class="line">  .append(<span class="string">"circle"</span>)</div><div class="line">  .attr(<span class="string">"cx"</span>, <span class="number">25</span>)</div><div class="line">  .attr(<span class="string">"cy"</span>, <span class="number">25</span>)</div><div class="line">  .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">  .style(<span class="string">"fill"</span>, <span class="string">"purple"</span>)</div></pre></td></tr></table></figure>
<p><code>d3.style()</code> 样式算子对元素的样式进行操作。</p>
<p>与 jQuery 类似，D3js 通过点号 <code>.</code> 构成链式语法。在链式语法中，结果与算子和方法顺序有关。</p>
<h1 id="捆绑数据到-DOM-元素中"><a href="#捆绑数据到-DOM-元素中" class="headerlink" title="捆绑数据到 DOM 元素中"></a>捆绑数据到 DOM 元素中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> theData = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</div><div class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>)</div><div class="line">    .data(theData)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="string">"Hello "</span>);</div></pre></td></tr></table></figure>
<p><code>d3.selectAll()</code> 全选方法选择所有与选择器字符串匹配的 DOM 元素。但是上面的代码里头，并并有实际选择元素，而是返回的空选择（虚拟选择）。后面通过 <code>.data()</code> 和 <code>.enter()</code> 将数据绑定到空选择中。</p>
<p><code>.enter()</code> 方法从数据算子中返回虚拟键入选择，返回占位符元素。该方法只在 <code>.data()</code> 上操作生效。</p>
<p><code>.append()</code> 在占位符上添加 DOM 元素。</p>
<p><code>.text()</code> 文本方法添加文本到对于 DOM 元素上。</p>
<p>其中，数据被保存在 <code>__data__</code> 属性中。</p>
<p>如何将捆绑的数据提取出来呢？</p>
<p><code>.text( function(d) { return d; } )</code> 其中，匿名函数会对遍历所有元素的数据，分别返回对于的值。<code>d</code> 变量在 D3.js 被用来指代当前元素的 <code>__data__</code> 属性。另外，D3.js 还提供了两个变量 <code>this</code> 和 <code>i</code>。<code>this</code> 指代当前 DOM 元素。<code>i</code> 指代当前选中的元素的下标，<code>i</code> 从0开始计数。所有数据是按顺序分别处理。</p>
<h1 id="根据数据创建-SVG-元素"><a href="#根据数据创建-SVG-元素" class="headerlink" title="根据数据创建 SVG 元素"></a>根据数据创建 SVG 元素</h1><p>建立数组：<code>var newArray = [10, 20, 30];</code><br>将数据指派给 SVG 元素的属性值 <code>.attr(&#39;r&#39;, function (d) { return d; }</code></p>
<h1 id="使用-SVG-坐标空间"><a href="#使用-SVG-坐标空间" class="headerlink" title="使用 SVG 坐标空间"></a>使用 SVG 坐标空间</h1><p>SVG 的坐标空间与数学中的坐标空间有两点差异：</p>
<ul>
<li>SVG 的坐标空间的零点位于左上角；</li>
<li>SVG 的坐标空间的 Y 轴由上至下延伸。</li>
</ul>
<h1 id="D3-js-支持的数据结构"><a href="#D3-js-支持的数据结构" class="headerlink" title="D3.js 支持的数据结构"></a>D3.js 支持的数据结构</h1><p>数组（Array）：<code>var newArray = [30, 70, 110];</code> 数组可以包含任何对象，包括数字，对象，字符串，数组，HTML元素，DOM元素等。</p>
<p><code>d3.select()</code> 所得到的也是数组。</p>
<p>D3.js 可以支持以下数据来源：</p>
<ul>
<li>XMLHttpRequest</li>
<li>文本文件</li>
<li>JSON blob</li>
<li>HTML 文档块</li>
<li>XML 文档块</li>
<li>CSV 文件</li>
<li>TSV 文件</li>
</ul>
<p>数组甚至可以包含 JSON 数据结构。</p>
<h1 id="使用-JSON-对象"><a href="#使用-JSON-对象" class="headerlink" title="使用 JSON 对象"></a>使用 JSON 对象</h1><p>使用 JSON 数据结构可以简化代码，使用起来更方便。</p>
<h1 id="使用-D3-js-绘制-SVG-基本形状的图形"><a href="#使用-D3-js-绘制-SVG-基本形状的图形" class="headerlink" title="使用 D3.js 绘制 SVG 基本形状的图形"></a>使用 D3.js 绘制 SVG 基本形状的图形</h1><p>只要知道相关图形元素的属性，那么就可以通过 D3.js 的算子进行操作了。</p>
<p>绘制一个圆</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"25"</span> <span class="attr">fill</span>=<span class="string">"purple"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonCircle = [ &#123; <span class="string">"x_axis"</span>: <span class="number">30</span>, <span class="string">"y_axis"</span>: <span class="number">30</span>, <span class="string">"radius"</span>: <span class="number">20</span>, <span class="string">"color"</span>: <span class="string">"green"</span>&#125; ];</div><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">    .attr(<span class="string">"height"</span>, <span class="number">200</span>)</div><div class="line"><span class="keyword">var</span> circles = svgContainer.selectAll(<span class="string">"circle"</span>)</div><div class="line">    .data(jsonCircles)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"circle"</span>)</div><div class="line"><span class="keyword">var</span> circleAttributes = circles</div><div class="line">    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.x_axis &#125;)</div><div class="line">    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.y_axis &#125;)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.radius&#125;)</div><div class="line">    .style(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.color &#125;);</div></pre></td></tr></table></figure>
<p>其他简单图形都差不多，只是属性不一样。以此类推。</p>
<h1 id="SVG-路径"><a href="#SVG-路径" class="headerlink" title="SVG 路径"></a>SVG 路径</h1><p>SVG 路径为一个图形的轮廓。可以使用 SVG 的路径绘制任意形状。路径可以比作钢笔落笔绘制轮廓的过程。路径由属性 <code>d</code> 表示，其语法包括一下几个部分：</p>
<ul>
<li>moveto：设置一个新的点</li>
<li>lineto：绘制一条直线</li>
<li>curveto：绘制一条曲线（贝塞尔曲线）</li>
<li>arc：椭圆或者圆弧</li>
<li>closepath：通过绘制线条封闭当前的图形</li>
</ul>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">" M 10 25</span></span></div><div class="line">              L 10 75</div><div class="line">              L 60 75</div><div class="line">              L 10 25"</div><div class="line">              <span class="attr">stroke</span>=<span class="string">"red"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"none"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，路径中的字母是大小写有区分的，大写为绝对定位，小写为相对定位。<br>要绘制更复杂的图形，使用 SVG 是相当难的。所以 D3.js 可以拯救这部分需求的用户。</p>
<p>使用 D3.js 提供的绘制 SVG 路径的方法要方便许多。</p>
<p>绘制直线：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//The data for our line</span></div><div class="line"><span class="keyword">var</span> lineData = [ &#123; <span class="string">"x"</span>: <span class="number">1</span>,   <span class="string">"y"</span>: <span class="number">5</span>&#125;,  &#123; <span class="string">"x"</span>: <span class="number">20</span>,  <span class="string">"y"</span>: <span class="number">20</span>&#125;,</div><div class="line">                 &#123; <span class="string">"x"</span>: <span class="number">40</span>,  <span class="string">"y"</span>: <span class="number">10</span>&#125;, &#123; <span class="string">"x"</span>: <span class="number">60</span>,  <span class="string">"y"</span>: <span class="number">40</span>&#125;,</div><div class="line">                 &#123; <span class="string">"x"</span>: <span class="number">80</span>,  <span class="string">"y"</span>: <span class="number">5</span>&#125;,  &#123; <span class="string">"x"</span>: <span class="number">100</span>, <span class="string">"y"</span>: <span class="number">60</span>&#125;];</div><div class="line"></div><div class="line"><span class="comment">//This is the accessor function we talked about above</span></div><div class="line"><span class="keyword">var</span> lineFunction = d3.svg.line()</div><div class="line">                         .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.x; &#125;)</div><div class="line">                         .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.y; &#125;)</div><div class="line">                         .interpolate(<span class="string">"linear"</span>);</div><div class="line"></div><div class="line"><span class="comment">//The SVG Container</span></div><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">                                    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">                                    .attr(<span class="string">"height"</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//The line SVG Path we draw</span></div><div class="line"><span class="keyword">var</span> lineGraph = svgContainer.append(<span class="string">"path"</span>)</div><div class="line">                            .attr(<span class="string">"d"</span>, lineFunction(lineData))</div><div class="line">                            .attr(<span class="string">"stroke"</span>, <span class="string">"blue"</span>)</div><div class="line">                            .attr(<span class="string">"stroke-width"</span>, <span class="number">2</span>)</div><div class="line">                            .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>);</div></pre></td></tr></table></figure>
<p><code>.attr(&quot;d&quot;, lineFunction(lineData))</code> 将数据传递给数据寄存器，然后把数据返回给 SVG 路径命令。</p>
<p>D3.js 提供了 11 中不同的内插线形：</p>
<ul>
<li>linear</li>
<li>step-before</li>
<li>step-after</li>
<li>basis</li>
<li>basis-open</li>
<li>basis-closed</li>
<li>bundle</li>
<li>cardinal</li>
<li>cardinal-open</li>
<li>cardinal-closed</li>
<li>monotone</li>
</ul>
<p>D3.js 提供了多种路径数据产生器（Path data generators），它既是对象又是函数。</p>
<ul>
<li>d3.svg.line</li>
<li>d3.svg.line.radial</li>
<li>d3.svg.area</li>
<li>d3.svg.area.radial</li>
<li>d3.svg.arc</li>
<li>d3.svg.symbol</li>
<li>d3.svg.chord</li>
<li>d3.svg.diagonal</li>
<li>d3.svg.diagonal.radial</li>
</ul>
<h1 id="SVG-动态坐标空间"><a href="#SVG-动态坐标空间" class="headerlink" title="SVG 动态坐标空间"></a>SVG 动态坐标空间</h1><p>如果使坐标根据数据进行调整？当 SVG 容器空间的大小比其中的图形元素坐标要小，那会出现容器空间上无法显式出图形的问题。这个时候需要动态的 SVG 坐标空间。这个时候需要做的是，让容器空间的宽高随着数据而进行伸缩。</p>
<h1 id="D3-js-标尺（scales）"><a href="#D3-js-标尺（scales）" class="headerlink" title="D3.js 标尺（scales）"></a>D3.js 标尺（scales）</h1><p>与其让 SVG 容器大小适应数据，不如让数据适应容器。因为有的时候，数据的大小尺寸远远大于浏览器显示尺度。这个时候需要对数据进行伸缩变换以便适应空间。</p>
<p>D3.js 提供了一些方法进行数据的变换。</p>
<p>例如 <code>d3.scale.linear()</code> 线性变换</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> linearScale = d3.scale.linear()</div><div class="line">                    .domain([<span class="number">0</span>, <span class="number">10000</span>])</div><div class="line">                    .range([<span class="number">0</span>, <span class="number">100</span>])</div></pre></td></tr></table></figure>
<p><code>.domain()</code> 里输入的范围为原始数据的范围。<br><code>.range()</code> 里输入的范围为变换后的范围。</p>
<p>提供了计算最大值和最小值的方法：<code>d3.max()</code> <code>d3.min()</code></p>
<p>D3.js 的标尺类型有以下几种：</p>
<ul>
<li>Identity 1:1 的变换，适用于像素值</li>
<li>Linear 线性的变换</li>
<li>Power 和 Logarithmic 指数和对数变换</li>
<li>Quantize 和 Quantile 针对离散数据</li>
<li>Ordinal 针对非量化的数据，如名称，类别</li>
</ul>
<h1 id="SVG-组元素"><a href="#SVG-组元素" class="headerlink" title="SVG 组元素"></a>SVG 组元素</h1><p>SVG 组元素是一个包裹其他子元素的的容器，通过 <code>&lt;g&gt;...&lt;/g&gt;</code> 定义。组元素内可以包含任意组元素。任何对组元素的变换，都将影响其所包含的子元素。</p>
<p>组元素的作用：</p>
<ul>
<li>创建分组，可以使一组元素共享相同的属性</li>
<li>变换，对一组元素进行同样的变换</li>
</ul>
<p>在 D3.js 中构建组元素并增加变换属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">                                    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">                                    .attr(<span class="string">"height"</span>, <span class="number">200</span>);</div><div class="line"><span class="keyword">var</span> circleGroup = svgContainer.append(<span class="string">"g"</span>)</div><div class="line">                              .attr(<span class="string">"transform"</span>, <span class="string">"translate(80, 0)"</span>);</div></pre></td></tr></table></figure>
<h1 id="SVG-文本元素"><a href="#SVG-文本元素" class="headerlink" title="SVG 文本元素"></a>SVG 文本元素</h1><p>添加 SVG 文本元素跟添加图形类型，只是该元素有一些特殊的属性。同样，使用 D3.js 添加文本和添加图形一样，操纵文本元素的属性和值就可以了。</p>
<h1 id="SVG-坐标轴（Axes）"><a href="#SVG-坐标轴（Axes）" class="headerlink" title="SVG 坐标轴（Axes）"></a>SVG 坐标轴（Axes）</h1><p>使用 D3.js 绘制坐标轴和坐标刻度。</p>
<p>创建坐标轴对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis();</div></pre></td></tr></table></figure>
<p>传递尺度信息给坐标轴对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> axisScale = d3.scale.linear()</div><div class="line">                        .domain([<span class="number">0</span>, <span class="number">100</span>])</div><div class="line">                        .range([<span class="number">0</span>, <span class="number">100</span>]);</div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">                  .scale(axisScale);</div></pre></td></tr></table></figure>
<p>创建坐标轴组元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xAxisGroup = svgContainer.append(<span class="string">"g"</span>)</div><div class="line">                             .call(xAxis);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dashingd3js.com 上的 D3.js 教程学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;使用 D3.js 进行数据可视化需要了解以下内容：&lt;/p&gt;

    
    </summary>
    
      <category term="D3js" scheme="//lix90.github.io/categories/D3js/"/>
    
    
      <category term="数据可视化" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="JavaScript" scheme="//lix90.github.io/tags/JavaScript/"/>
    
      <category term="D3js" scheme="//lix90.github.io/tags/D3js/"/>
    
      <category term="SVG" scheme="//lix90.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>R：查看源代码</title>
    <link href="//lix90.github.io/2016/10/08/2016-10-08-r-source-code/"/>
    <id>//lix90.github.io/2016/10/08/2016-10-08-r-source-code/</id>
    <published>2016-10-08T14:23:57.000Z</published>
    <updated>2016-11-13T02:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>&gt;<br>Updated in 2016-11-11</p>
<p>为了深入了解 R 语言，谷歌检索了阅读源代码的方法，在此整理和记录以便往后查阅。要直接从 R 命令行获取源代码，需要了解一些 R 语言编程知识。R 语言中函数或者方法有许多种，例如：</p>
<ul>
<li>in-built 函数</li>
<li>S3 范型函数</li>
<li>S4 范型函数</li>
<li>non-visible functions 隐藏函数</li>
<li>unexported functions</li>
<li>compiled code</li>
<li>infix operators</li>
</ul>
<p>不同类型函数获取源代码的方式不同。要获取源代码，首先直接执行函数（不带括号），观察返回结果。一般来说，普通函数会直接返回源代码。</p>
<p>如果返回的结果包含 <code>UseMethod(&quot;function&quot;)</code>，则表示该函数为 S3 范型函数，它根据对象类型的不同调用不同的方法。然后使用 <code>methods()</code> 列出特定的范型函数和与类有关的函数 <code>methods(function)</code> <code>methods(class=&quot;classname&quot;)</code>。我们可以看到返回一些带 <code>*</code> 的函数，这类函数为 <code>Non-visible functions</code>，即隐藏的函数，表示这类函数没有从语言包的命名空间导出。但是我们仍然可以查看隐藏函数的源代码，可通过 <code>:::</code> 函数查看，即 <code>pkgname:::function</code>。另外，还可以使用 <code>getAnywhere()</code> 获取。<code>getAnywhere()</code> 并不需要知道函数来自于哪个语言包。对于没有 <code>*</code> 的方法，直接运行即可获得源代码。另外，S3 范型函数还可以通过 <code>getS3method(function, class)</code> 获取源代码。</p>
<p>如果返回的结果包含 <code>standardGeneric(&quot;function&quot;)</code>，意味着该函数为 S4 范型函数。对于这类函数，先通过 <code>showMethods(function)</code> 获得方法对应的 <code>signature</code>（不知道是神马东西）。例如：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; showMethods(chol2inv)</div><div class="line">Function: chol2inv (package base)</div><div class="line">x=<span class="string">"ANY"</span></div><div class="line">x=<span class="string">"CHMfactor"</span></div><div class="line">x=<span class="string">"denseMatrix"</span></div><div class="line">x=<span class="string">"diagonalMatrix"</span></div><div class="line">x=<span class="string">"dtrMatrix"</span></div><div class="line">x=<span class="string">"sparseMatrix"</span></div></pre></td></tr></table></figure></p>
<p>其中 <code>x=&quot;ANY&quot;</code> 就是 signature。那么，可以通过 <code>getMethod(&quot;function&quot;, &quot;signature&quot;)</code> 获取源代码。<br>有一些方法具有更复杂的 <code>signature</code>，例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>(raster)</div><div class="line">showMethods(extract)</div><div class="line">Function: extract (package raster)</div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"data.frame"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"Extent"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"matrix"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialLines"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialPoints"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialPolygons"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"vector"</span></div></pre></td></tr></table></figure>
<p>那么，可以通过 <code>getMethod(&quot;function&quot;, signature = c(x = &quot;Raster&quot;, y = &quot;SpatialPolygons&quot;))</code> 获取源代码。</p>
<p>对于 <code>unexported functions</code>，可以使用和隐藏函数一样的方法获取源代码，即 <code>:::</code> 或 <code>getAnywhere()</code>。对于 <code>compiled code</code>，即返回内容中有 <code>&lt;bytecode:0x294e410&gt;</code> 的函数，仍然可以从 R 命令行查阅源代码。但是对于函数中调用的 <code>.C</code> <code>.Call</code> <code>.Fortran</code> <code>.External</code> <code>.Internal</code> <code>.Primitive</code>，无法从命令行获取源代码，需要直接查看编译前的源代码。函数 <code>pryr::show_c_source</code> 可以直接在 Github 中找到 <code>.Internal</code> 和 <code>.Primitive</code> 调用的内容。</p>
<p>对于无法直接从命令行获取源代码的函数，可以直接下载原始语言包。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## from CRAN</span></div><div class="line">download.packages(pkgs = <span class="string">"Matrix"</span>,</div><div class="line">                  destdir = <span class="string">"."</span>,</div><div class="line">                  type = <span class="string">"source"</span>)</div><div class="line"><span class="comment">## uncompressing and untaring</span></div><div class="line">untar(download.packages(pkgs = <span class="string">"Matrix"</span>,</div><div class="line">                        destdir = <span class="string">"."</span>,</div><div class="line">                        type = <span class="string">"source"</span>)[,<span class="number">2</span>])</div></pre></td></tr></table></figure>
<p>基本包的源代码，可以通过查阅 R 语言源代码： <a href="http://svn.r-project.org/R/trunk/" target="_blank" rel="external">Subversion repository</a> 或者 <a href="https://github.com/wch/r-source/tree/trunk" target="_blank" rel="external">Winston Chang’s github mirror</a>。对于其他来源的包，直接从相应网站获取。</p>
<p>最后，可以通过 <code>edit(getAnywhere(&quot;function&quot;), file = &quot;source_function.r&quot;)</code> 或者 <code>capture.output(getAnywhere(&quot;function&quot;), file = &quot;source_function.r&quot;)</code> 获得源代码的文本内容。</p>
<p>另外，还可以通过代码调试方法获得源代码 <code>debugonce(function)</code>，使用 <code>debug(function)</code> 需要使用 <code>undebug()</code> 结束调试。</p>
<p>对于 infix operators，即 <code>%%</code> <code>%*%</code> <code>%in%</code>，可以通过 <code>getAnywhere</code> 或者 使用 backticks ‘`’ 包裹然后执行即可返回源代码。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/19226816/how-can-i-view-the-source-code-for-a-function" target="_blank" rel="external">How can I view the source code for a function?</a> 主要参考资料</li>
<li><a href="http://stackoverflow.com/questions/6583265/what-does-s3-methods-mean-in-r/6583639#6583639" target="_blank" rel="external">What does “S3 methods” mean in R?</a></li>
<li><a href="http://yusung.blogspot.jp/2007/08/get-invisible-functions-or-internal.html" target="_blank" rel="external">Get source codes for invisible functions or internal functions in R</a></li>
<li><a href="http://stackoverflow.com/questions/5937832/how-do-i-show-the-source-code-of-an-s4-function-in-a-package" target="_blank" rel="external">How do I show the source code of an S4 function in a package?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;gt;&lt;br&gt;Updated in 2016-11-11&lt;/p&gt;
&lt;p&gt;为了深入了解 R 语言，谷歌检索了阅读源代码的方法，在此整理和记录以便往后查阅。要直接从 R 命令行获取源代码，需要了解一些 R 语言编程知识。R 语言中函数或者方法有许多种，例如：&lt;/p&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R：正则表达式</title>
    <link href="//lix90.github.io/2016/10/03/2016-10-03-r-regex/"/>
    <id>//lix90.github.io/2016/10/03/2016-10-03-r-regex/</id>
    <published>2016-10-02T16:46:15.000Z</published>
    <updated>2016-11-10T03:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>A ‘regular expression’ is a pattern that describes a set of strings.</p>
</blockquote>
<p>按照文档中的定义，正则表达式是用来描述一个字符串集合的模式（pattern）。<br>在 R 语言中，有两类正则表达式：一是默认使用的拓展的正则表达式（extended regular expressions）；二是类 Perl 语言的正则表达式，通过 <code>perl = TRUE</code> 生效。另外还有可以通过设置参数 <code>fixed = TRUE</code> 使用 literal 正则表达式。<br>支持正则表达式的函数包括：<code>grep</code> <code>grepl</code> <code>regexpr</code> <code>gregexpr</code> <code>sub</code> <code>gsub</code> <code>strsplit</code>。其他函数 <code>apropos</code> <code>browseEnv</code> <code>help.search</code> <code>list.files</code> <code>ls</code> 等往往通过 <code>grep</code> 函数来支持正则表达式。<br>正则表达式过长可能不被接受，因为 POSIX 标准仅支持最高256字节。</p>
<h1 id="Extended-Regular-Expressions"><a href="#Extended-Regular-Expressions" class="headerlink" title="Extended Regular Expressions"></a>Extended Regular Expressions</h1><ul>
<li>字母和数字本身就是正则表达式，可用来匹配自身。</li>
<li>具有特殊含义的元字符需要通过反斜杠（backslash，<code>\</code>）逃逸其所代表的特殊含义。</li>
</ul>
<p>元字符包括：<code>. \ | ( ) [ { ^ $ * + ?</code></p>
<blockquote>
<p>Escaping non-metacharacters with a backslash is implementation-dependent. The current implementation interprets \a as BEL, \e as ESC, \f as FF, \n as LF, \r as CR and \t as TAB.<br>A character class is a list of characters enclosed between [ and ] which matches any single character in that list; unless the first character of the list is the caret ^, when it matches any character not in the list.<br>A range of characters may be specified by giving the first and last characters, separated by a hyphen.<br>Certain named classes of characters are predefined. Their interpretation depends on the locale (see locales); the interpretation below is that of the POSIX locale.</p>
</blockquote>
<p><code>[:alnum:]</code> = <code>[:alpha:]</code> + <code>[:digit:]</code><br><code>[:alpha:]</code> = <code>[:lower:]</code> + <code>[:upper:]</code><br><code>[:blank:]</code> 空白符，如空格、tab<br><code>[:cntrl:]</code> Control characters<br><code>[:digit:]</code> 数字<br><code>[:graph:]</code> = <code>[:alnum:]</code> + <code>[:punct:]</code><br><code>[:lower:]</code> 小写字母<br><code>[:print:]</code> 可打印的字符 <code>[:alnum:]</code> <code>[:punct:]</code> 空格<br><code>[:punct:]</code> 标点符号<br><code>[:space:]</code> 空格符：tab, newline, vertical tab, form feed, carriage return, space, and possibly other locale-dependent characters<br><code>[:upper:]</code> 大写字母<br><code>[:xdigit:]</code> 十六进制数字</p>
<p>元字符</p>
<p><code>.</code> 匹配其他任何单字符<br><code>\w</code> 匹配单词 = <code>[[:alnum:]_]</code> <code>\W</code> = <code>[^[:alnum:]_]</code><br><code>\s</code> 空白符 <code>\S</code> 非空白符<br><code>\d</code> 数字 <code>\D</code> 非数字<br><code>^</code> 匹配首空字符（line）<br><code>$</code> 匹配尾空字符（line）<br><code>\&lt;</code> 匹配首空字符（word）<br><code>\&gt;</code> 匹配尾空字符（word）<br><code>\b</code> 匹配位于边缘的空字符（word）<br><code>\B</code> 匹配非边缘字符（word）</p>
<p>匹配频率有关的元字符</p>
<p><code>?</code> 匹配 1 次<br><code>*</code> 匹配 0 或多次<br><code>+</code> 匹配 1 或多次<br><code>{n}</code> 匹配 n 次<br><code>{n,}</code> 匹配 n 或更多次<br><code>{n,m}</code> 匹配 n 至 m 次</p>
<p>默认来说，默认匹配次数是有多少次就多少次。但是可以通过 <code>?</code> 来改变低频率匹配。<br>正则表达式可以被连接起来，其作用等同于把待匹配的字符串用连接的正则表达式匹配的效果。两个正则表达式也可以通过 <code>|</code> 求并集。</p>
<h1 id="正则表达式函数实例"><a href="#正则表达式函数实例" class="headerlink" title="正则表达式函数实例"></a>正则表达式函数实例</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A ‘regular expression’ is a pattern that describes a set of strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照文档中的定义，正则表达式是用来描述一个字符串集合的模式（patt
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="正则表达式" scheme="//lix90.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP 安装与配置</title>
    <link href="//lix90.github.io/2016/09/25/2016-09-25-php-config/"/>
    <id>//lix90.github.io/2016/09/25/2016-09-25-php-config/</id>
    <published>2016-09-25T13:00:45.000Z</published>
    <updated>2016-10-28T02:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了了解 PHP 这门所谓的“世界上最好的语言”，特意安装和配置了 PHP 环境。</p>
<p>因为系统是 Mac OSX，所以直接使用 <code>brew install php56</code> 来安装。但是并未找到 php56 。于是 <code>brew search php</code>，发现 php 相关安装包位于 <code>/homebrew/php/*</code>，于是用 <code>brew install homebrew/php/php56</code> 安装。但是出现报错 <code>undefined method rebuild</code> 的错误。尝试 <code>brew cleanup &amp;&amp; brew update</code>，仍然不起作用，依旧报错。后来查询到可以更新下 homebrew 的仓库。于是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd $(brew --repo)</div><div class="line">git fetch</div><div class="line">git reset --hard origin/master</div><div class="line">brew update</div></pre></td></tr></table></figure>
<p>然后再尝试安装 <code>brew install homebrew/php/php56</code>。</p>
<p>其实也可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/dupes</div><div class="line">brew tap homebrew/versions</div><div class="line">brew tap homebrew/homebrew-php</div><div class="line">brew install php56</div></pre></td></tr></table></figure>
<p>然后安装了包管理工具 composer</p>
<blockquote>
<p>PHP 世界的包管理工具Composer</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install homebrew/php/composer</div></pre></td></tr></table></figure>
<p>并且安装了 psySH</p>
<blockquote>
<p>A runtime developer console, interactive debugger and REPL for PHP.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer g require psy/psysh:@stable</div></pre></td></tr></table></figure>
<p>psySH 的二进制文件位于 <code>~/.composer/vendor/psysh</code><br>也可以通过这个来运行 <code>~/.composer/vendor/bin/psysh</code><br>为了方便，我将其添加到 PATH <code>export $PATH:/Users/lix/.composer/vendor/bin</code></p>
<p>配置 emacs 的 php 环境<br>先安装 ac-php 的依赖 <code>brew install cscope</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;;; php mode</div><div class="line">(use-package php-mode</div><div class="line">  :ensure t</div><div class="line">  :mode &quot;\\.php\\&apos;&quot;</div><div class="line">  :config</div><div class="line">  (progn</div><div class="line">    (add-hook &apos;php-mode-hook &apos;smartparens-mode)</div><div class="line">    (use-package ac-php</div><div class="line">      :ensure t</div><div class="line">      :config</div><div class="line">      (add-hook &apos;php-mode-hook</div><div class="line">                &apos;(lambda ()</div><div class="line">                   (use-package company-php :ensure t)</div><div class="line">                   (company-mode t)</div><div class="line">                   (add-to-list &apos;company-backends &apos;company-ac-php-backend))))</div><div class="line">    (use-package php-eldoc</div><div class="line">      :ensure t</div><div class="line">      :config</div><div class="line">      (add-hook &apos;php-mode-hook &apos;php-eldoc-enable))))</div><div class="line"></div><div class="line">;;; php REPL</div><div class="line">(use-package psysh</div><div class="line">  :if (executable-find &quot;psysh&quot;)</div><div class="line">  :ensure t</div><div class="line">  :defer t</div><div class="line">  :config</div><div class="line">  (add-hook &apos;psysh-mode-hook &apos;smartparens-mode))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了了解 PHP 这门所谓的“世界上最好的语言”，特意安装和配置了 PHP 环境。&lt;/p&gt;
&lt;p&gt;因为系统是 Mac OSX，所以直接使用 &lt;code&gt;brew install php56&lt;/code&gt; 来安装。但是并未找到 php56 。于是 &lt;code&gt;brew sea
    
    </summary>
    
      <category term="PHP" scheme="//lix90.github.io/categories/PHP/"/>
    
    
      <category term="配置" scheme="//lix90.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="PHP" scheme="//lix90.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>从零学机器学习之决策树</title>
    <link href="//lix90.github.io/2016/09/22/2016-09-22-decision-tree/"/>
    <id>//lix90.github.io/2016/09/22/2016-09-22-decision-tree/</id>
    <published>2016-09-22T02:10:09.000Z</published>
    <updated>2016-10-28T02:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>以一名数学只有普通高中水平的非理工科人的视角尝试理解机器学习之<strong>决策树</strong>。</p>
<p>决策树是一种比较好理解的分类算法，望文就能生意，而且意思还不会出现大的偏差。把这个算法的过程想像成一棵树或者根毛的生长过程，决策层越低，分支越丰富。决策树的优点之一也就在于此，容易理解，像我这样的非专业领域的人可以直接脑补。</p>
<p>《机器学习实战》这本书中描述，决策树的 <strong>计算复杂度</strong> 不高，输出结果易于理解（可以用直观来理解），对 <strong>中间值</strong> 的缺失不敏感（这里没懂，中间值是啥？），可以处理不相关特征数据（对数据要求不严格？）。但是，决策树虽简单，但容易产生过度匹配问题。为什么会产生过度匹配问题呢？也许是因为分类的标准太“粗糙”或者“武断”吧？？？。其适用数据类型包括 <strong>数值型</strong> 和 <strong>标称型</strong>。</p>
<p>决策树是通过对数据集的特征按照某种标准进行分类，分成若干个子数据集，子数据集又可以按照新的标准对子数据集进行分类。这里有个疑问，到底要分多少次呢？明白了，如果“决策”次数越多，决策树模型越复杂，模型越复杂，是不是就计算复杂度越高呢？这个又与“过度拟合”有关吗？直觉去看，一个数据集可以有许多特征，但是有些特征对分类并无太大的作用。举个例子，把人和动物进行区分，到底是“使用和制造工具的能力”还是“语言”？对决策树就是这样一个过程。挑选出最能够区分出类别的一批特征，然后对数据集进行分类。这样模型简单，精确度又越高。但是如何知道哪些特征最合适呢？<del>这就需要先验知识了，这里头就有了人为性。所以从这里也可以知道，决策树是一个监督学习。</del> 看到知乎里头一个问题 <a href="https://www.zhihu.com/question/19753084" target="_blank" rel="external">信息增益到底怎么理解呢？</a>，明白了，原来可以用 <strong>信息增益</strong> 来确定一个特征用于分类是不是合适。</p>
<p>前面说到，决策树适用的数据类型包括了 <strong>数值型</strong>，但是，<strong>树构造算法只适用于标称型数据，数值型数据必须离散化</strong>。也就是说，要用“身高”和“体重”来区分男女，必须把这两个数值型数据转化为离散的，例如 <code>&gt;170cm</code>，<code>&lt;170cm</code>，体重 <code>&gt;60kg</code>，<code>&lt;60kg</code>。或者稍微精细一点，按照 10cm 和 5kg 的精度进行分割。</p>
<p>阅读《机器学习实战》的过程中，有个概念很抽象，<strong>信息增益</strong>。我尝试去这样理解。如果没有 <strong>生物分类学</strong>，人对物种的认识和理解是杂乱的，可能每个人的主观分类都不一致，因为不同人关注于不同特征。但有了一个分类系统，本来看似乱套的系统，就有了规律，这样就有了标准，形成了可以共享的知识。在这里 “信息” 就是 “不同的生物”，“增益” 就是促进了对生物物种的认识，产生了可以交流和分享的知识。看起来，<strong>信息增益</strong> 是一个褒义词呀，信息增益越高越好。那怎么量化信息增益呢？这里又出现一个更加抽象难以理解的概念 <strong>熵</strong>。最开始见到这个词的时候，我竟担心自己读错。所以，顿时发现，隔行如隔山的罪魁祸首之一就是这些该死的专业术语了。越专业越不好好说话。不过，命名一些专业术语把知识简化，也是为了本专业内沟通的效率吧（活学活用，提高信息增益）。</p>
<p>那么什么是 <strong>信息熵</strong>？看定义，熵为信息的期望值（期望值即平均值，高中数学的水平，平均值对我来说比较好理解）。在文科生眼里，<strong>信息</strong> 用公式定义真是碉堡了。好了，不想数学公式了。总之，这里把信息当作概率去看待了。我只想明白，熵的大小意味着什么。维基百科的信息熵词条里有几句话：1. 熵最好理解为不确定性的度量而不是确定性的度量，因为越随机的信源的熵越大；2. 比较不可能发生的事情，当它发生了，会提供更多的信息。拿自己所知道的一点点背景知识理解的话，也就是小概率事件发生了，熵就变大了，熵变大了，事情就越发不可预测了，因为越随机了。也就是说，我越懵逼，熵就越大？这个世界乱成一团遭，那么熵就越大了。看来，<strong>熵</strong> 是个贬义词呀，哈哈。像那些信息量大的话，还是不说为好，毕竟熵大，有些人难以理解，毕竟不是所有人都有那么有内涵。那么用熵来量化信息增益，就是，熵变得越小，信息增益就越大。我们为的把世界看清楚，就得让熵变小。但是现实很残酷，我们无法预测未来，熵是不以我们的意志为转移的，该死的熵跟房价一样，死也降不下来啊。不过提高自身实力，认清自我，未来就不那么迷茫了，重要的是脚踏实地嘛。熵自然而然就小了。好吧，扯远了。总之，熵和信息增益是个对立的关系。</p>
<hr>
<p>待续</p>
<hr>
<p>参考资料：</p>
<ul>
<li>《机器学习实战》</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA" target="_blank" rel="external">熵 (信息论)</a>)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以一名数学只有普通高中水平的非理工科人的视角尝试理解机器学习之&lt;strong&gt;决策树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;决策树是一种比较好理解的分类算法，望文就能生意，而且意思还不会出现大的偏差。把这个算法的过程想像成一棵树或者根毛的生长过程，决策层越低，分支越丰富。决策树
    
    </summary>
    
    
      <category term="机器学习" scheme="//lix90.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="决策树" scheme="//lix90.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="分类算法" scheme="//lix90.github.io/tags/%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>零基础如何学习一门新的编程语言？</title>
    <link href="//lix90.github.io/2016/09/17/2016-09-17-learn-new-lang/"/>
    <id>//lix90.github.io/2016/09/17/2016-09-17-learn-new-lang/</id>
    <published>2016-09-17T06:48:43.000Z</published>
    <updated>2016-10-28T02:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>在正式读研之前，我几乎没有编程基础。本科在一所不知名的民办二本院校的第一届人力资源班。只在省二级计算机考试中接触了丁点儿编程（好像是VFOX）。也没有考国家计算机二级证书。从刚读研开始，需要在 MATLAB 环境下工作，才正式学起了一门程序语言。所以学习一门编程语言并没有想象中的困难。</p>
<p>借这个地儿，分享<strong>如何从零基础菜鸟开始入门到熟悉并且掌握一门程序语言</strong>的一些经验，希望能够给同样零基础，或者畏惧编程的朋友（特别是从事科学研究的人）一些启发。</p>
<p>P.S. 内容较为简洁，后续再补充。</p>
<h1 id="为什么科研人员要至少学一门编程语言？"><a href="#为什么科研人员要至少学一门编程语言？" class="headerlink" title="为什么科研人员要至少学一门编程语言？"></a>为什么科研人员要至少学一门编程语言？</h1><ul>
<li>提高生产效率（productivity）</li>
<li>培养抽象逻辑思维（abstract thinking）</li>
<li>提高研究的可重复性，拥抱开放科学（<a href="https://en.wikipedia.org/wiki/Open_science" target="_blank" rel="external">open science</a>）</li>
<li>促进同行交流（communication）</li>
<li>……</li>
</ul>
<h1 id="对于科研工作者有哪些编程语言和工具值得一学？"><a href="#对于科研工作者有哪些编程语言和工具值得一学？" class="headerlink" title="对于科研工作者有哪些编程语言和工具值得一学？"></a>对于科研工作者有哪些编程语言和工具值得一学？</h1><ul>
<li><code>R</code> <code>Python</code> <code>Matlab</code></li>
<li><code>Linux</code> <code>Shell</code> <code>Git</code></li>
</ul>
<p>为什么要学习这些东西，搜索引擎检索：<code>why learn x as y</code> 或者 <code>Y 为什么学 X</code>，X 为对应的语言和工具，Y 为职业或者领域。</p>
<hr>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1-科学上网"><a href="#1-科学上网" class="headerlink" title="1. 科学上网"></a>1. 科学上网</h2><p><a href="https://zh.wikipedia.org/zh/防火长城" target="_blank" rel="external">GFW</a> 阻断了国人许多获取信息和知识的渠道。所以，要想借助互联网进行学习，首要解决的问题就是突破 GFW 的限制。</p>
<ul>
<li>Chrome/Firefox: 请用帐号登录浏览器，已便于同步书签；若希望跨浏览器同步书签，请使用搜索引擎检索“跨浏览器同步书签”</li>
<li><a href="https://shadowsocks.com/client.html" target="_blank" rel="external">shadowsocks</a>，请从网上获取免费或者付费帐号，不会使用请检索“如何使用shadowsocks科学上网”</li>
</ul>
<h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><p>要想舒服的学习程序语言，那么就要配置舒服的语言环境。就好像，学外语一样，得有一个很好的语言环境，学习起来才自然。初学者一定不要忽视编程环境的重要性，一定要让自己舒舒服服地写代码，编程的过程才不是枯燥乏味的，惹人烦的。所以，一定要扎扎实实把环境给配置好了，再开始系统地学。如果在进行配置上有困难，那就请教其他懂行的人，或者再多花一些时间。如果仅仅是在面对环境的配置就进行不下去了，那的确可以不用学编程了。</p>
<p>配置语言环境从以下三个方面进行。</p>
<ul>
<li>操作系统<ul>
<li>Ubuntu</li>
<li>MacOS</li>
<li>Windows 下虚拟机运行 Ubuntu</li>
<li>（Windows 下进行配置本人没有尝试过）</li>
</ul>
</li>
<li>编辑器<ul>
<li>较容易：<a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>，<a href="https://atom.io/" target="_blank" rel="external">Atom</a></li>
<li>较难：<a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a>，<a href="http://www.vim.org/" target="_blank" rel="external">Vim</a></li>
</ul>
</li>
<li>集成开发环境 IDE (Integrated development environment)<ul>
<li>R: <a href="https://www.rstudio.com/" target="_blank" rel="external">Rstudio</a>, Emacs (ESS)</li>
<li>Python: <a href="https://ipython.org/" target="_blank" rel="external">IPython</a>, <a href="https://github.com/spyder-ide/spyder" target="_blank" rel="external">Spyder</a>, <a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, Emacs (Elpy)</li>
<li>Matlab: Matlab GUI, Emacs (matlab-mode)</li>
</ul>
</li>
</ul>
<hr>
<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><h2 id="1-官方文档-Documentations"><a href="#1-官方文档-Documentations" class="headerlink" title="1. 官方文档 Documentations"></a>1. 官方文档 Documentations</h2><ul>
<li><a href="https://www.r-project.org/" target="_blank" rel="external">R</a>, <a href="https://support.rstudio.com/hc/en-us/categories/200035113-Documentation" target="_blank" rel="external">Rstudio</a>, <a href="http://www.rdocumentation.org/" target="_blank" rel="external">Rdocumentation</a>, <a href="http://rseek.org/" target="_blank" rel="external">Rseek</a>,</li>
<li><a href="http://docs.python.org/2/" target="_blank" rel="external">Python2.x</a>, <a href="http://docs.python.org/3/" target="_blank" rel="external">Python3.x</a></li>
<li><a href="http://cn.mathworks.com/help/" target="_blank" rel="external">Matlab Documentation</a></li>
</ul>
<h2 id="2-搜索引擎-Search-Engines"><a href="#2-搜索引擎-Search-Engines" class="headerlink" title="2. 搜索引擎 Search Engines"></a>2. 搜索引擎 Search Engines</h2><ul>
<li><strong>Google Search</strong>：<a href="https://www.zhihu.com/question/20161362" target="_blank" rel="external">谷歌学术检索技巧</a></li>
<li>DuckDuckGo</li>
<li>Bing</li>
<li>Baidu</li>
</ul>
<h2 id="3-社区-Community"><a href="#3-社区-Community" class="headerlink" title="3. 社区 Community"></a>3. 社区 Community</h2><ul>
<li>综合：<a href="https://github.com/" target="_blank" rel="external">Github</a>, <a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverflow</a></li>
<li>R: <a href="http://cos.name/" target="_blank" rel="external">统计之都</a>, <a href="https://www.r-bloggers.com/" target="_blank" rel="external">R-bloggers</a>, <a href="https://github.com/qinwf/awesome-R" target="_blank" rel="external">Awesome-R</a></li>
<li>Python: <a href="http://python-china.org/" target="_blank" rel="external">Python China</a>, <a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">Awesome-Python</a></li>
<li>MATLAB: <a href="http://www.mathworks.com/matlabcentral/fileexchange/" target="_blank" rel="external">File Exchange</a>, <a href="http://cn.mathworks.com/matlabcentral/answers/index" target="_blank" rel="external">MATLAB Answers</a> <a href="https://github.com/mikecroucher/awesome-MATLAB" target="_blank" rel="external">Awesome-MATLAB</a></li>
</ul>
<h2 id="4-练习项目-Toy-Projects"><a href="#4-练习项目-Toy-Projects" class="headerlink" title="4. 练习项目 Toy Projects"></a>4. 练习项目 Toy Projects</h2><ul>
<li>个人研究项目</li>
<li>网上公开项目（去 Google 检索或者直接去 Github 搜）</li>
</ul>
<p>需要提及的是，R 语言有一个公益项目 <a href="https://github.com/swirldev/swirl" target="_blank" rel="external">Swirl</a> 可以在 R 的命令窗口通过交互式的方式学习 R。具体请查看 Swirl 的相关文档介绍。</p>
<h2 id="5-书籍-Books"><a href="#5-书籍-Books" class="headerlink" title="5. 书籍 Books"></a>5. 书籍 Books</h2><p>准备两三本书来系统地了解一门编程语言。网上有许多免费书籍，请看 <strong>其他线上学习资料</strong>。</p>
<h2 id="6-其他线上学习资料（待更新）"><a href="#6-其他线上学习资料（待更新）" class="headerlink" title="6. 其他线上学习资料（待更新）"></a>6. 其他线上学习资料（待更新）</h2><p>前面提到的 <code>Awesome</code> 项目已经囊括了各种编程语言和其他领域的学习资源，这里仅仅提一些我看过的。</p>
<ul>
<li>General: <a href="http://programming-motherfucker.com/become.html" target="_blank" rel="external">Become a Programmer, Motherfucker</a></li>
<li>R: <a href="http://www.cookbook-r.com/" target="_blank" rel="external">Cookbook for R</a>，<a href="http://adv-r.had.co.nz/" target="_blank" rel="external">Advanced R</a>，<a href="https://csgillespie.github.io/efficientR/" target="_blank" rel="external">Efficient R programming</a>, <a href="http://health.adelaide.edu.au/psychology/ccs/teaching/lsr/" target="_blank" rel="external">Learning Statistics with R</a>,<a href="http://r4ds.had.co.nz/" target="_blank" rel="external">R for Data Science</a>, <a href="http://www.psych.upenn.edu/~baron/rpsych/rpsych.html" target="_blank" rel="external">Notes on the use of R for psychology experiments and questionnaires</a></li>
<li>Python: <a href="http://codingpy.com/books/thinkpython2/index.html" target="_blank" rel="external">Think Python 第二版</a>, <a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">Python Cookbook 第三版</a>, <a href="http://gael-varoquaux.info/stats_in_python_tutorial/" target="_blank" rel="external">Statistics in Python</a></li>
<li>MATLAB：<a href="http://mirlab.org/jang/books/matlabProgramming4beginner/" target="_blank" rel="external">MATLAB程式設計：入門篇</a>，<a href="http://mirlab.org/jang/books/matlabProgramming4guru/" target="_blank" rel="external">MATLAB程式設計：進階篇</a>，<a href="http://www.matlab-cookbook.com/" target="_blank" rel="external">MATLAB Cookbook</a></li>
</ul>
<hr>
<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><h2 id="第一步：从整体上了解某种语言功能、特点以及优缺点"><a href="#第一步：从整体上了解某种语言功能、特点以及优缺点" class="headerlink" title="第一步：从整体上了解某种语言功能、特点以及优缺点"></a>第一步：从整体上了解某种语言功能、特点以及优缺点</h2><p>这一步可以通过慕课或者书籍来对一门编程语言有一个大概的了解，知道它适合做什么，不适合做什么。</p>
<p>相关慕课请通过搜索引擎进行检索。个人不太喜欢看视频学一门编程语言，相对来说比较喜欢看书。习惯看电子书的可以访问前面提到的免费电子书。习惯看纸质书的借一本翻翻就行了。也许其他人比较喜欢看视频教学。</p>
<h2 id="第二步：弄明白如何查询和获取帮助文档-Getting-Help"><a href="#第二步：弄明白如何查询和获取帮助文档-Getting-Help" class="headerlink" title="第二步：弄明白如何查询和获取帮助文档 Getting Help"></a>第二步：弄明白如何查询和获取帮助文档 Getting Help</h2><p>以下是一些获取帮助的命令，先熟练这几个命令的用法，对后面学习其他函数和命令有非常大的帮助。并不是任何时候都需要查谷歌搜百度。通过这些命令也可以对相关编程语言进行学习。</p>
<ul>
<li>R: <code>?function</code> <code>help(function)</code> <code>help.search()</code> <code>apropos()</code></li>
<li>Python: <code>?</code> <code>??</code> <code>help()</code> <code>dir()</code> <code>__doc__</code></li>
<li>Matlab: <code>help</code> <code>doc</code> <code>lookfor</code></li>
</ul>
<h2 id="第三步：熟悉基本语法和编码规范-Grammar-amp-Style"><a href="#第三步：熟悉基本语法和编码规范-Grammar-amp-Style" class="headerlink" title="第三步：熟悉基本语法和编码规范 Grammar &amp; Style"></a>第三步：熟悉基本语法和编码规范 Grammar &amp; Style</h2><ul>
<li><a href="https://learnxinyminutes.com/" target="_blank" rel="external">Learn X in Y Minutes</a><ul>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/r-cn/" target="_blank" rel="external">X 分钟速成 R</a></li>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/python-cn/" target="_blank" rel="external">X 分钟速成 Python</a></li>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/matlab-cn/" target="_blank" rel="external">X 分钟速成 MATLAB</a></li>
</ul>
</li>
<li>通过 <strong>Cheat Sheet</strong> 来快速了解基本语法<ul>
<li><a href="https://www.cheatography.com/" target="_blank" rel="external">Cheatography</a></li>
<li><a href="http://www.cheat-sheets.org/" target="_blank" rel="external">Cheat-Sheets.org</a></li>
<li>或者谷歌检索 <code>cheat sheet r/python/matlab filetype:pdf</code> 或者 <code>quick reference r/python/matlab filetype:pdf</code></li>
</ul>
</li>
<li>代码规范 Coding Style<ul>
<li>R: <a href="https://google.github.io/styleguide/Rguide.xml" target="_blank" rel="external">Google’s R Style Guide</a>, <a href="http://adv-r.had.co.nz/Style.html" target="_blank" rel="external">R Style guide</a></li>
<li>Python: <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP 8 – Style Guide for Python Code</a>, <a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="external">Google Python Style Guide</a></li>
<li>MATLAB: <a href="https://cn.mathworks.com/matlabcentral/fileexchange/46056-matlab-style-guidelines-2-0" target="_blank" rel="external">MATLAB Style Guidelines 2.0</a>, <a href="www.cs.cornell.edu/courses/cs321/2003fa/Matlab%20Coding%20Style.pdf">Matlab Coding Style</a></li>
</ul>
</li>
</ul>
<h2 id="第四步：在练习或实践中探索性地学习-Practice-amp-Experimentation"><a href="#第四步：在练习或实践中探索性地学习-Practice-amp-Experimentation" class="headerlink" title="第四步：在练习或实践中探索性地学习 Practice &amp; Experimentation"></a>第四步：在练习或实践中探索性地学习 Practice &amp; Experimentation</h2><p>在学习和使用编程语言的过程中，不可避免的遇到各种报错信息。这并不是不好的信号，而正式掌握一个函数或者语法时候。有时候可以故意“犯错”，看看出现什么样的报错信息。总之，多去根据文档里头的例子或者自己编个例子尝试尝试一个函数的用法。</p>
<h2 id="第五步：阅读书籍和源码-Books-amp-Source-code"><a href="#第五步：阅读书籍和源码-Books-amp-Source-code" class="headerlink" title="第五步：阅读书籍和源码 Books &amp; Source code"></a>第五步：阅读书籍和源码 Books &amp; Source code</h2><p>一般来说，不做程序员，就没必要学得太深入。但是如果感兴趣，要进一步提高，那就要多阅读经典技术书籍和源代码咯。</p>
<hr>
<h1 id="Linux-Shell-amp-Git-学习资源"><a href="#Linux-Shell-amp-Git-学习资源" class="headerlink" title="Linux, Shell, &amp; Git 学习资源"></a>Linux, Shell, &amp; Git 学习资源</h1><p>Linux</p>
<ul>
<li><a href="http://linux.vbird.org/linux_basic/" target="_blank" rel="external">鸟哥的 Linux 私房菜</a></li>
<li><a href="https://github.com/aleksandar-todorovic/awesome-linux" target="_blank" rel="external">Awesome Linux</a></li>
</ul>
<p>Shell</p>
<ul>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">快乐的 Linux 命令行</a></li>
<li><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="external">Awesome Shell</a></li>
</ul>
<p>Git</p>
<ul>
<li><a href="https://git-scm.com/documentation" target="_blank" rel="external">Git Documentation</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git 简明指南</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>在科学上网的前提下，善用<strong>搜索引擎</strong>；</li>
<li>学会查询和阅读<strong>文档</strong>；</li>
<li>在最开始就养成良好的<strong>编程规范</strong>；</li>
<li>探索性地<strong>边做边学</strong>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正式读研之前，我几乎没有编程基础。本科在一所不知名的民办二本院校的第一届人力资源班。只在省二级计算机考试中接触了丁点儿编程（好像是VFOX）。也没有考国家计算机二级证书。从刚读研开始，需要在 MATLAB 环境下工作，才正式学起了一门程序语言。所以学习一门编程语言并没有想
    
    </summary>
    
      <category term="个人日志" scheme="//lix90.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习方法" scheme="//lix90.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL 语言入门笔记</title>
    <link href="//lix90.github.io/2016/09/17/2016-09-17-sql/"/>
    <id>//lix90.github.io/2016/09/17/2016-09-17-sql/</id>
    <published>2016-09-17T01:46:39.000Z</published>
    <updated>2016-10-28T02:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>《数据库系统概论》第三章笔记。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="SQL-历史"><a href="#SQL-历史" class="headerlink" title="SQL 历史"></a>SQL 历史</h2><ul>
<li>1974 年，Boyce 和 Chamberlin 提出，Sequel</li>
<li>1986 年 10 月，美国国家标准局（ANSI）的数据库委员会 X3H2 批准，同年公布 SQL 标准文本</li>
<li>1987 年，国际化标准组织（ISO）通过这一标准</li>
</ul>
<p>没有一个数据库系统能够支持 SQL 标准的所有概念和特性。许多软件厂商对 SQL 的基本命令集进行了不同程度的扩充和修改，又可以支持标准以外的一些功能特性。</p>
<h2 id="SQL-特点"><a href="#SQL-特点" class="headerlink" title="SQL 特点"></a>SQL 特点</h2><ul>
<li>综合统一<ul>
<li>SQL 集 <code>数据定义语言</code>、<code>数据操纵语言</code>、<code>数据控制语言</code> 的功能于一体，可以独立完成数据库生命周期中的全部活动。<ul>
<li>定义和修改、删除关系模式，定义和删除视图，插入数据，建立数据库；</li>
<li>对数据库中的数据进行查询和更新；</li>
<li>数据库重构和维护；</li>
<li>数据库安全性、完整性控制，以及事务控制；</li>
<li>嵌入式 SQL 和动态 SQL 定义。</li>
</ul>
</li>
</ul>
</li>
<li>高度非过程化</li>
<li>面向集合的操作方式</li>
<li>以同一种语法结构提供多种使用方式<ul>
<li>既是独立语言，又是嵌入式语言</li>
</ul>
</li>
<li>语言简洁，易学易用</li>
</ul>
<h2 id="SQL-基本概念"><a href="#SQL-基本概念" class="headerlink" title="SQL 基本概念"></a>SQL 基本概念</h2><p>三级模式结构</p>
<ul>
<li>外模式：若干视图、部分基本表</li>
<li>模式：若干基本表</li>
<li>内模式：若干存储文件</li>
</ul>
<hr>
<h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="模式的定义与删除"><a href="#模式的定义与删除" class="headerlink" title="模式的定义与删除"></a>模式的定义与删除</h2><h3 id="1-定义模式"><a href="#1-定义模式" class="headerlink" title="1. 定义模式"></a>1. 定义模式</h3><p><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;</code></p>
<p>进行该操作需具备数据库管理员权限，或者获得了数据库管理员授予的 CREATE SCHEMA 的权限。</p>
<p>定义模式实际上定义了一个命名空间，在此可以进一步定义该模式包含的数据库对象。</p>
<p><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</code></p>
<h3 id="2-删除模式"><a href="#2-删除模式" class="headerlink" title="2. 删除模式"></a>2. 删除模式</h3><p><code>DROP SCHEMA &lt;模式名&gt;&lt;CASCADE|RESTRICT&gt;</code></p>
<ul>
<li><code>CASCADE</code> 级联，表示在删除模式时把该模式中所有的数据库对象全部删除；</li>
<li><code>RESTRICT</code> 限制，表示如果该模式中定义了下属的数据库对象（如表或视图），则拒绝该删除语句的执行。</li>
</ul>
<h2 id="基本表的定义、删除与修改"><a href="#基本表的定义、删除与修改" class="headerlink" title="基本表的定义、删除与修改"></a>基本表的定义、删除与修改</h2><h3 id="1-定义基本表"><a href="#1-定义基本表" class="headerlink" title="1. 定义基本表"></a>1. 定义基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;</div><div class="line">    (&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]</div><div class="line">    [,&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]]</div><div class="line">    ...</div><div class="line">    [,&lt;表级完整性约束条件&gt;]);</div></pre></td></tr></table></figure>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>在 SQL 中域的概念用数据类型来实现。定义表的各个属性时需要指明其数据类型及长度。选择数据类型从两方面考虑，一是取值范围，二是要做哪些运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>CHAR(n)</code>,<code>CHARACTER(n)</code></td>
<td style="text-align:left">长度为 n 的定长字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>VARCHAR(n)</code>,<code>CHARACTERVARYING(n)</code></td>
<td style="text-align:left">最大长度为 n 的变长字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>CLOB</code></td>
<td style="text-align:left">字符串大对象</td>
</tr>
<tr>
<td style="text-align:left"><code>BLOB</code></td>
<td style="text-align:left">二进制大对象</td>
</tr>
<tr>
<td style="text-align:left"><code>INT</code>,<code>INTEGER</code></td>
<td style="text-align:left">长整数（4字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>SMALLINT</code></td>
<td style="text-align:left">短整数（2字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>BIGINT</code></td>
<td style="text-align:left">大整数（8字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>NUMERIC(p,d)</code></td>
<td style="text-align:left">定点数，由 p 位数字（不包括符号、小数点）组成，小数点后面有 d 位数字</td>
</tr>
<tr>
<td style="text-align:left"><code>DECIMAL(p,d)</code>,<code>DEC(p,d)</code></td>
<td style="text-align:left">同 NUMERIC</td>
</tr>
<tr>
<td style="text-align:left"><code>REAL</code></td>
<td style="text-align:left">取决于机器精度的单精度浮点数</td>
</tr>
<tr>
<td style="text-align:left"><code>DOUBLE PRECISION</code></td>
<td style="text-align:left">取决于机器精度的双精度浮点数</td>
</tr>
<tr>
<td style="text-align:left"><code>FLOAT(n)</code></td>
<td style="text-align:left">可选精度的浮点数，精度至少位 n 位数字</td>
</tr>
<tr>
<td style="text-align:left"><code>BOOLEAN</code></td>
<td style="text-align:left">逻辑布尔量</td>
</tr>
<tr>
<td style="text-align:left"><code>DATE</code></td>
<td style="text-align:left">日期，包含年、月、日，格式为 YYYY-MM-DD</td>
</tr>
<tr>
<td style="text-align:left"><code>TIME</code></td>
<td style="text-align:left">时间，包含一日的时、分、秒，格式为 HH:MM:SS</td>
</tr>
<tr>
<td style="text-align:left"><code>TIMESTAMP</code></td>
<td style="text-align:left">时间戳类型</td>
</tr>
<tr>
<td style="text-align:left"><code>INTERVAL</code></td>
<td style="text-align:left">时间间隔类型</td>
</tr>
</tbody>
</table>
<h3 id="3-模式与表"><a href="#3-模式与表" class="headerlink" title="3. 模式与表"></a>3. 模式与表</h3><p>三种方法定义基本表所属的模式：</p>
<ol>
<li>在表名中明显地给出模式名；</li>
<li>在创建模式语句中同时创建表；</li>
<li>设置所属的模式，这样在创建表时表名中不必给出模式名。</li>
</ol>
<p>显示当前搜索路径：<code>SHOW search_path</code>;<br>设置搜索路径：<code>SET search_path &lt;模式名&gt;,PUBLIC</code>;</p>
<h3 id="4-修改基本表"><a href="#4-修改基本表" class="headerlink" title="4. 修改基本表"></a>4. 修改基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt;</div><div class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] &lt;新列名&gt;&lt;数据类型&gt; [完整性约束]]</div><div class="line">[<span class="keyword">ADD</span> &lt;表级完整性约束&gt;]</div><div class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] &lt;列名&gt; [<span class="keyword">CASCADE</span>|RESTRICT]]</div><div class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> &lt;完整性约束&gt; [RESTRICT|<span class="keyword">CASCADE</span>]]</div><div class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> &lt;列名&gt;&lt;数据类型&gt;];</div></pre></td></tr></table></figure>
<h3 id="5-删除基本表"><a href="#5-删除基本表" class="headerlink" title="5. 删除基本表"></a>5. 删除基本表</h3><p><code>DROP TABLE &lt;表名&gt; [RESTRICT|CASCADE]</code></p>
<p>不同的数据库产品在遵循 SQL 标准的基础上具体实现细节和处理策略会与标准有差别。</p>
<h2 id="索引的建立与删除"><a href="#索引的建立与删除" class="headerlink" title="索引的建立与删除"></a>索引的建立与删除</h2><p>建立索引时加快查询速度的有效手段。索引是关系数据库管理系统的内部实现技术，属于内模式范畴。用户不必也不能显式地选择索引。</p>
<p>常见的数据库索引：</p>
<ul>
<li>顺序文件上的索引；</li>
<li>B+树索引</li>
<li>散列索引</li>
<li>位图索引</li>
</ul>
<h3 id="1-建立索引"><a href="#1-建立索引" class="headerlink" title="1. 建立索引"></a>1. 建立索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span> &lt;索引名&gt;</div><div class="line"><span class="keyword">ON</span> &lt;表名&gt;(&lt;列名&gt; [&lt;次序&gt;][,&lt;列名&gt; [&lt;次序&gt;]] ...);</div></pre></td></tr></table></figure>
<h3 id="2-修改索引"><a href="#2-修改索引" class="headerlink" title="2. 修改索引"></a>2. 修改索引</h3><p><code>ALTER INDEX &lt;旧索引名&gt;RENAME TO&lt;新索引名&gt;</code></p>
<h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3. 删除索引"></a>3. 删除索引</h3><p><code>DROP INDEX &lt;索引名&gt;</code></p>
<h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><blockquote>
<p>数据字典时关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息，包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行 SQL 的数据定义语句时，实际上就是在更新数据字典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</p>
</blockquote>
<hr>
<h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> [ALL|<span class="keyword">DISTINCT</span>] &lt;目标列表达式&gt; [,&lt;目标列表达式&gt;]...</div><div class="line"><span class="keyword">FROM</span> &lt;表名或视图名&gt; [,&lt;表名或视图名&gt;]|(&lt;<span class="keyword">SELECT</span> 语句&gt;)[<span class="keyword">AS</span>]&lt;别名&gt;</div><div class="line">[<span class="keyword">WHERE</span> &lt;条件表达式&gt;]</div><div class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;列名<span class="number">1</span>&gt; [<span class="keyword">HAVING</span> &lt;条件表达式&gt;]]</div><div class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;列名<span class="number">2</span>&gt; [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]];</div></pre></td></tr></table></figure>
<h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><ol>
<li>选择表中若干列</li>
<li>选择表中若干元组</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">查询条件</th>
<th style="text-align:left">谓词</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">比较</td>
<td style="text-align:left"><code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>!&gt;</code>, <code>!&lt;</code>; <code>NOT+上述比较运算符</code></td>
</tr>
<tr>
<td style="text-align:left">确定范围</td>
<td style="text-align:left"><code>BETWEEN AND</code>, <code>NOT BETWEEN AND</code></td>
</tr>
<tr>
<td style="text-align:left">确定集合</td>
<td style="text-align:left"><code>IN</code>, <code>NOT IN</code></td>
</tr>
<tr>
<td style="text-align:left">字符匹配</td>
<td style="text-align:left"><code>LIKE</code>, <code>NOT LIKE</code></td>
</tr>
<tr>
<td style="text-align:left">空值</td>
<td style="text-align:left"><code>IS NULL</code>, <code>IS NOT NULL</code></td>
</tr>
<tr>
<td style="text-align:left">多重条件（逻辑运算）</td>
<td style="text-align:left"><code>AND</code>, <code>OR</code>, <code>NOT</code></td>
</tr>
</tbody>
</table>
<ol>
<li><code>OBDER BY</code> 子句</li>
<li>聚集函数</li>
<li><code>GROUP BY</code> 子句</li>
</ol>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>连接查询：查询同时涉及两个以上的表。</p>
<ol>
<li>等值与非等值连接的查询</li>
<li>自身连接</li>
<li>外连接</li>
<li>多表连接</li>
</ol>
<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><blockquote>
<p>在 SQL 语言中，一个 <code>SELECT-FROM-WHERE</code> 语句称为一个查询块。将一个查询块嵌套再另一个查询块的 <code>WHERE</code> 子句或 <code>HAVING</code> 短语的条件中的查询称为嵌套查询。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Sname <span class="comment">/*外层查询或父查询*/</span></div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></div><div class="line">    (<span class="keyword">SELECT</span> Sno <span class="comment">/*内层查询或子查询*/</span></div><div class="line">    <span class="keyword">FROM</span> SC</div><div class="line">    <span class="keyword">WHERE</span> Cno=<span class="string">'2'</span>);</div></pre></td></tr></table></figure>
<ol>
<li>带有 <code>IN</code> 谓词的子查询</li>
<li>带有比较运算符的子查询</li>
<li>带有 <code>ANY (SOME)</code> 或 <code>ALL</code> 谓词的子查询</li>
<li>带有 <code>EXISTS</code> 谓词的子查询</li>
</ol>
<h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><blockquote>
<p>集合操作主要包括并操作 <code>UNION</code>、交操作 <code>INTERSECT</code> 和差操作 <code>EXCEPT</code>。参加集合操作的各查询结果的<strong>列数</strong>必须相同；对应项的<strong>数据类型</strong>也必须相同。</p>
</blockquote>
<h2 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h2><blockquote>
<p>子查询不仅可以出现在 <code>WHERE</code> 子句中，还可以出现再 <code>FROM</code> 子句中，这时子查询生成的临时派生表称为主查询的查询对象。</p>
</blockquote>
<hr>
<h1 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ol>
<li>插入元组</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span></div><div class="line"><span class="keyword">INTO</span> &lt;表名&gt; [(&lt;属性列 <span class="number">1</span>&gt; [, &lt;属性列 <span class="number">2</span>&gt;] ...)]</div><div class="line"><span class="keyword">VALUES</span> (&lt;常量 <span class="number">1</span>&gt; [,&lt;常量 <span class="number">2</span>&gt;]); <span class="comment">-- 字符串常量使用单引号括起来</span></div></pre></td></tr></table></figure>
<ol>
<li>插入子查询结果</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span></div><div class="line"><span class="keyword">INTO</span> &lt;表名&gt; [(&lt;属性列 <span class="number">1</span>&gt; [, &lt;属性列 <span class="number">2</span>&gt;] ...)]</div><div class="line">子查询;</div></pre></td></tr></table></figure>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> &lt;<span class="keyword">TABLE</span>&gt;</div><div class="line"><span class="keyword">SET</span> &lt;<span class="keyword">column</span>&gt;=&lt;expression&gt; [,&lt;<span class="keyword">column</span>&gt;=&lt;expression&gt;]</div><div class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;];</div></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span></div><div class="line"><span class="keyword">FROM</span> &lt;<span class="keyword">table</span>&gt;</div><div class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;];</div></pre></td></tr></table></figure>
<hr>
<h1 id="空值的处理"><a href="#空值的处理" class="headerlink" title="空值的处理"></a>空值的处理</h1><p>空值：不知道或者不存在或者无意义的值。</p>
<p>以下条件取空值：</p>
<ul>
<li>该属性应该有一个值，但目前不知道；</li>
<li>该属性不应该有值；</li>
<li>由于某种原因不便于填写。</li>
</ul>
<p>空值的判断：<code>IS NULL</code> <code>IS NOT NULL</code>。</p>
<hr>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p><code>CREATE VIEW</code><br><code>ALTER VIEW</code><br><code>DROP VIEW</code><br><code>SHOW VIEW</code></p>
<h2 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h2><ul>
<li>简化用户操作</li>
<li>使用户以多种角度看待同一数据</li>
<li>对重构数据库提供了一定程度的逻辑独立性</li>
<li>对机密数据提供安全保护</li>
<li>适当利用视图可以更清晰地表达查询</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《数据库系统概论》第三章笔记。&lt;/p&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;SQL-历史&quot;&gt;&lt;a href=&quot;#SQL-历史&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="数据库系统" scheme="//lix90.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="数据库系统" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="SQL" scheme="//lix90.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>R 向量化运算</title>
    <link href="//lix90.github.io/2016/09/13/2016-09-13-r-apply-family/"/>
    <id>//lix90.github.io/2016/09/13/2016-09-13-r-apply-family/</id>
    <published>2016-09-13T14:50:21.000Z</published>
    <updated>2016-11-13T02:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Updated in 2016-11-12</p>
</blockquote>
<p>学习 <code>sapply</code> <code>lapply</code> <code>apply</code> <code>tapply</code> <code>by</code> <code>aggregate</code> 等向量化运算函数的笔记。</p>
<h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a><code>apply</code></h1><p>当输入数据为矩阵或数组时使用，如果输入数据为 <code>data.frame</code>，则不建议使用。</p>
<p><code>apply(X, MARGIN, FUN, ...)</code></p>
<ul>
<li><code>X</code> 数组或矩阵</li>
<li><code>MARGIN</code> 指定 <code>FUN</code> 作用的由下标组成的向量。若 <code>X</code> 为矩阵，1 表示行，2 表示列。<code>c(1,2)</code> 表示行和列。如果 <code>X</code> 包含 <code>dimnames</code>，那么也可以为字符向量。</li>
<li><code>FUN</code> 使用的函数</li>
</ul>
<p>如果需要在行或者列上求均值和求和，则建议使用 <code>colMeans</code> <code>rowMeans</code> <code>colSums</code> <code>rowSums</code>。</p>
<h1 id="tapply"><a href="#tapply" class="headerlink" title="tapply"></a><code>tapply</code></h1><p>需要对向量按组或者因素水平计算，类似于 <code>split-apply-combine</code>。</p>
<h1 id="by"><a href="#by" class="headerlink" title="by"></a><code>by</code></h1><p>可替代 <code>tapply</code>，在无法使用 <code>tapply</code> 的情况下仍然可用。</p>
<p><a href="http://stackoverflow.com/a/32262439/6469987" target="_blank" rel="external">参考</a></p>
<h1 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a><code>aggregate</code></h1><p>跟 <code>tapply</code> 类似，不同的是，<code>aggregate</code> 的第二个参数必须为 list，输出为 data.frame。<code>aggregate</code> 的参数还可以为 formula。需要主要的是 <code>aggregate</code> 的 formula 方法默认 <code>na.action = na.omit</code>，所以需要手动设置参数 <code>na.rm = TRUE</code>。</p>
<h1 id="lapply"><a href="#lapply" class="headerlink" title="lapply"></a><code>lapply</code></h1><p>输入和输出都为 list。其他 <code>*apply</code> 函数底层都是调用 <code>lapply</code> 函数。</p>
<p><code>lapply(X, FUN, ...)</code></p>
<p>返回与 <code>X</code> 等长度的 list，每个元素是由 <code>X</code> 中的元素经过 <code>FUN</code> 计算得到。</p>
<h1 id="sapply"><a href="#sapply" class="headerlink" title="sapply"></a><code>sapply</code></h1><p>输入为 list，但输出为 vector。</p>
<p><code>sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)</code></p>
<p>比 <code>lapply</code> 更友好，虽然默认返回 vector，matrix，但是如果增加 <code>simplify = &quot;array&quot;</code> 的参数，将返回 array。<code>sapply(x, f, simplify=FALSE, USE.NAMES = FALSE)</code> 等同于 <code>lapply(x, f)</code>。</p>
<h1 id="vapply"><a href="#vapply" class="headerlink" title="vapply"></a><code>vapply</code></h1><p><code>vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)</code></p>
<p>类似与 <code>sapply</code>，但是返回值的类型是事先确定。</p>
<h1 id="replicate"><a href="#replicate" class="headerlink" title="replicate"></a><code>replicate</code></h1><p>重复地执行表达式。</p>
<h1 id="其他相关函数"><a href="#其他相关函数" class="headerlink" title="其他相关函数"></a>其他相关函数</h1><p><code>outer</code> <code>ave</code> <code>eapply</code></p>
<h1 id="比较好的总结"><a href="#比较好的总结" class="headerlink" title="比较好的总结"></a>比较好的总结</h1><blockquote>
<ul>
<li><strong>lapply</strong> is a list apply which acts on a list or vector and returns a list.</li>
<li><strong>sapply</strong> is a simple lapply (function defaults to returning a vector or matrix when possible)</li>
<li><strong>vapply</strong> is a verified apply (allows the return object type to be prespecified)</li>
<li><strong>rapply</strong> is a recursive apply for nested lists, i.e. lists within lists</li>
<li><strong>tapply</strong> is a tagged apply where the tags identify the subsets</li>
<li><strong>apply</strong> is generic: applies a function to a matrix’s rows or columns (or, more generally, to dimensions of an array)</li>
</ul>
</blockquote>
<p><a href="http://stackoverflow.com/a/23282110/6469987" target="_blank" rel="external">参考</a></p>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3505701/r-grouping-functions-sapply-vs-lapply-vs-apply-vs-tapply-vs-by-vs-aggrega" target="_blank" rel="external">R Grouping functions: sapply vs. lapply vs. apply. vs. tapply vs. by vs. aggregate</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Updated in 2016-11-12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习 &lt;code&gt;sapply&lt;/code&gt; &lt;code&gt;lapply&lt;/code&gt; &lt;code&gt;apply&lt;/code&gt; &lt;code&gt;tapply&lt;/code&gt;
    
    </summary>
    
      <category term="R" scheme="//lix90.github.io/categories/R/"/>
    
    
      <category term="R" scheme="//lix90.github.io/tags/R/"/>
    
      <category term="数据分析" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装与配置（MacOS）</title>
    <link href="//lix90.github.io/2016/09/13/2016-09-13-mysql-config/"/>
    <id>//lix90.github.io/2016/09/13/2016-09-13-mysql-config/</id>
    <published>2016-09-13T12:59:16.000Z</published>
    <updated>2016-10-28T02:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载-MySQL"><a href="#下载-MySQL" class="headerlink" title="下载 MySQL"></a>下载 MySQL</h1><p>从<a href="http://www.mysql.com/downloads/" target="_blank" rel="external">官方网站</a>下载 <code>MySQL Community Server</code>。</p>
<h1 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h1><p>在网上教程发现提到这三个文件</p>
<ol>
<li>mysql-*.pkg：MySql的主要程序包</li>
<li>MySQL_StartupItem.pkg：MySql的启动项</li>
<li>MySQL.prefPane：MySQL的偏好设置，主要用来启动MySQL服务</li>
</ol>
<p>但是打开 dmg 文件，仅仅发现一个 mysql-<version>.pkg 文件</version></p>
<h1 id="安装-MySQL-Workbench（GUI-Tool）"><a href="#安装-MySQL-Workbench（GUI-Tool）" class="headerlink" title="安装 MySQL Workbench（GUI Tool）"></a>安装 MySQL Workbench（GUI Tool）</h1><p>仍然从官网下载。下载后安装然后进行配置。</p>
<p>数据库访问密码的设置</p>
<blockquote>
<p>MySQL的默认账号密码是root/root，正常情况下我们如果单纯的只是使用MySQL Workbench来管理数据库的这个账号是可以的，但是当我们在编程代码中通过jdbc来访问MySQL时我们就会发现使用这个账号是不行，无法访问，因为MySQL需要我们更改密码，也就是说root这个是个默认的密码也就是弱密码，需要我们修改之后才能在代码中使用。</p>
</blockquote>
<h1 id="添加到-PATH"><a href="#添加到-PATH" class="headerlink" title="添加到 PATH"></a>添加到 <strong>PATH</strong></h1><p>将 <code>/usr/local/mysql/bin</code> 添加到 <code>PATH</code> 中<br>编辑 <code>.bash_profile</code> 加入 <code>export PATH=$PATH:/usr/local/mysql/bin</code></p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>查询 MySQL 版本是 <code>mysql -v</code> 报错：<br><code>Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39;</code></p>
<p>网上寻找教程，发现有解决办法是对 <code>mysql.sock</code> 建立符号链接。但是在 Mac 上并未找到这个文件。</p>
<p><del>寻找 <code>mysql.sock</code> 文件：<code>find / -name &quot;mysql.sock&quot;</code> 得到 <code>/var/lib/mysql/mysql.sock</code><br>那么建立 <code>symbolic link</code>：<code>ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock</code></del></p>
<p>后来发现，这个报错是因为 <code>MySQL Server</code> 没有运行。于是打开 <code>MySQL.prefPane</code>，打开 <code>MySQL Server</code>。</p>
<p>又出现另外的报错 <code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code>。</p>
<p>检索相关问题发现导致这个报错的原因有以下三种：</p>
<ol>
<li>客户端远程访问的用户帐号并未创建；</li>
<li>用户帐号存在，但未对其所在的客户端的 IP 进行远程访问授权允许；</li>
<li>用户帐号授权访问的密码不正确。</li>
</ol>
<p>看到前面安装 GUI 工具的部分说到，必须重新设置账户密码，root 的密码为弱密码。</p>
<p>MySQL 还有个配置文件 <code>my.cnf</code>，里面可以设置帐号密码。</p>
<p><strong>最后发现</strong>，原来在安装 MySQL 时，弹出来一个临时密码的提醒，这个密码用于第一次登录 MySQL，并修改密码。现在终于想起来那个临时密码，但是已经忘了有没有保存。因为自己挖的坑，折腾了很久。</p>
<p>于是为了图方便，先把 MySQL 完全卸载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># first stop the database server</div><div class="line">sudo rm /usr/local/mysql</div><div class="line">sudo rm -rf /usr/local/mysql*</div><div class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</div><div class="line">sudo rm -rf /Library/PreferencePanes/My*</div><div class="line"># edit /etc/hostconfig and remove the line MYSQLCOM=-YES-</div><div class="line">rm -rf ~/Library/PreferencePanes/My*</div><div class="line">sudo rm -rf /Library/Receipts/mysql*</div><div class="line">sudo rm -rf /Library/Receipts/MySQL*</div><div class="line">sudo rm -rf /private/var/db/receipts/*mysql*</div><div class="line">sudo rm -rf /var/db/receipts/com.mysql.*</div></pre></td></tr></table></figure>
<p>然后再重新安装 MySQL。</p>
<p>这次长记性保存了临时密码。</p>
<p>接下来重新配置 MySQL。</p>
<p>修改根用户密码：<code>mysqldmin -u root -p password</code><br>提示输入旧密码，然后输入新密码，最后确认新密码。然后会得到以下提示：</p>
<blockquote>
<p>Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</p>
</blockquote>
<p>通过新修改的密码登录 MySQL：<code>mysql -u root -p</code>，提示输入密码，终于成功登录。</p>
<p>吸取教训，<strong>一定不要完全按照网上的教程来安装配置应用程序，尽量根据官网文档</strong>。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://www.cnblogs.com/macro-cheng/archive/2011/10/25/mysql-001.html" target="_blank" rel="external">MAC下安装与配置MySQL</a></li>
<li><a href="http://blog.csdn.net/zzq900503/article/details/14163341" target="_blank" rel="external">Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</a></li>
<li><a href="https://segmentfault.com/q/1010000000094608" target="_blank" rel="external">Mac上MySQL报错</a></li>
<li><a href="http://obscuredclarity.blogspot.in/2009/08/install-mysql-on-mac-os-x.html" target="_blank" rel="external">Install MySQL on Mac OS X</a></li>
<li><a href="http://blog.csdn.net/lioncode/article/details/7917310" target="_blank" rel="external">连接MySQL数据库时常见故障问题的分析与解决</a></li>
<li><a href="http://stackoverflow.com/questions/1436425/how-do-you-uninstall-mysql-from-mac-os-x" target="_blank" rel="external">How do you uninstall MySQL from Mac OS X?</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/osx-installation-pkg.html" target="_blank" rel="external">Installing MySQL on OS X Using Native Packages</a></li>
<li><a href="http://community.jaspersoft.com/wiki/uninstall-mysql-mac-os-x" target="_blank" rel="external">Uninstall MySql on a Mac OS X</a></li>
<li><a href="https://www.howtoforge.com/setting-changing-resetting-mysql-root-passwords" target="_blank" rel="external">Setting, Changing And Resetting MySQL Root Passwords</a></li>
<li><a href="http://stackoverflow.com/questions/33387879/mysql-password-expired-cant-connect" target="_blank" rel="external">Mysql password expired. Can’t connect</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载-MySQL&quot;&gt;&lt;a href=&quot;#下载-MySQL&quot; class=&quot;headerlink&quot; title=&quot;下载 MySQL&quot;&gt;&lt;/a&gt;下载 MySQL&lt;/h1&gt;&lt;p&gt;从&lt;a href=&quot;http://www.mysql.com/downloads/&quot; tar
    
    </summary>
    
      <category term="MySQL" scheme="//lix90.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="//lix90.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="关系型数据库" scheme="//lix90.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="配置" scheme="//lix90.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据冗余</title>
    <link href="//lix90.github.io/2016/09/11/2016-09-11-data-redundency/"/>
    <id>//lix90.github.io/2016/09/11/2016-09-11-data-redundency/</id>
    <published>2016-09-11T11:54:11.000Z</published>
    <updated>2016-10-28T02:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据冗余"><a href="#数据冗余" class="headerlink" title="数据冗余"></a>数据冗余</h1><h2 id="什么是数据冗余？"><a href="#什么是数据冗余？" class="headerlink" title="什么是数据冗余？"></a>什么是数据冗余？</h2><p><code>数据冗余</code> 是指<strong>同一个数据</strong>在系统中<strong>多次重复</strong>出现。</p>
<p>数据库系统仅仅降低了数据冗余，仍然存在数据冗余问题。消除数据冗余的目的是为了避免更新时可能出现的问题，以便<strong>保持数据的一致性</strong>。</p>
<p>Q: 数据冗余会造成什么影响和后果？</p>
<h2 id="数据冗余的类型"><a href="#数据冗余的类型" class="headerlink" title="数据冗余的类型"></a>数据冗余的类型</h2><ul>
<li>空间冗余</li>
<li>时间冗余</li>
<li>结构冗余</li>
<li>知识冗余</li>
<li>视觉冗余</li>
<li>信息熵冗余</li>
</ul>
<p>Q：数据冗余与文件压缩有什么样的关系？</p>
<h2 id="什么时候增加数据冗余？"><a href="#什么时候增加数据冗余？" class="headerlink" title="什么时候增加数据冗余？"></a>什么时候增加数据冗余？</h2><p>虽然一般情况下，应尽量减少数据冗余，保证数据的一致性，但在某些情况下，也需要适当增加数据冗余度。数据冗余或者信息冗余是生产、生活所必然存在的行为，没有好与坏的总体倾向。</p>
<ul>
<li>重复存储或传输数据以<strong>防止数据丢失</strong>；</li>
<li>对数据进行冗余性的编码来防止数据的丢失、错误，并提供<strong>对错误数据进行反变换</strong>得到原始数据的功能；</li>
<li>为方便处理和使同一信息在不同地点有<strong>不同的表现形式</strong>；</li>
<li>为了提高数据的<strong>检索速度</strong>。</li>
</ul>
<hr>
<p>参考资料：</p>
<ul>
<li>wiki.mbalib.com/wiki/数据冗余</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据冗余&quot;&gt;&lt;a href=&quot;#数据冗余&quot; class=&quot;headerlink&quot; title=&quot;数据冗余&quot;&gt;&lt;/a&gt;数据冗余&lt;/h1&gt;&lt;h2 id=&quot;什么是数据冗余？&quot;&gt;&lt;a href=&quot;#什么是数据冗余？&quot; class=&quot;headerlink&quot; title=&quot;什
    
    </summary>
    
      <category term="数据库系统" scheme="//lix90.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="数据库系统" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据冗余" scheme="//lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99/"/>
    
  </entry>
  
</feed>
