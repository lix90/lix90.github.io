<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lix is Blogging</title>
  <subtitle>菜鸟笔记，原创不多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lix90.github.io/"/>
  <updated>2016-12-14T10:04:23.000Z</updated>
  <id>http://lix90.github.io/</id>
  
  <author>
    <name>Lix</name>
    <email>xiangli90@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谷歌学术文献检索技巧</title>
    <link href="http://lix90.github.io/2016/12/14/2016-12-14-google-scholar/"/>
    <id>http://lix90.github.io/2016/12/14/2016-12-14-google-scholar/</id>
    <published>2016-12-13T16:00:00.000Z</published>
    <updated>2016-12-14T10:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Google Scholar 谷歌学术文献检索技巧</h1>
<p>这是我个人总结的谷歌学术检索文献的技巧，用于实验室内部分享。</p>
<h2 id="谷歌学术适合什么样的文献检索需求？">谷歌学术适合什么样的文献检索需求？</h2>
<ul>
<li>部分全文获取</li>
<li>初步或探索性地查询相关领域文献</li>
<li>查询作者/研究者的相关文献</li>
<li>快速查找少量相关文献</li>
<li>查找文献被引频次：也包含peer-reviewed以外的文献的引用</li>
<li>查找一篇文献有关联的文章</li>
<li>订阅研究者的新文献</li>
<li>…</li>
</ul>
<h2 id="谷歌学术不适合什么样的文献检索？">谷歌学术不适合什么样的文献检索？</h2>
<ul>
<li>进行系统地文献检索：例如写元分析和综述时所需要的文献检索</li>
<li>根据机构检索文献</li>
<li>一部分未公开的文献的全文</li>
<li>对引文查询结果进行统计分析</li>
<li>…</li>
</ul>
<h2 id="如何确定关键词">如何确定关键词</h2>
<p>检索用到的关键词一般为实词。为了提高检索效率，在检索前必须确定明确的关键词，请勿直接使用“句子”进行检索。在确定关键词前，请考虑同义词和词性的问题。虽然谷歌学术会帮你拓展同义词和词性，但是在头脑中形成这样的信息检索思路有助于你获取信息。</p>
<h2 id="普通检索">普通检索</h2>
<p>普通的检索直接输入关键词就可以了。这种检索比较简单，适合探索性地检索，即没有特定的目的，仅仅粗略地获取信息。但是，通过这种检索方式获取信息较为低效。建议使用限定词和检索符进行检索。</p>
<h2 id="高级检索">高级检索</h2>
<ul>
<li>时间：年份，年份范围</li>
<li>排序：相关性和日期排序</li>
<li>标题</li>
<li>作者</li>
<li>期刊</li>
</ul>
<h2 id="如何定位作者？">如何定位作者？</h2>
<ul>
<li>英文文献使用拉丁字母，中文文献使用中文</li>
<li>可以使用全称，也可以使用简称，全称更准确，简称较模糊</li>
<li>添加限定词：<code>author:</code></li>
<li>使用双引号（英文半角引号）包括姓名：<code>author:&quot;james gross&quot;</code> 或者简称 <code>author:&quot;j gross&quot;</code></li>
<li>或者手动使用搜索选项：搜索框右侧倒三角形按钮</li>
</ul>
<h2 id="如何限定标题？">如何限定标题？</h2>
<ul>
<li>使用限定词：<code>intitle:</code> 只搜索标题中出现关键字的条目</li>
<li>使用双引号：<code>intitle:&quot;emotion regulation&quot;</code></li>
</ul>
<h2 id="如何限定期刊？">如何限定期刊？</h2>
<p>谷歌学术没有针对期刊的限定词，但是可以在高级搜索框中在期刊输入框中输入对应的期刊进行检索。需要检索多个期刊时使用双引号包裹期刊名，使用 <code>OR</code> 逻辑符来分隔多个由双引号包裹的期刊名。例如：<code>&quot;emotion&quot; OR &quot;cognition &amp; emotion&quot;</code>。或者直接搜索框中输入 <code>(&quot;emotion&quot; OR &quot;cognition &amp; emotion&quot;)</code>，记得用括号包裹为一个整体。</p>
<h2 id="如何限定年份">如何限定年份</h2>
<ul>
<li>直接通过左边栏的年份选项去选择。</li>
<li>在搜索框输入年份检索（不推荐）。</li>
</ul>
<h2 id="如何检索多个并列的关键词">如何检索多个并列的关键词</h2>
<p>使用 <code>OR</code> <code>()</code> <code>&quot; &quot;</code> 来构建多个并列检索词，例如：<code>(emotion OR mood OR affect)</code>。其实这个时候并不需要 <code>()</code> 来进行包括，也同样有效。</p>
<h2 id="如何使用-and-逻辑符">如何使用 AND 逻辑符</h2>
<p>通过 <code>AND</code> 可以设定必须出现的关键词，加上 <code>OR</code> 就可以进行更为强大的检索。例如：<code>(emotion OR mood OR affect) AND (erp OR eeg OR meg OR fmri OR &quot;functional MRI&quot;)</code>。</p>
<h2 id="如何限定支持全文获取的文献">如何限定支持全文获取的文献</h2>
<ul>
<li>如果条目右侧没有出现 <code>pdf</code> 字样，不要认为就没有全文链接。点击进入 <code>所有 n 个版本</code> 链接查看是否有全文链接。</li>
<li>仅限定可获取全文的条目：使用限定词 <code>filetype:pdf</code>。例如：<code>emotion filetype:pdf</code>。</li>
</ul>
<h1>最后来一个更复杂的例子</h1>
<p><code>filetype:pdf 2015 (&quot;emotion&quot; OR &quot;emotion review&quot; OR &quot;cognition and emotion&quot; OR &quot;motivation and emotion&quot;) (&quot;emotion regulation&quot; OR &quot;emotion control&quot; OR &quot;cognitive reappraisal&quot; OR &quot;emotion suppression&quot;) AND (&quot;erp&quot; OR &quot;eeg&quot; OR &quot;meg&quot; OR &quot;fmri&quot; OR &quot;functional MRI&quot; OR &quot;electroencephalography&quot; OR &quot;event related potential&quot; OR &quot;magnetoencephalography&quot;)</code></p>
<p>说明：获取特定情绪有关的期刊在2015年的文中所有地方出现相关关键词的全文条目。</p>
<p>欢迎分享与转载，但请注明出处 :)</p>
]]></content>
    
    <summary type="html">
    
      个人总结的谷歌学术文献检索技巧。
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="google scholar" scheme="http://lix90.github.io/tags/google-scholar/"/>
    
      <category term="文献检索" scheme="http://lix90.github.io/tags/%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2/"/>
    
      <category term="labs" scheme="http://lix90.github.io/tags/labs/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-09</title>
    <link href="http://lix90.github.io/2016/12/09/2016-12-09-daily/"/>
    <id>http://lix90.github.io/2016/12/09/2016-12-09-daily/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2016-12-09T14:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1>翻译</h1>
<h2 id="random-effects-structure-for-confirmatory-hypothesis-testing">Random effects structure for confirmatory hypothesis testing<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>##</h2>
<blockquote>
<p>Linear mixed-effects models (LMEMs) have become increasingly prominent in psycholinguistics and related areas. However, many researchers do not seem to appreciate how random effects structures affect the generalizability of an analysis. Here, we argue that researchers using LMEMs for confirmatory hypothesis testing should minimally adhere to the standards that have been in place for many decades. Through theoretical arguments and Monte Carlo simulation, we show that LMEMs generalize best when they include the maximal random effects structure justified by the design. The generalization performance of LMEMs including data-driven random effects structures strongly depends upon modeling criteria and sample size, yielding reasonable results on moderately-sized samples when conservative criteria are used, but with little or no power advantage over maximal models. Finally, random-intercepts-only LMEMs used on within-subjects and/or within-items data from populations where subjects and/or items vary in their sensitivity to experimental manipulations always generalize worse than separate $F_1$ and $F_2$ tests, and in many cases, even worse than $F_1$ alone. Maximal LMEMs should be the ‘gold standard’ for confirmatory hypothesis testing in psycholinguistics and beyond.</p>
</blockquote>
<p>译：线性混合效益模型（LMEMs）在心理语言学以及其相关领域变得日益重要。然而，许多研究者看起来并未充分理解随机效应结构（random effect structure）如何影响分析的可推广度。在本篇文章中，我们认为在使用 LMEMs 来进行验证性的假设检验时应该最低程度地遵循几十年的标准（传统的分析方法存在缺陷）。通过理论论证和蒙特卡洛模拟，我们发现，当最大限度地包含被实验设计验证过的随机效应结构时，LMEMs 具有最佳的推广度。包含数据驱动的随机效应结构的 LMEMs 的推广度表现对建模标准以及样本量有很强的依赖。当使用了保守的标准时，中等大小的样本量具有合理的结果，但是相比最大化模型（maximal models）并无统计检验力（power）的优势。最后，使用来自对实验操纵的敏感性存在变异的被试与/或项目的总体的被试内与/或项目内（within-items）数据的仅随机截距的 LMEMs，总是比分别进行 $F_1$ 与 $F_2$ 检验的推广度要差，并且在许多案例中，甚至比单独的 $F_1$ 检验要差。最大化的 LMEMs 应该作为心理语言学以及其它领域内进行验证性假设检验的黄金标准。</p>
<p>Linear mixed-effects models (LMEMs):</p>
<blockquote>
<p>when fixed effects, random effects, and trial-level noise contribute linearly to the dependent variable, and random effects and trial-level error are both normally distributed and independent for differing clusters or tri- als, it is a linear mixed-effects model (LMEM).</p>
</blockquote>
<p>Random effect structure:</p>
<blockquote>
<p>the random effect structure one uses in an analysis encodes the assumptions that one makes about <strong>how sampling units (subjects and items) vary, and the structure of dependency that this variation creates in one’s data.</strong></p>
</blockquote>
<p>Confirmatory hypothesis TESTING:</p>
<blockquote>
<p>By confirmatory hypothesis testing we mean the situation in which the researcher has identified a specific set of theory-critical hypotheses in advance and attempts to measure the evidence for or against them as accurately as pos- sible</p>
</blockquote>
<h2 id="web-server">Web server<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2>
<blockquote>
<p>The primary function of a web server is to store, process and deliver web pages to clients. The communication between client and server takes place using the Hypertext Transfer Protocol (HTTP). Pages delivered are most frequently HTML documents, which may include images, style sheets and scripts in addition to text content.</p>
</blockquote>
<p>网站服务器的主要功能是存储，处理，和传输网页至客户端。客户端和服务器之间的通信是通过超文本传输协议（HTTP）来进行。服务器所传输的页面主要是 HTML 文档，除了文本内容之外，还包含了图片，样式表，以及脚本文件。</p>
<blockquote>
<p>A user agent, commonly a web browser or web crawler, initiates communication by making a request for a specific resource using HTTP and the server responds with the content of that resource or an error message if unable to do so. The resource is typically a real file on the server’s secondary storage, but this is not necessarily the case and depends on how the web server is implemented.</p>
</blockquote>
<p>用户代理软件，通常为网页浏览器或者网页爬虫，通过实用 HTTP 来提交一次对特定资源的请求来与服务器建立通信。服务器返回浏览器请求的资源作为响应，如果无法实现请求那么就返回错误信息。所请求的资源一般是服务器的二级存储中的真实的文件。不过并不必如此，这与网站服务器如何部署有关。</p>
<blockquote>
<p>While the primary function is to serve content, a full implementation of HTTP also includes ways of receiving content from clients. This feature is used for submitting web forms, including uploading of files.</p>
</blockquote>
<p>虽然主要功能是提供内容，HTTP 的完整实现过程还包含了从客户端接收内容。这一功能用于提交网页表单，包括上传文件。</p>
<blockquote>
<p>Many generic web servers also support server-side scripting using Active Server Pages (ASP), PHP, or other scripting languages. This means that the behaviour of the web server can be scripted in separate files, while the actual server software remains unchanged. Usually, this function is used to generate HTML documents dynamically (“on-the-fly”) as opposed to returning static documents. The former is primarily used for retrieving and/or modifying information from databases. The latter is typically much faster and more easily cached but cannot deliver dynamic content.</p>
</blockquote>
<p>许多范用型网站服务器同样支持服务器端的脚本，这可以通过使用 ASP, PHP, 或其它脚本语言实现。这意味着，网站服务器的行为编写到不同的脚本文件中，与此同时，实际的服务器软件保持不变。通常，这项功能用于动态地生成 HTML 文档，这与返回静态文档相反。前者主要用于接收和/或修改从数据库获取的信息。后者虽然更快且比较容易缓存，但是无法传输动态内容。</p>
<blockquote>
<p>Web servers are not only used for serving the World Wide Web. They can also be found embedded in devices such as printers, routers, webcams and serving only a local network. The web server may then be used as a part of a system for monitoring or administering the device in question. This usually means that no additional software has to be installed on the client computer, since only a web browser is required (which now is included with most operating systems).</p>
</blockquote>
<p>网站服务器不仅仅服务于万维网（World Wide Web）。我们同样可以在其他设备例如打印机、路由器、摄像头中发现嵌入的网站服务器，以及仅仅用于局域网的网站服务器。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Barr, D. J., Levy, R., Scheepers, C., &amp; Tily, H. J. (2013). Random effects structure for confirmatory hypothesis testing: Keep it maximal. Journal of memory and language, 68(3), 255-278. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>维基百科 <a href="https://en.wikipedia.org/wiki/Web_server" target="_blank" rel="external">https://en.wikipedia.org/wiki/Web_server</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      线性混合模型的一篇高引用量的摘要翻译。&lt;br&gt;了解 web 服务器。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-08</title>
    <link href="http://lix90.github.io/2016/12/08/2016-12-08-daily/"/>
    <id>http://lix90.github.io/2016/12/08/2016-12-08-daily/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-10T16:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Make contrasts in R<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h1>
<p>两种应用 contrasts 的方式：</p>
<ul>
<li>添加 contrasts 到 data.frame 中，那么只要用到 data.frame 来构建模型，contrasts 将每次都将被使用。</li>
<li>添加 contrasts 到 model 中，那么在检验模型时就会使用到它的 contrasts。</li>
</ul>
<blockquote>
<p>By default, R uses traditional dummy coding (called “treatment contrasts” in R) for any non- ordered factors, and polynomial trend contrasts for any ordered factors. That works out well if you intend to look at regression coefficients.</p>
</blockquote>
<p>R 中默认的 contrasts 为非等级因子使用 treatment contrasts，等级因子使用 polynomial trend contrasts。这在为了考察回归系数时有效。</p>
<blockquote>
<p>Note that traditional dummy coding is fine for regression coefficients, but since traditional dummy codes aren’t orthogonal, it messes things up when you’re just trying to partition variance (i.e. an ANOVA). (Also remember that the default R anova functions use type 1 sums of squares, which is generally not what you want. To get type 3 sums of squares, use the Anova() function from the car package.)</p>
</blockquote>
<p>但是，默认的 contrasts 并不适用于需要分解方差时，即方差分析。另外，R 的方差分析函数 <code>aov</code> 使用 Type-I 平方和，而一般来说，常用 Type-III 平方和。<code>car::Anova()</code> <code>ez::ezANOVA()</code> <code>afex::aov_ez()</code> 等均支持 Type-III 平方和。</p>
<blockquote>
<p>R is still using traditional dummy coding (treatment contrasts) behind the scenes here, unlike other stats software (like SPSS) that would switch to effects coding for an ANOVA.</p>
<p>For an ANOVA, you should set your factors to use effects coding, rather than relying on the default treatment codes. You can do that with the <code>contr.sum()</code> function.</p>
<p>As long as they’re orthogonal, they’ll work fine in an ANOVA.</p>
<p>For ANOVAs, effects coding works great, orthogonal contrast coding works great, and traditional dummy coding not so much.</p>
</blockquote>
<p>如果进行方差分析，必须在进行分析之前将 contrasts 给改为 effects coding 或 orthogonal contrast coding。</p>
<blockquote>
<p>Anova() won’t show you the individual contrast results, just the overall effect of each factor. You can see the results of each contrast by using the summary() function on the model object.</p>
</blockquote>
<p>使用 <code>car::Anova()</code> 并不会显示出每个独立的比较，而仅仅显示出每个因子的总效应。可以把模型对象传入函数 <code>summary(modobj)</code>，这样就能显示出每个独立的比较的结果。</p>
<blockquote>
<p>If you use aov() instead of lm() to specify the original model, then you’ll need to add a split argument to the summary() call to see the contrast results.</p>
</blockquote>
<p>如果使用 <code>aov()</code> 建立模型，而不是 <code>lm()</code>，传入 <code>split</code> 参数到 <code>summary()</code> 才能看到比较的结果。<code>summary(..., split = list(var = list(...), ...))</code>。其中，split 参数中也可以不包含所有变量的所有水平。</p>
<blockquote>
<p>You need to be careful, though, because the contrasts() function is a sneaky little bastard, as noted above. To apply contrast weights, you’ll need to give it the inverse of your matrix of weights.</p>
</blockquote>
<p>在构建自定义的比较时，需要谨慎，因为 <code>contrasts()</code> 函数有一些小技巧，特别时当应用 contrast 权重时，需要对 contasts 矩阵进行求逆运算。</p>
<p>以下为构建自定义比较的步骤：</p>
<ol>
<li>Specfiy the weights for your contrasts (and be sure to check the order of the levels of the factor, so your weights will line up properly). 首先指定 contrasts 的权重。</li>
<li>Create a temporary matrix with each contrast as one row. The top row (for the constant) should be 1/j for j groups. 构建临时的矩阵，第一列每个元素为 1/j，如果 j 为水平数。使用 <code>rbind</code> 构建临时矩阵。</li>
<li>Get the inverse of that temporary matrix. 使用 <code>solve</code> 函数对临时矩阵求逆。</li>
<li>The first column of the inverse will be all 1’s. Drop that first column. The remaining columns are your contrast matrix. 求逆后的矩阵第一列每一个元素都为1，删除第一列，剩余的列即为最终的 contrast 矩阵。然后就可以在建立模型时传入 contrasts 参数 <code>contrasts = list(...)</code>。</li>
</ol>
<blockquote>
<p>If you specify orthogonal contrasts, the regression coefficients for each contrast should just equal the difference between those group means.</p>
</blockquote>
<p>如果指定的 contrasts 为 orthogonal，每个比较的回归系数应该等于比较的组的均值的差值。</p>
<blockquote>
<p>So what happens if you try to run your own contrasts without doing the weird inverse thing? It depends. If your contrasts are orthogonal, then the t-tests and p-values you get for the regression coefficients will all be fine, but your contrast estimates (and corresponding SEs) might not match the difference between group means you expected. If your contrasts are nonorthogonal, then failing to do the weird inverse thing can result in totally garbage estimates and useless t-tests. So you MUST do this inverse thing if you specify nonorthogonal contrasts, but you should probably get in the habbit of doing it anyway for orthogonal ones as well.</p>
</blockquote>
<p>不进行矩阵求逆会出现什么结果呢？如果 contrasts 为正交的，那么对回归系数检验的 t 值和 p 值时没有问题的，但是 contrast estimate 以及对应的标准误可能不等于比较的组的均值的差值。如果 contrasts 不是正交的，那么所得到的结果是无效的。所以，最好是对所有 contasts 权重矩阵进行求逆。</p>
<blockquote>
<p>you can get j-1 orthogonal contrasts out of a factor with j levels.</p>
<p>Yep. If you want to save time and only specify the contrast(s) you care about, you can do that, and R will come up with some orthogonal contrasts to fill in the rest. What you won’t be able to do is take the inverse of your contrast weights; you can only take the inverse of a square matrix, and if you have fewer than j-1 contrasts, your temporary matrix won’t be square. But remember: as long as your contrasts are orthogonal, your t-tests will all be fine even if you don’t do the inverse thing. So go ahead and just use the contrasts you want directly with the contrasts() function, and be aware that your contrast estimates may not accurately reflect the differences between group means.</p>
</blockquote>
<p>如果进行的比较次数少于 j-1，那么 R 会自动地计算出剩余的正交 contrasts。只不过，此时无法进行矩阵逆运算。不过只要 contrasts 是正交的，那么就不用担心检验的结果。需要考虑的是，contrast estimates 将可能不等于比较的组均值的差值。</p>
<blockquote>
<p>Note that if you add fewer than j-1 contrasts to the contrasts argument in lm(), it will NOT fill out the remaining contrasts for you. Rather, any group differences other than those represented in your contrast will get lumped into the error term!</p>
</blockquote>
<p>需要注意，如果 <code>lm()</code> 模型中 contrasts 少于 j-1 次，没有反映在 contrasts 中的组差异将被纳入到误差项中。</p>
<p><strong>问题：什么是正交的 contrasts？如何建立正交 contrasts？</strong></p>
<blockquote>
<p><strong>Orthogonal contrasts</strong> are a set of contrasts in which, for any distinct pair, <strong>the sum of the cross-products of the coefficients is zero</strong> (assume sample sizes are equal). Although there are potentially infinite sets of orthogonal contrasts, within any given set there will always be a maximum of exactly k – 1 possible orthogonal contrasts (where k is the number of group means available).</p>
</blockquote>
<blockquote>
<p>There are only k-1 orthogonal comparisons, where k is the number of factor levels.<br>
Comparisons/contrasts orthogonal to each other are statistically independent.<br>
Which of the possible comparisons should we conduct? Well, this very much depends on our hypothesis we have in mind.</p>
</blockquote>
<blockquote>
<p>We need to specify a contrast matrix, showing which comparisons we want to make. A contrast matrix consists of so-called contrast coefficients that (in the end) all have to sum to zero. This means, those things we want to compare have to get the opposite sign (e.g. +1 and –1), while those things we don ́t want to compare will receive a value of zero.</p>
</blockquote>
<blockquote>
<p>Orthogonal contrasts are planned, a priori tests that partition the experimental variance cleanly. They are a powerful tool for analyzing data, but they are not appropriate for all experiments. Less restrictive comparisons among treatment means can be performed using various means separation tests, or multiple comparison tests.</p>
</blockquote>
<ul>
<li>两个比较的向量点对点相乘的和等于0的比较为正交比较。</li>
<li>水平数为 k 的因子，最多有 k-1 次正交比较。</li>
<li>正交比较之间在统计上相对独立。</li>
<li>进行什么样的比较与研究假设相关。</li>
<li>在一个比较中，相互比较的水平之间的比较矩阵中对应的数值和为0，两者符号相反，其它水平数值为0。</li>
</ul>
<p><strong>问题：R 有哪些内置的构建 contrasts 的函数？</strong></p>
<p><code>contr.treatment()</code><br>
<code>contr.helmert()</code><br>
<code>contr.poly()</code><br>
<code>contr.sum()</code><br>
<code>contr.SAS</code></p>
<hr>
<h1>杂项</h1>
<blockquote>
<p>calculating post-hoc power are flawed and can produce misleading conclusions. Once a confidence interval has been computed, there is no additional information that a post hoc power calculation can provide. (Hoenig &amp; Heisey 2001)</p>
</blockquote>
<h1>翻译</h1>
<blockquote>
<p>We have empirically assessed the distribution of published effect sizes and estimated power by extracting more than 100,000 statistical records from about 10,000 cognitive neuroscience and psychology papers published during the past 5 years. The reported median effect size was d=0.93 (inter-quartile range: 0.64-1.46) for nominally statistically significant results and d=0.24 (0.11-0.42) for non-significant results. Median power to detect small, medium and large effects was 0.12, 0.44 and 0.73, reflecting no improvement through the past half-century. Power was lowest for cognitive neuroscience journals. 14% of papers reported some statistically significant results, although the respective F statistic and degrees of freedom proved that these were non-significant; p value errors positively correlated with journal impact factors. False report probability is likely to exceed 50% for the whole literature. In light of our findings the recently reported low replication success in psychology is realistic and worse performance may be expected for cognitive neuroscience.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</blockquote>
<p>我们从10,000篇近五年的认知神经科学和心理学已发表的期刊论文中提取了100,000份统计学记录，评估了发表的效应量 (effect sizes) 和估计的统计检验力 (power) 的统计分布。对于名义上达到统计显著性的结果中报告的效应量中位数为 d=0.93（四分位数范围为：0.64-1.46），而对于未达到统计显著性的结果，报告效应量中位数为 d=0.24 (四分位数范围：0.11-0.42)。检测到较弱，中等、较强的效应的统计检验力中位数分别为0.12，0.44，以及0.73。这表面在这几个领域内统计检验力在近半个世纪没有任何提高。其中，认知神经科学期刊论文的统计检验力最低（研究者考察了医学、心理学和认知神经科学）。14% 的论文报告了一些统计上显著的结果，然而这些结果中对应的 F 统计量和自由度均证明了这些结果并未达到显著。（有意思的是）p值的错误报告与期刊的影响因子呈正相关关系。在所有文献范围内，错误报告概率（False report probability）超过了50%。我们的结果提示，近来报告的心理学领域的低重复率问题是确实存在的，而且在认知神经科学领域可能预示着更严重的低重复率问题。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://rstudio-pubs-static.s3.amazonaws.com/65059_586f394d8eb84f84b1baaf56ffb6b47f.html" target="_blank" rel="external">A (sort of) Complete Guide to Contrasts in R</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://biorxiv.org/content/early/2016/08/25/071530" target="_blank" rel="external">Szucs, D., &amp; Ioannidis, J. P. (2016). Empirical assessment of published effect sizes and power in the recent cognitive neuroscience and psychology literature. bioRxiv, 071530.</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      - 如何在 R 语言中构建 contrasts&lt;br&gt;- 一篇论文摘要的翻译：心理学和认知神经科学中效应量和统计检验力使用问题
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
      <category term="Effect-size" scheme="http://lix90.github.io/tags/Effect-size/"/>
    
      <category term="Power" scheme="http://lix90.github.io/tags/Power/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-07</title>
    <link href="http://lix90.github.io/2016/12/07/2016-12-07-daily/"/>
    <id>http://lix90.github.io/2016/12/07/2016-12-07-daily/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2016-12-08T02:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Reading</h1>
<h2 id="five-different-cohen-s-d-statistics-for-within-subject-designs">Five different “Cohen’s d” statistics for within-subject designs<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<blockquote>
<p>within-subject designs tend to be powerful not because they lead to larger effect sizes—if anything, the reverse is probably true, in that people elect to use within-subject designs when Cohen’s d is particularly small, for example in many reaction time studies—but rather **because they allow us to efficiently detect smaller effect sizes due to removing irrelevant sources of variation from the denominator of the test statistic. **</p>
<p>One of the primary motivations for using standardized effect sizes at all is so that we can try to meaningfully compare effects from different studies, including studies that might use different designs. But all of the effect size candidates other than classical Cohen’s d are affected by the experimental design; that is, the “same” effect will have a larger or smaller effect size based on whether we used a between- or within-subjects design, how many responses we required each subject to make, and so on. Precisely because of this, we cannot meaningfully compare these effect sizes across different experimental designs. Because classical Cohen’s d deliberately ignores design information, it is at least in-principle possible to compare effect sizes across different designs.</p>
<p>In my opinion, standardized effect sizes are generally a bad idea for data summary and meta-analytic purposes. It’s hard to imagine a cumulative science built on standardized effect sizes, rather than on effects expressed in terms of psychologically meaningful units. With that said, I do think standardized effect sizes can be useful for doing power analysis or for defining reasonably informative priors when you don’t have previous experimental data.</p>
</blockquote>
<h2 id="why-i-don-t-like-standardised-effect-sizes">Why I don’t like standardised effect sizes<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2>
<blockquote>
<p><strong>unstandardised effect sizes</strong> express the patterns found in the data in the units in which they were measured.<br>
<strong>Standardised effect sizes</strong>, by contrast, express these patterns by scaling the differences or trends by a measure of the variability within the sample.</p>
<p><strong>the four reasons</strong> why I prefer unstandardised over standardised effect sizes.</p>
<ul>
<li>Unstandardised effect sizes are often <strong>interpretable</strong></li>
<li>Standardised effect sizes are more sensitive to the research design (and that’s a bad thing)</li>
<li>Apples and oranges (effects in any particular domain would change over time.)
<ul>
<li>Perhaps it’s more useful to think about how sources of extraneous variance can be brought under control in order to increase power (tighter design, more accurate measures, including covariates), rather than assuming that whatever yardstick out there also applies to one’s own study.</li>
</ul>
</li>
<li>What about more complex models? … standardised effect sizes that I’ve come across assume that you have a comparatively easy statistical model.</li>
</ul>
</blockquote>
<h2 id="what-data-patterns-can-lie-behind-a-correlation-coefficient">What data patterns can lie behind a correlation coefficient?<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2>
<blockquote>
<p>One correlation coefficient can represent any number of patterns</p>
<p>Correlation coefficients are popular among researchers because they allow them to summarise the relationship between two variables in a single number. However, a given correlation coefficient can represent any number of patterns between two variables, and without more information (ideally in the form of a scatterplot), the researchers themselves and their readers have no way of knowing which one.</p>
</blockquote>
<h2 id="对于方差分析-推荐使用-eta-2-g-效应量指标">对于方差分析，推荐使用 $\eta^2_G$ 效应量指标<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h2>
<blockquote>
<p>we present this method, explain that $\eta^2_G$ is preferred to eta squared and partial eta squared because <strong>it provides comparability across between-subjects and within-subjects designs</strong>, show that it can <strong>easily be computed from information provided by standard statistical packages</strong>, and recommend that investigators provide it routinely in their research reports when appropriate.</p>
</blockquote>
<h2 id="关于方差分析报告的记录">关于方差分析报告的记录</h2>
<blockquote>
<p>Throughout the manuscript degrees of freedom (df) are <strong>Greenhouse-Geisser corrected</strong> in ANOVAs for repeated-measures factors with more than two levels. Furthermore, we report $\eta^2_G$ as effect size measure for ANOVAs following Bakeman’s (2005) recommendations. <strong>Contrasts are obtained using the methods implemented in lsmeans (Lenth, 2015)</strong>. For ANOVAs, <strong>contrasts use uncorrected Satterthwaite approximated df.</strong> To control for multiple testing, p-values of follow-up contrasts are corrected using either <strong>the Bonferroni-Holm correction</strong> (Holm, 1979), denoted $p_H$ , or, in case all follow-up tests share the same df and do not involve one-tailed tests, a generalization of the Bonferroni-Holm method which takes the correlation among parameters into account (method free in package multcomp, Bretz, Hothorn, &amp; Westfall, 2011), denoted $p_F$ . Tests are one-tailed throughout the manuscript for the following hypotheses: (a) endorsements increase from knowledge phase to rule phase, (b) in particular, they increase for MP and MT, and © for AC and DA, (d) replicating the previous work, the increases in MP and MT are larger than those for AC and DA, (e) the effects of speaker expertise in Experiment 2. All other tests are two-tailed.</p>
</blockquote>
<p>这是这篇文章<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>里对于统计结果报告的脚注，介绍了作者是如何对结果进行报告。该作者是 R 包 afex 的开发者。</p>
<ul>
<li>在重复测量的因子多于两个水平时，自由度使用 Greenhouse-Geisser 方法矫正。</li>
<li>使用 lsmeans 包进行事后比较。</li>
<li>使用 Bonferroni-Holm 进行多重比较检验的矫正</li>
<li>如果每个检验都又相同的 df，使用的 multcomp 包中的 free 方法进行矫正。</li>
</ul>
<h1>R</h1>
<h2 id="knitr-设置">knitr 设置<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></h2>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">knitr::opts_chunk$set(fig.width=<span class="number">12</span>, fig.height=<span class="number">5</span>,</div><div class="line">                      echo=<span class="literal">FALSE</span>, results=<span class="string">"hide"</span>,</div><div class="line">                      message=<span class="literal">FALSE</span>, <span class="keyword">warning</span>=<span class="literal">FALSE</span>)</div></pre></td></tr></table></figure>
<p>使用 <code>knitr::opts_chunk$set()</code></p>
<h2 id="markdown-图片链接">markdown 图片链接</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[![CC0](http://i.creativecommons.org/p/zero/1.0/88x31.png)](http://creativecommons.org/publicdomain/zero/1.0/)</div></pre></td></tr></table></figure>
<p>将图片标记语法包裹在超链接标记语法中。</p>
<h1>概念</h1>
<h2 id="factorial-designs-因子设计">factorial designs 因子设计<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></h2>
<p>因子设计是一种设计试验类型，可以研究<strong>多个因子对响应的效应</strong>。进行试验时，同时改变所有因子的水平（而不是一次改变一个）可以研究因子之间的交互作用。</p>
<p><strong>全因子设计</strong>是研究人员以因子水平的全部组合测量响应的设计。两水平全因子设计所需的运行次数为 $2^k$，其中 $k$ 为因子数。</p>
<p><strong>部分因子设计</strong>是试验者仅执行全因子设计中的选定子集或“部分”试验的设计。当资源有限或设计中的因子数很大时，部分因子设计是一种很好的选择，因为它们比全因子设计使用的运行次数要少。部分因子设计使用全因子设计的子集，因此某些主效应与双因子交互作用相混杂，而<strong>无法与其他更高阶交互作用的效应相区分</strong>。通常，试验者想假定更高阶的效应可以忽略不计，以便通过更少的运行次数获得有关主效应和低阶交互作用的信息。</p>
<p>在因子设计中，当因变量的值在一个因子的不同水平下具有显著差异时，并且该结论在其他因子的任何水平都成立时，说明该因子的主效应存在。主效应的判定是以假设因变量不随因子的水平变化而变化作为零假设或基准线的。<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<h1>R contrast coding system<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></h1>
<p>四种内置比较：</p>
<ul>
<li>dummy</li>
<li>deviation</li>
<li>helmert</li>
<li>orthogonal polynomial</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Coding Scheme</th>
<th style="text-align:left">Comparisons made</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Dummy Coding</td>
<td style="text-align:left">Compares each level to the reference level, intercept being the cell mean of the reference group</td>
</tr>
<tr>
<td style="text-align:left">Simple Coding</td>
<td style="text-align:left">Compares each level to the reference level, intercept being the grand mean</td>
</tr>
<tr>
<td style="text-align:left">Deviation Coding</td>
<td style="text-align:left">Compares each level to the grand mean</td>
</tr>
<tr>
<td style="text-align:left">Orthogonal Polynomial Coding</td>
<td style="text-align:left">Orthogonal polynomial contrasts</td>
</tr>
<tr>
<td style="text-align:left">Helmert Coding</td>
<td style="text-align:left">Compare levels of a variable with the mean of the subsequent levels of the variable。helmert coding 将每个水平与其后续水平的均值进行比较。</td>
</tr>
<tr>
<td style="text-align:left">Reverse Helmert Coding</td>
<td style="text-align:left">Compares levels of a variable with the mean of the previous levels of the variable。与 helmert coding 相对，reverse helmert coding 将后一个水平与前面水平的均值进行比较。<code>contr.helmert()</code></td>
</tr>
<tr>
<td style="text-align:left">Forward Difference Coding</td>
<td style="text-align:left">Compares adjacent levels of a variable (each level minus the next level)。一个水平的均值与下一个邻近水平的均值进行比较。</td>
</tr>
<tr>
<td style="text-align:left">Backward Difference Coding</td>
<td style="text-align:left">Compares adjacent levels of a variable (each level minus the prior level)。与 forward difference coding 相反，将后一个水平与前一个邻近水平进行比较。</td>
</tr>
<tr>
<td style="text-align:left">User-Defined Coding</td>
<td style="text-align:left">User-defined contrast</td>
</tr>
</tbody>
</table>
<blockquote>
<p>No matter which coding system you select, you will always have a contrast matrix with one less column than levels of the original variable. 无论什么样的编码系统，你的比较矩阵的列数总是要比原来变量个数少一。</p>
</blockquote>
<h2 id="dummy-coding">Dummy coding</h2>
<p>dummy coding 让你将变量的每个水平与一个固定的参照水平进行比较。</p>
<p><code>contrasts(data$factor) = contr.treatment(4)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  2 3 4</div><div class="line">1 0 0 0</div><div class="line">2 1 0 0</div><div class="line">3 0 1 0</div><div class="line">4 0 0 1</div></pre></td></tr></table></figure>
<p>所以，第2，3，4个水平均将与第1个水平比较。</p>
<h2 id="simple-coding">Simple coding</h2>
<p>simple coding 和 dummy coding 相似，都是与参照水平进行比较。不同之处在于，回归模型的结果上的截距。对于 dummy coding，截距为参照组的 cell mean；而对于 simple coding，截距为 mean of cell means，即所有 cell 均值的均值 (grand mean)。</p>
<blockquote>
<p>Essentially, the difference between the dummy coding scheme and the simple coding scheme is a constant matrix whose each element is 1/k if our categorical variable has k levels.</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">c &lt;- contr.treatment(<span class="number">4</span>)</div><div class="line">my.coding &lt;- matrix(rep(<span class="number">1</span>/<span class="number">4</span>, <span class="number">12</span>), ncol = <span class="number">3</span>)</div><div class="line">my.simple.coding &lt;- c - my.coding</div><div class="line">my.simple</div><div class="line"></div><div class="line">      <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span> -<span class="number">0.25</span> -<span class="number">0.25</span> -<span class="number">0.25</span></div><div class="line"><span class="number">2</span>  <span class="number">0.75</span> -<span class="number">0.25</span> -<span class="number">0.25</span></div><div class="line"><span class="number">3</span> -<span class="number">0.25</span>  <span class="number">0.75</span> -<span class="number">0.25</span></div><div class="line"><span class="number">4</span> -<span class="number">0.25</span> -<span class="number">0.25</span>  <span class="number">0.75</span></div></pre></td></tr></table></figure>
<h2 id="deviation-coding">Deviation coding</h2>
<p>deviation coding 将指定水平与因变量的总均值进行比较。</p>
<p><code>contr.sum(n)</code><br>
<code>contrasts(data$factor) = contr.sum(n)</code></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">contr.sum(<span class="number">4</span>)</div><div class="line">  [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</div><div class="line"><span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line"><span class="number">2</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span></div><div class="line"><span class="number">3</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></div><div class="line"><span class="number">4</span>   -<span class="number">1</span>   -<span class="number">1</span>   -<span class="number">1</span></div></pre></td></tr></table></figure>
<p>上面标记为1的水平将与总均值进行比较，而-1的水平不进行比较。</p>
<blockquote>
<p>Note that a -1 is assigned to level 4 for all three comparisons (because it is the level that is never compared to the other levels) and all other values are assigned a 0.</p>
<p>However, this grand mean is not the mean of the dependent variable that is listed in the output of the means command above. Rather it is the mean of means of the dependent variable at each level of the categorical variable.</p>
</blockquote>
<h2 id="orthogonal-polynomial-coding">Orthogonal polynomial coding</h2>
<blockquote>
<p>Orthogonal polynomial coding is a form of <strong>trend analysis</strong> in that it is looking for the linear, quadratic and cubic trends in the categorical variable. This type of coding system should be <strong>used only with an ordinal variable in which the levels are equally spaced.</strong></p>
</blockquote>
<p><code>contr.poly()</code></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://jakewestfall.org/blog/index.php/2016/03/25/five-different-cohens-d-statistics-for-within-subject-designs/" target="_blank" rel="external">http://jakewestfall.org/blog/index.php/2016/03/25/five-different-cohens-d-statistics-for-within-subject-designs/</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://janhove.github.io/reporting/2015/02/05/standardised-vs-unstandardised-es" target="_blank" rel="external">http://janhove.github.io/reporting/2015/02/05/standardised-vs-unstandardised-es</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="http://janhove.github.io/teaching/2016/11/21/what-correlations-look-like" target="_blank" rel="external">链接</a>，该博主写了一个 R 函数，用来生成 15 种不同数据分布但是相关系数相同散点图。这说明，散点图对于相关系数的解释是相当重要的。 <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p>Bakeman, R. (2005). Recommended effect size statistics for repeated measures designs. Behavior research methods, 37(3), 379-384. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p>Singmann, H. et al. (2016). Cognitive Psychology, 88, 61-87. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://raw.githubusercontent.com/ijlyttle/user2016_knitr/master/Part1/3_Options/fruit_snacks.Rmd" target="_blank" rel="external">user2016_knitr/Part1/3_Options/fruit_snacks.Rmd</a> <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="http://support.minitab.com/zh-cn/minitab/17/topic-library/modeling-statistics/doe/factorial-designs/factorial-designs/" target="_blank" rel="external">http://support.minitab.com/zh-cn/minitab/17/topic-library/modeling-statistics/doe/factorial-designs/factorial-designs/</a> <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="http://www.opentextbooks.org.hk/ditatopic/36036" target="_blank" rel="external">香港开放教科书：社会科学研究／实验研究／因子设计</a> <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9" class="footnote-item"><p><a href="http://www.ats.ucla.edu/stat/r/library/contrast_coding.htm" target="_blank" rel="external">Contrast Coding Systems for categorical variables</a> <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      - 关于统计学文章的一点儿阅读摘录。&lt;br&gt;- 关于 R 中 contrasts 矩阵的使用。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-06</title>
    <link href="http://lix90.github.io/2016/12/06/2016-12-06-daily/"/>
    <id>http://lix90.github.io/2016/12/06/2016-12-06-daily/</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2016-12-06T09:13:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1>如何使用 R 包进行方差分析？</h1>
<ol start="0">
<li>数据整理：tidyr, dplyr, plyr 包</li>
</ol>
<ul>
<li>缺失值处理：<code>na.omit()</code></li>
<li>异常值处理：对数据进行 <code>subset()</code></li>
<li>是否对数据进行裁剪：<code>!scale(x)&gt;3</code></li>
<li>数据格式的长宽转换：<code>tidyr::spread()</code> <code>tidyr::gather()</code></li>
</ul>
<ol>
<li>使用 afex 包建立方差分析模型</li>
</ol>
<p><code>afex::aov_ez()</code><br>
<code>afex::aov_car()</code><br>
<code>afex::aov_4()</code></p>
<ol start="2">
<li>
<p>使用 lsmeans 包或 glht 包进行事后比较</p>
</li>
<li>
<p>使用 apa 包进行结果导出</p>
</li>
<li>
<p>数据结果呈现：绘制交互作用图</p>
</li>
</ol>
<h1>使用 data.table 包进行数据整理</h1>
<p>data.table 包提供了一种增强版本的 data.frame。<br>
<code>data.table</code> <code>as.data.table</code></p>
<ul>
<li>data.table 中的字符串列默认不会被转换为因子。</li>
<li>每一行会打印一个行号加<code>:</code>冒号。</li>
<li>当行数大于100，则只打印前5行和后5行。</li>
</ul>
<p>数据导入：<code>fread()</code></p>
<p>data.table 基本语法：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DT[i, j, by]</div><div class="line"></div><div class="line"><span class="comment">##   R:      i                 j        by</span></div><div class="line"><span class="comment">## SQL:  where   select | update  group by</span></div><div class="line"><span class="comment">## Take DT, subset rows using i, then calculate j, grouped by by.</span></div></pre></td></tr></table></figure>
<h1>useR2016 会议上感兴趣的 tutorials</h1>
<ul>
<li><a href="http://user2016.org/tutorials/02.html" target="_blank" rel="external">Joe Cheng - Effective Shiny Programming</a> Shiny 编程</li>
<li><a href="http://user2016.org/tutorials/03.html" target="_blank" rel="external">Missing Value Imputation with R</a> 缺失值处理</li>
<li><a href="http://user2016.org/tutorials/04.html" target="_blank" rel="external">Extracting data from the web APIs and beyond</a> 从网络获取数据</li>
<li><a href="http://user2016.org/tutorials/05.html" target="_blank" rel="external">Ninja Moves with data.table</a> data.table 包</li>
<li><a href="http://user2016.org/tutorials/07.html" target="_blank" rel="external">Language Analytics in Finance with R</a> 文本分析</li>
<li><a href="http://user2016.org/tutorials/13.html" target="_blank" rel="external">Understanding and Creating Interactive Graphics</a> 交互式图形</li>
<li><a href="http://user2016.org/tutorials/17.html" target="_blank" rel="external">Dynamics Documents with R Markdown</a> 动态文档</li>
</ul>
]]></content>
    
    <summary type="html">
    
      使用 R 进行方差分析的流程。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-05</title>
    <link href="http://lix90.github.io/2016/12/05/2016-12-05-daily/"/>
    <id>http://lix90.github.io/2016/12/05/2016-12-05-daily/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-07T10:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1>如何在 ESS 中调出 R 包对应的 Vignettes？</h1>
<ul>
<li>首先得加载包 <code>library(pkg)</code></li>
<li><code>C-c C-d C-v</code> 查找已载入包的 Vignettes，含有 Vignettes 的包则会列出来</li>
<li>光标移动到链接下，<code>enter/RET</code> 打开对应 Vignettes</li>
</ul>
<p>或者</p>
<ul>
<li>先搜索包的 vignette：<code>vignette(package = &quot;pkg_name&quot;)</code>，获得 vignette 主题名称</li>
<li>然后再通过 <code>vignette(topic = &quot;topic_name&quot;, package = &quot;pkg_name&quot;)</code> 调出 vignette</li>
</ul>
<h1>如何阻止 R 打印启动信息（startup message）</h1>
<ul>
<li>命令行中，传给 R 参数即可 <code>R -q/--quiet/--silent</code></li>
<li>ESS 中，设定变量 <code>inferior-R-args</code> 的值 <code>(setq inferior-R-args &quot;-q&quot;)</code></li>
</ul>
<h1>如何将 R 中的统计结果导出为发表格式（APA）？</h1>
<p>一般来说，用 R 统计之后导出的信息过于详细，直接复制并不能满足发表的格式要求。但是结果报告时只需要特定的指标，所以需要精简信息。两个包可以实现该需求，<code>schoRsch</code> 和 <code>apa</code>。</p>
<blockquote>
<p>apa generalizes this idea by providing formatters for different output formats (text, Markdown, RMarkdown, HTML, LaTeX, docx and R’s plotmath syntax).</p>
<p>Currently supported tests are:</p>
<ul>
<li>t-test (<code>t.test</code> and <code>apa::t_test</code>)</li>
<li>ANOVA (<code>ez::ezANOVA</code>, <code>afex::aov_car</code>, <code>afex::aov_ez</code>, and <code>afex::aov_4</code>)</li>
<li>chi-squared test (<code>chisq.test</code>)</li>
<li>test of a correlation (<code>cor.test</code>)</li>
</ul>
</blockquote>
<p>apa 包可以支持多种常见的心理学使用的统计检验方法，对应函数为：<code>anova_apa</code> <code>chisq_apa</code> <code>cor_apa</code> <code>t_apa</code>。apa 比 schoRsch 强大的地方是可以导出为多种格式，例如 Rmarkdown，html，latex，docx，以及在 R 绘图时的数学表达式。这样就可以直接复制结果到论文中了。</p>
<p>schoRsch 包中包含这几个导出结果的函数：<code>anova_out</code> <code>cor_out</code> <code>chi_out</code> <code>t_out</code>。</p>
<p><code>apa::anova_apa</code></p>
<ul>
<li>x: 支持 <code>ez::ezANOVA</code> <code>afex::afex_ez</code> <code>afex::afex_car</code> <code>afex::afex_4</code> 的结果作为输入对象。</li>
<li>effect: 字符串，指定效应名称；如果值为 ‘NULL’，所有效应均报告。</li>
<li>sph_corr: 字符串，指定球形检验方法，包括 “greenhouse-geisser”(默认) “huynh-feldt” 或 “none”；或者使用简称 “gg” “hf”。</li>
<li>es: 字符串，指定效应量类型，包括 “petasq”(partial eta squared) 或 “getasq”(generalized eta squared)；或者使用简称 “pes” 和 “ges”。</li>
<li>format: 字符串，指定导出格式，包含 “text”, “markdown”, “rmarkdown”, “html”, “latex”, “docx”, “plotmath”。</li>
</ul>
<p><code>apa::t_apa</code></p>
<ul>
<li>x: 来自 <code>apa::t_test</code> 或 <code>t.test</code> 的结果。</li>
<li>es: 字符串，指定效应量类型，包括 “cohens_d”(默认), “hedges_g”, 或 “glass_delta”（如何 x 为独立样本 t 检验的结果）。如果 x 为配对样本或者单样本 t 检验结果，报告 cohen’s d 值。</li>
<li>format: 字符串，导出格式。</li>
</ul>
<h1>统计检验力分析</h1>
<h2 id="统计检验力">统计检验力</h2>
<p>power 统计检验力：如果真实差异存在，统计检验能够检测到真实差异的能力。<br>
$\beta$ 第二类错误概率：当虚无假设（null hypothesis）为假，没有能够拒绝虚无假设的概率。<br>
$$power = 1 - \beta$$<br>
所以统计检验力也就是在虚无假设为假时成功拒绝掉虚无假设的概率。</p>
<h2 id="统计检验力的几个问题">统计检验力的几个问题</h2>
<ul>
<li>实验设计有多敏锐？</li>
<li>当组间差异真实存在时，实验真实地发现差异有多大可能性？</li>
<li>需要多大的样本量才能使得实验具有足够的统计检验力？</li>
<li>每组需要包含多少个被试？</li>
</ul>
<h2 id="效应量">效应量</h2>
<p>对于中等程度的效应量，组间标准差为 1/4 个组内标准差。</p>
<h2 id="使用-r-进行统计检验力分析">使用 R 进行统计检验力分析</h2>
<p><code>power.t.test</code><br>
<code>power.anova.test</code></p>
<h2 id="power-分析的挑战">power 分析的挑战</h2>
<ul>
<li>你必须对期望的均值差异进行估计</li>
<li>你必须对组内变异进行估计</li>
<li>计算更复杂的实验设计的 power 是非常复杂的</li>
</ul>
<p><strong>omnibus test</strong> 综合检验只提供给我们进一步分析差异的权限。</p>
<h1>多重比较</h1>
<p>两种多重比较方法</p>
<h2 id="planned-comparisons">Planned comparisons</h2>
<ul>
<li>事先确定需要比较的组</li>
<li>你只能受限于实现确定的比较</li>
<li>比较之间必须是正交的（orthogonal）</li>
</ul>
<h2 id="post-hoc-comparisons">post-hoc comparisons</h2>
<ul>
<li>根据结果选择比较（追求最显著的差异）</li>
<li>可以进行任意多次比较</li>
<li>较少的限制</li>
<li>需要控制第一类错误率，所以每次比较的结果就将更保守</li>
</ul>
<h2 id="比较次数">比较次数</h2>
<p>两个问题：</p>
<ul>
<li>正交性 orthogonality</li>
<li>第一类错误的增加 inflation of Type-I error</li>
</ul>
<p>问题：可以进行多少次比较，而且不会带来冗余？</p>
<h2 id="非冗余比较-non-redundant-contrasts">非冗余比较 Non-redundant contrasts</h2>
<ul>
<li>一般来说，对于 n 组数据，在不带来冗余的前提下，最多有 n-1 次比较。</li>
<li>数学上，orthogonality 就代表没有冗余。</li>
</ul>
<h2 id="为什么要关注正交性？">为什么要关注正交性？</h2>
<ul>
<li>首要启示：正交比较能够提供关于组间差异的不重复的信息。</li>
<li>正规表达：当两个比较为正交的，那么两个样本之间在统计上是独立的。</li>
<li>每一个比较都能够提供关于组间差异的唯一的，不重复的信息。</li>
<li>每一个比较问的关于数据的不同问题。</li>
</ul>
<h2 id="多重比较检验">多重比较检验</h2>
<ul>
<li>比较之间是独立的事件</li>
<li>概率值不是简单的加总</li>
<li>Pr(至少犯一次一类错误) = 1 - Pr(没有犯一类错误) = $1 - (1 - \alpha)^C$，C 为比较的次数。
<ul>
<li>如果 $\alpha = 0.05$, C = 3, 那么 p = 0.143。</li>
<li>如果 C = 10, p = 0.40。</li>
</ul>
</li>
</ul>
<h2 id="几个概念">几个概念</h2>
<ul>
<li>error rate per contrast $\alpha_PC$
<ul>
<li>特定比较犯一类错误的概率（假阳性概率）</li>
</ul>
</li>
<li>experiment-wise error rate $\alpha_EW$
<ul>
<li>在一次试验中，一次或多次比较犯一类错误的概率</li>
</ul>
</li>
<li>family-wise error rate $\alpha_FW$
<ul>
<li>多个因素试验一次或多次比较犯一类错误的概率</li>
</ul>
</li>
</ul>
<p>那么，当 C = 3，$\alpha_PC = 0.05$，那么 $\alpha_EW = 0.143$。</p>
<h2 id="比较方法">比较方法</h2>
<h3 id="bonferroni">Bonferroni</h3>
<ul>
<li>简单</li>
<li>$\alpha_PC = \frac{\alpha}{C}$，C 为比较的总次数。</li>
<li>适合比较次数少时</li>
</ul>
<h3 id="holm-bonferroni">Holm-Bonferroni</h3>
<ul>
<li>相比 bonferroni 没有那么保守</li>
<li>p 值越小矫正越大</li>
</ul>
<h3 id="keppel-等人的观点">Keppel 等人的观点</h3>
<ul>
<li>如果比较为 n-1 次正交的事前比较，不需要矫正显著性水平</li>
<li>如果为事前比较，正交的，且次数小于等于 n-1，那么比较并不是数据驱动，那么不需要矫正显著性水平</li>
</ul>
<h2 id="事后成对比较">事后成对比较</h2>
<p>Tukey 方法（<code>TukeyHSD()</code>）允许进行一个实验中所有可能的成对比较，然后保持 $\alpha_EW = 0.05$。如果样本方差不相同，或者样本量不同，需要使用修改的 Tukey 方法。</p>
<p>Scheffe 方法也比较保守。</p>
<p>其它方法：</p>
<ul>
<li>Dunnett</li>
<li>Fisher’s LSD</li>
<li>Newman-Keuls</li>
</ul>
<h2 id="如何应对多重比较问题？">如何应对多重比较问题？</h2>
<ul>
<li>决定那种方法最合理，提供数据和实验设计</li>
<li>做好为自己的方法进行辩护的准备</li>
<li>如果有必要，可能会换一种方法</li>
<li>实验室、领域、期刊更推崇那种方法？</li>
</ul>
]]></content>
    
    <summary type="html">
    
      几个使用 R 中遇到的问题：&lt;br&gt;- 如何在 ESS 中调出 R 包对应的 Vignettes？&lt;br&gt;- 如何阻止 R 打印启动信息（startup message）&lt;br&gt;- 如何将 R 中的统计结果导出为发表格式（APA）？
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="ESS" scheme="http://lix90.github.io/tags/ESS/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-04</title>
    <link href="http://lix90.github.io/2016/12/04/2016-12-04-daily/"/>
    <id>http://lix90.github.io/2016/12/04/2016-12-04-daily/</id>
    <published>2016-12-03T16:00:00.000Z</published>
    <updated>2016-12-04T11:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1>面向对象基础</h1>
<p>ECMAScript 没有类的概念。<br>
对象就是无序属性的集合，一组名值对，值可为数据也可为函数。<br>
ECMAScript 中有两种属性：数据属性和访问器属性。<br>
数据属性有4个描述其行为的特性：</p>
<ul>
<li>[[Configurable]] 能否修改</li>
<li>[[Enumerable]] 能否枚举</li>
<li>[[Writable]] 能否修改属性的值</li>
<li>[[Value]] 属性的数据值<br>
修改属性默认的特性的方法 <code>Object.defineProperty()</code></li>
</ul>
<p>访问器属性<br>
不包含数据值<br>
包含两个函数：getter和setter<br>
读取 getter<br>
写入 setter<br>
四个特性</p>
<ul>
<li>[[Configurable]]</li>
<li>[[Enumerable]]</li>
<li>[[Get]]</li>
<li>[[Set]]</li>
</ul>
<p>定义多个属性 <code>Object.defineProperties()</code><br>
读取属性的特性 <code>Object.getOwnPropertyDescriptor()</code></p>
<p>创建对象<br>
工厂模式：通过函数封装以特定接口创建对象的细节。<br>
构造函数模式：原生构造函数或自定义的构造函数。<br>
构造函数模式与工厂模式的区别：</p>
<ul>
<li>没有显式地创建对象</li>
<li>直接将属性和方法赋给了 this 对象</li>
<li>没有 return 语句</li>
</ul>
<p>构造函数以大写字母开头。</p>
<p>使用构造函数创建新实例，必须使用 new 操作符。<br>
经历 4 个步骤：</p>
<ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象，this 指向了这个新对象</li>
<li>执行构造函数中的代码，为这个新对象添加属性</li>
<li>返回新对象</li>
</ul>
<p>原型模式</p>
<hr>
<p>构造函数以大写字母开头。</p>
<p>使用构造函数创建新实例，必须使用 new 操作符。<br>
经历 4 个步骤：</p>
<ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象，this 指向了这个新对象</li>
<li>执行构造函数中的代码，为这个新对象添加属性</li>
<li>返回新对象</li>
</ul>
<p>原型模式<br>
…</p>
<hr>
<h1>R</h1>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">op &lt;- options(contrasts = c(<span class="string">"contr.helmert"</span>, <span class="string">"contr.poly"</span>))</div><div class="line"><span class="keyword">...</span></div><div class="line">par(op) <span class="comment"># 恢复默认</span></div><div class="line"></div><div class="line">parr &lt;- par(mar = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</div><div class="line"><span class="keyword">...</span></div><div class="line">par(parr) <span class="comment"># 恢复默认</span></div></pre></td></tr></table></figure>
<hr>
<h1>杂项</h1>
<p>split-plot experiments 裂区实验设计<br>
pseudoreplication 伪重复问题</p>
]]></content>
    
    <summary type="html">
    
      js 面向对象编程基础&lt;br&gt;r 保存默认参数设置：options &amp; par
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-03</title>
    <link href="http://lix90.github.io/2016/12/03/2016-12-03-daily/"/>
    <id>http://lix90.github.io/2016/12/03/2016-12-03-daily/</id>
    <published>2016-12-02T16:00:00.000Z</published>
    <updated>2016-12-03T05:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>emacs sharp-quote for lambdas</p>
<p>在<a href="http://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html" target="_blank" rel="external">以前</a> sharp quote 对于 lambdas 是必要的，但是<a href="http://emacs.stackexchange.com/questions/3595/when-to-sharp-quote-a-lambda-expression" target="_blank" rel="external">现在</a> <code>(lambda (x) x)</code> 和 <code>#(lambda (x) x)</code> 在求值时是等同的。但是 <code>'(lambda (x) x)</code> 仅仅是阻止被编译（byte compilation）。</p>
<p>以下三种表达式都是等同的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lambda (x) (* x x))</div><div class="line">(function (lambda (x) (* x x)))</div><div class="line">#&apos;(lambda (x) (* x x))</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/bbatsov/emacs-lisp-style-guide/issues/7" target="_blank" rel="external"><strong>prefer #’ (sharp quote) when quoting function names</strong></a> When quoting symbols to access their function definitions, prefer the use of sharp quotes. <strong>This allows the bytecompiler to check if the function exists</strong>, issuing a warning just like it would when calling an undefined function.</p>
</blockquote>
<hr>
<p>lexical scoping 词法作用域</p>
]]></content>
    
    <summary type="html">
    
      - emacs sharp quote&lt;br&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-12-02</title>
    <link href="http://lix90.github.io/2016/12/02/2016-12-02-daily/"/>
    <id>http://lix90.github.io/2016/12/02/2016-12-02-daily/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2016-12-03T02:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有学习什么内容，听了个播客，“代码时间”的一期节目“Lisp入门”。自己使用 Emacs 编辑器，对 lisp 比较感兴趣。于是去了解下 lisp 的一个方言，clojure。在 <a href="https://learnxinyminutes.com/docs/zh-cn/clojure-cn/" target="_blank" rel="external">learnxinyminutes</a> 学了下 clojure 的基本语法。</p>
<p>form：小括号里的由空格分开的一组语句。<br>
clojure 是前置型语言，括号内第一个元素为函数或者宏，其余的为参数。<br>
当创建一组数据字面量，用单引号(’)来阻止form被解析和求值。<br>
clojure 使用 java 的 object 来描述布尔值、字符串和数字。<br>
集合 == 一组数据<br>
List: <code>(list 1 2 3)</code> == <code>'(1 2 3)</code><br>
Vector: <code>[1 2 3]</code><br>
序列（seqs）是数据列表的抽象描述。</p>
<p>class<br>
coll<br>
seq<br>
range<br>
take<br>
cons<br>
conj<br>
concat<br>
map 映射<br>
filter 过滤<br>
reduce 规约</p>
<p>fn 创建函数<br>
def 定义变量<br>
defn 定义函数</p>
<p><a href="https://cider.readthedocs.io/en/latest/" target="_blank" rel="external">CIDER</a> CIDER is the Clojure(Script) Interactive Development Environment that Rocks!</p>
<hr>
<p>concurrency 并发<br>
thread safe 线程安全</p>
]]></content>
    
    <summary type="html">
    
      听了个播客，介绍 lisp 语言。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="clojure" scheme="http://lix90.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>R 语言个人参考</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-wiki-r/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-wiki-r/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-08T09:29:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Packages</h1>
<h2 id="base">base</h2>
<p><strong>Sys.</strong></p>
<ul>
<li><code>Sys.getenv()</code> 获取环境变量内容</li>
<li><code>Sys.setenv()</code> 设置环境变量</li>
<li><code>Sys.unsetenv()</code> 移除环境变量</li>
<li><code>Sys.time()</code> <code>Sys.Date()</code> 获取当前日期和时间</li>
</ul>
<h3 id="startup">Startup</h3>
<p>步骤</p>
<ol>
<li><strong>设置环境变量</strong>：通过 site 和 user 文件</li>
</ol>
<ul>
<li>site file 由环境变量 <code>R_ENVIRON</code> 指定；如果没有指定，那么使用系统默认 site file，<code>R_HOME/etc/Renviron.site</code>。</li>
<li>user file 由环境变量 <code>R_ENVIRON_USER</code> 指定；如果没有指定，那么搜索当前工作路径或者用户的主路径（HOME directory）中的 <code>.Renviron</code> 文件。<br>
此时 base package 被加载</li>
</ul>
<ol start="2">
<li>搜索 profile file，由<code>R_PROFILE</code>环境变量指定，若不存在，则使用 <code>R_HOME/etc/Rprofile.site</code>。</li>
<li>搜索 user profile，有 <code>R_PROFILE_USER</code> 环境变量指定，如果不存在，调用 <code>.Rprofile</code>，source 到 workspace 中。</li>
<li>如果存在 <code>.RData</code>，则加载</li>
<li>如果存在 <code>.First</code> 函数，则执行，然后，<code>base::.First.sys()</code> 执行。<code>.First.sys()</code> 调用 <code>require</code> 加载默认的包。默认的 R 包由 <code>options(&quot;defaultPackages&quot;)</code> 指定。如果默认包中包含 methods package，那么通过函数 <code>.OptRequireMethods()</code> 先加载 methods 包。<code>.First()</code> 可以在 <code>.Rprofile</code> 和 <code>Profile.site</code> 中定义，也可以存储在 <code>.RData</code> 中。</li>
</ol>
<p>在 R 启动时，需要两种文件，设置环境变量的文件和包含 R 代码的 profile 文件。</p>
<h2 id="graphics">graphics</h2>
<h3 id="函数索引">函数索引</h3>
<h4 id="常用底层函数">常用底层函数</h4>
<table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">中文描述</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Axis (axis)</td>
<td style="text-align:left">添加坐标轴，调用函数 <code>axis</code></td>
<td style="text-align:left">``</td>
</tr>
<tr>
<td style="text-align:left">abline</td>
<td style="text-align:left">添加直线（垂直、水平、斜线）</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">lines</td>
<td style="text-align:left">添加连接线段</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">segments</td>
<td style="text-align:left">一对点之间绘制线段</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><strong>arrows</strong></td>
<td style="text-align:left">一对点之间绘制箭头</td>
<td style="text-align:left">添加注释，误差线</td>
</tr>
<tr>
<td style="text-align:left">box</td>
<td style="text-align:left">绘制线框</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">grid</td>
<td style="text-align:left">添加网格线</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">绘制标题</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">legend</td>
<td style="text-align:left">添加图例</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">mtext</td>
<td style="text-align:left">在图形边距上添加文字</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">添加文本内容</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">points</td>
<td style="text-align:left">添加点</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">rect</td>
<td style="text-align:left">绘制矩形</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">polygon</td>
<td style="text-align:left">绘制多边形</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">polypath</td>
<td style="text-align:left">绘制路径</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">symbols</td>
<td style="text-align:left">绘制符号 (Circles, Squares, Stars, Thermometers, Boxplots)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">xspline</td>
<td style="text-align:left">Draw an X-spline</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><strong>rug</strong></td>
<td style="text-align:left">添加轴须图</td>
<td style="text-align:left">散点图添加轴须图呈现分布特征</td>
</tr>
</tbody>
</table>
<p><strong>par</strong> | 设置和查询图形参数<br>
axTicks                 Compute Axis Tickmark Locations<br>
clip                    Set Clipping Region<br>
filled.contour          Level (Contour) Plots<br>
frame                   Create / Start a New Plot Frame<br>
grconvertX              Convert between Graphics Coordinate Systems<br>
identify                Identify Points in a Scatter Plot<br>
<strong>layout</strong>                  Specifying Complex Plot Arrangements<br>
locator                 Graphical Input<br>
screen                  Creating and Controlling Multiple Screens on a Single Device<br>
xinch                   Graphical Units<br>
strwidth/strheight | 计算字符串和数学表达式的宽/高</p>
<p>plot                    Generic X-Y Plotting<br>
plot.data.frame         Plot Method for Data Frames<br>
plot.default            The Default Scatterplot Function<br>
plot.design             Plot Univariate Effects of a Design or Model<br>
plot.factor             Plotting Factor Variables<br>
plot.formula            Formula Notation for Scatterplots<br>
plot.histogram          Plot Histograms<br>
plot.raster             Plotting Raster Images<br>
plot.table              Plot Methods for ‘table’ Objects<br>
plot.window             Set up World Coordinates for Graphics Window<br>
plot.xy                 Basic Internal Plot Function</p>
<p>assocplot               Association Plots<br>
barplot                 Bar Plots<br>
boxplot                 Box Plots<br>
boxplot.matrix          Draw a Boxplot for each Column (Row) of a Matrix<br>
bxp                     Draw Box Plots from Summaries<br>
cdplot                  Conditional Density Plots<br>
coplot                  Conditioning Plots<br>
curve                   Draw Function Plots<br>
dotchart                Cleveland’s Dot Plots<br>
fourfoldplot            Fourfold Plots<br>
hist                    Histograms<br>
hist.POSIXt             Histogram of a Date or Date-Time Object<br>
matplot                 Plot Columns of Matrices<br>
mosaicplot              Mosaic Plots<br>
pairs                   Scatterplot Matrices<br>
panel.smooth            Simple Panel Plot<br>
persp                   Perspective Plots<br>
pie                     Pie Charts<br>
smoothScatter           Scatterplots with Smoothed Densities Color Representation<br>
spineplot               Spine Plots and Spinograms<br>
stars                   Star (Spider/Radar) Plots and Segment Diagrams<br>
stem                    Stem-and-Leaf Plots<br>
stripchart              1-D Scatter Plots<br>
sunflowerplot           Produce a Sunflower Scatter Plot</p>
<p>双变量</p>
<p>contour | 绘制轮廓线/等高线图<br>
image | 绘制二维图像<br>
rasterImage | 绘制栅格图</p>
<h3 id="par-graphical-parameters">par: graphical parameters</h3>
<p><strong>margins</strong>: (bottom, left, top, right)<br>
mar (margins size in lines)<br>
mai (margin size in inches)<br>
mex (scale fator of line height of margins)<br>
oma (out margins area)</p>
<p><a href="http://research.stowers-institute.org/efg/R/Graphics/Basics/mar-oma/index.htm" target="_blank" rel="external">tutorials of margins and outer margins</a><br>
<a href="http://rgraphics.limnology.wisc.edu/index.php" target="_blank" rel="external">R graphics</a></p>
<p><strong>multiple figures</strong><br>
mlcol (multiple figures column)<br>
mlrow (multiple figures row)</p>
<p><strong>cex</strong>: scale factor of text and symbols<br>
cex.axis: axis tick labels<br>
cex.lab: x-y axis labels<br>
cex.main: main title<br>
cex.sub: subtitle</p>
<p><strong>axis</strong></p>
<p><strong>xaxs</strong>: x-axis style of interval calculation: R 语言仅支持 r 和 i 两种风格</p>
<ul>
<li>r = regular 会在原始数据的基础上有一个拓展，即原始数据点与边框之间有一段距离</li>
<li>i = interval 按照原始数据的大小进行计算，原始数据点可能与边框重叠</li>
</ul>
<p><strong>xaxt</strong>: x-axis type</p>
<ul>
<li>n = no axis, 不绘制坐标轴</li>
<li>s/l/t = plot, 绘制坐标轴</li>
</ul>
<p><strong>plot regions</strong><br>
<strong>plt</strong>: the coordinates of the plot region, (x1/left, x2/right, y1/bottom, y2/top), 每个值为 0 ~ 1 之间，为相对于 device 的长宽的比率。x1 为 device 左边缘至 plot region 左边缘的距离，x2 为 device 的左边缘至 plot region 的右边缘的距离。y1 为 device 的下边缘至 plot region 的下边缘的距离，y2 为 device 的下边缘至 plot region 的上边缘的距离。<br>
<strong>pin</strong>: specify the size of the plot region in inches, (width, height)<br>
<strong>pty</strong>: default “m”, 占据可用空间的所有空间；“s”，以正方形的形式占据可用空间的最大空间。</p>
<p><strong>xpd</strong><br>
<code>par(xpd = NA)</code> clipped to device<br>
<code>par(xpd = TRUE)</code> clipped to the current figure region<br>
<code>par(xpd = FALSE)</code> clipped to the current plot region</p>
<h2 id="grdevices">grDevices</h2>
<h3 id="函数索引-v2">函数索引</h3>
<p>Devices                 List of Graphical Devices<br>
Hershey                 Hershey Vector Fonts in R<br>
Japanese                Japanese characters in R<br>
Type1Font               Type 1 and CID Fonts<br>
X11Fonts                X11 Fonts<br>
as.graphicsAnnot        Coerce an Object for Graphics Annotation<br>
as.raster               Create a Raster Object<br>
axisTicks               Compute Pretty Axis Tick Scales<br>
boxplot.stats           Box Plot Statistics<br>
check.options           Set Options with Consistency Checks<br>
chull                   Compute Convex Hull of a Set of Points<br>
cm                      Unit Transformation<br>
contourLines            Calculate Contour Lines<br>
dev.capabilities        Query Capabilities of the Current Graphics Device<br>
dev.capture             Capture device output as a raster image<br>
dev.copy                Copy Graphics Between Multiple Devices<br>
dev.cur                 Control Multiple Devices<br>
dev.flush               Hold or Flush Output on an On-Screen Graphics Device.<br>
dev.interactive         Is the Current Graphics Device Interactive?<br>
dev.size                Find Size of Device Surface<br>
dev2bitmap              Graphics Device for Bitmap Files via Ghostscript<br>
devAskNewPage           Prompt before New Page<br>
embedFonts              Embed Fonts in PostScript and PDF<br>
extendrange             Extend a Numerical Range by a Small Percentage<br>
getGraphicsEvent        Wait for a mouse or keyboard event from a graphics window<br>
grDevices-package       The R Graphics Devices and Support for Colours and Fonts<br>
grSoftVersion           Report Versions of Graphics Software<br>
n2mfrow                 Compute Default mfrow From Number of Plots<br>
nclass.Sturges          Compute the Number of Classes for a Histogram<br>
pdf                     PDF Graphics Device<br>
pdf.options             Auxiliary Function to Set/View Defaults for Arguments of pdf<br>
pictex                  A PicTeX Graphics Driver<br>
plotmath                Mathematical Annotation in R<br>
png                     BMP, JPEG, PNG and TIFF graphics devices<br>
postscript              PostScript Graphics<br>
postscriptFonts         PostScript and PDF Font Families<br>
pretty.Date             Pretty Breakpoints for Date-Time Classes<br>
ps.options              Auxiliary Function to Set/View Defaults for Arguments of postscript<br>
quartz                  macOS Quartz Device<br>
quartzFonts             quartz Fonts<br>
recordGraphics          Record Graphics Operations<br>
recordPlot              Record and Replay Plots<br>
savePlot                Save Cairo X11 Plot to File<br>
svg                     Cairographics-based SVG, PDF and PostScript Graphics Devices<br>
trans3d                 3D to 2D Transformation for Perspective Plots<br>
x11                     X Window System Graphics<br>
xfig                    XFig Graphics Device<br>
xy.coords               Extracting Plotting Structures<br>
xyTable                 Multiplicities of (x,y) Points, e.g., for a Sunflower Plot<br>
xyz.coords              Extracting Plotting Structures</p>
<p>设定颜色<br>
<code>rgb</code> | RGB 颜色设定 | <code>rgb(red, green, blue, alpha)</code><br>
rgb2hsv                 RGB to HSV Conversion<br>
gray                    Gray Level Specification<br>
gray.colors             Gray Color Palette<br>
hcl                     HCL Color Specification<br>
hsv                     HSV Color Specification<br>
make.rgb                Create colour spaces<br>
rainbow                 Color Palettes<br>
col2rgb                 Color to RGB Conversion<br>
colorRamp               Color interpolation<br>
colors                  Color Names<br>
convertColor            Convert between Colour Spaces<br>
densCols                Colors for Smooth Density Plots<br>
adjustcolor             Adjust Colors in One or More Directions Conveniently.<br>
palette                 Set or View the Graphics Palette</p>
<h3 id="图形设备-devices">图形设备 Devices</h3>
<p><code>grDevices::Devices</code> R 绘图时支持的图形设备。</p>
<ul>
<li><code>pdf</code> <code>postscript</code> <code>xfig</code> <code>bitmap</code> <code>pictex</code></li>
<li><code>X11</code> 在 X11 视窗系统下支持</li>
<li><code>svg</code> 基于 cairo 图形的 SVG 设备</li>
<li>位图 <code>png</code> <code>jpeg</code> <code>bmp</code> <code>tiff</code></li>
<li><code>quartz</code> 仅在 macOS 上支持</li>
</ul>
<p>如果未打开图形设备，高阶图形函数会自动打开设备，默认打开的设备通过 <code>options(&quot;device&quot;)</code> 指定。 返回。默认的设备为初始化设置为当前平台最合适的设备。</p>
<p>在 R 中，只允许存在一个“活动（active）”的设备，所有图形操作均在活动设备之上。只要 R 在运行，就有一个“空设备”一直处于开启状态，但仅仅作为占位，任何使用这个空设备的尝试将会打开一个新的设备。设备与一个名称和数字编号关联，数字编号范围为1到63。空设备为编号1。一旦设备被打开，空设备将变成非活动的设备。可以通过 <code>dev.next</code> 和 <code>dev.prev</code> 选择一列开启的设备中，活动的设备的上一个或者下一个设备。</p>
<p>可以通过 <code>dev.off</code> 关闭指定的设备。如果未指定编号，默认关闭当前活动的设备。如果当前活动设备被关闭，那么下一个设备会被当作活动设备。编号1的设备不能关闭。正常结束一个对话可以执行 <code>graphics.off()</code>。</p>
<p><code>dev.set</code> 将指定设备更改为活动设备。<code>dev.cur</code> 返回当前活动设备。<code>dev.list</code> 列出所有开启的设备，如果不存在开启的设备，那么返回空设备。如果不存在指定编号的设备，那么默认将 <code>dev.next</code> 所得到的设备当作活动设备。如果指定编号1设备，那么将开启新的设备，并将其设置为活动设备。</p>
<p><code>dev.new</code> 将开启新的设备。正常情况下，需要时 R 会自动开启新的设备，但这是<strong>让你开启独立于平台的设备</strong>(?疑问：原文&quot;this enables you to open further devices in a platform-indenpendent way.&quot;)。当基于文件的设备（<code>pdf</code>等），文件名将依次命名为 <code>Rplots&lt;1~99&gt;.pdf</code>。对于标准位图设备，如果未指定单位和分辨率，默认强制设置为 <code>units = &quot;in&quot;, res = 72</code>。</p>
<p>图形设备相关参数：</p>
<ul>
<li><code>title</code> 标题</li>
<li><code>width</code> 宽度</li>
<li><code>height</code> 高度</li>
<li><code>pointsize</code> 点尺寸</li>
<li><code>family</code> 字体</li>
<li><code>antialias</code> 是否抗锯齿</li>
<li><code>type</code> 类型</li>
<li><code>file</code> 文件名</li>
<li><code>bg</code> 背景色</li>
<li><code>canvas</code> 画布</li>
<li><code>dpi</code> 分辨率（每英寸点数）</li>
</ul>
<p>PDF 设备参数：</p>
<ul>
<li><code>paper</code> 纸张类型，<code>&quot;a4&quot;,&quot;letter&quot;,&quot;legal&quot;,...</code></li>
<li><code>bg</code> 背景色，默认为 <code>&quot;transparent&quot;</code></li>
<li><code>fg</code> 前景色，默认为 <code>&quot;black&quot;</code></li>
<li><code>pointsize</code> 默认为 <code>12</code>，1/72英寸为一个点</li>
<li><code>colormodel</code> 颜色模式 <code>&quot;srgb&quot;,&quot;gray&quot;,&quot;cmyk&quot;</code>，默认为 <code>&quot;srgb&quot;</code></li>
</ul>
<p>PDF 设备并不嵌入字体到 PDF 文件中，所以建议使用常见的字体例如：<code>&quot;Times&quot;(=&quot;serif&quot;),&quot;Helvetica&quot;(=&quot;sans&quot;),&quot;Courier&quot;(=&quot;mono&quot;)</code>。</p>
<ul>
<li>默认设备尺寸为 7 英寸的正方形。</li>
<li>字体大小为 “big points”。</li>
<li>默认字体为 Helvetica。</li>
<li>线宽为1/96英寸的倍数，最小为 0.01。</li>
<li>可支持任意弧度的圆形。</li>
<li>颜色模式默认为 sRGB。</li>
<li>如果线宽特别细，线型默认强制为实线。</li>
</ul>
<p>位图设备参数：</p>
<ul>
<li>默认宽高均为 <code>480px</code></li>
<li>默认单位为 <code>px</code></li>
<li>默认点大小为 <code>12</code></li>
<li>默认背景色为 <code>&quot;white&quot;</code></li>
<li>默认分辨率为 <code>res = 72</code> 单位为 ppi</li>
</ul>
<h2 id="plyr">plyr</h2>
<p>split 分割：让复杂的问题分解成小块<br>
apply 套用：对每一个小块进行计算<br>
combine 组合：汇集每一小块的结果</p>
<p>plyr 函数命名规律与输入对象类型和输出对象类型有关，有以下几种数据对象类型：</p>
<ul>
<li>a = array</li>
<li>l = list</li>
<li>d = data.frame</li>
<li>m = multiple inputs</li>
<li>r = repeat multiple times</li>
<li>_ = nothing</li>
</ul>
<p>plyr 对于常见的数据分析问题提供了一系列辅助函数：</p>
<ul>
<li>arrange: 重新排序</li>
<li>mutate: 增加新列，或者修改已存在的列，并将修改后的指派为新列</li>
<li>summarise: 类似 mutate，但是新创建一个 data frame，不保存旧的 data frame 中的列</li>
<li>join:</li>
<li>match_df</li>
<li>colwise</li>
<li>rename: 修改 data frame 的列名</li>
<li>round_any</li>
<li>count: 快速计数，并返回 data frame</li>
</ul>
<hr>
<h2 id="stats">stats</h2>
<h3 id="p-adjust">p.adjust</h3>
<p>使用特定方法对一系列 p 值进行矫正。方法包括：“holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “BY”, “fdr”, “none”。<br>
<code>p.adjust(p, method = p.adjust.methods)</code></p>
<ul>
<li>p 为数值类型的向量</li>
<li>method 字符串，矫正方法</li>
</ul>
<blockquote>
<p>The first four methods are designed to give strong control of the family-wise error rate.  There seems no reason to use the unmodified Bonferroni correction because it is dominated by Holm’s method, which is also valid under arbitrary assumptions.</p>
</blockquote>
<h3 id="contrasts">contrasts</h3>
<p>设置和查看因子的 contrasts。</p>
<ul>
<li>如果因子并未显式地设置 contrasts，那么使用默认的 contrasts。<code>options(&quot;contrasts&quot;)</code></li>
<li></li>
</ul>
<h2 id="afex">afex</h2>
<p>round_ps: 根据 p 值大小的范围调整小数点位数。0.99-0.01 为两位小数点；p &lt; 0.01 为三位小数点；p &lt; 0.001 为四位小数点。</p>
<p>contrast: 提供对 ref.grid 对象的分析，或对 lsmobj 对象的后续分析（follow-up analyses）。<br>
pairs: 相当于 contrast 函数中传入 <code>method = &quot;pairwise&quot;</code>，即成对比较。</p>
<h2 id="lsmeans">lsmeans</h2>
<p>summary: Use these methods to summarize, print, plot, or examine objects of class ‘“ref.grid”’.</p>
<ul>
<li>adjust:
<ul>
<li>“tukey”: available for two-sided cases only</li>
<li>“scheffe”</li>
<li>“sidak”</li>
<li>“bonferroni”</li>
<li>“dunnettx”</li>
<li>“mvt”</li>
<li>“none”</li>
</ul>
</li>
</ul>
<h2 id="plotrix">plotrix</h2>
<p>raw.means.plot: 用来绘制最多两因素实验设计结果的图形。该函数将原始数据绘制在背景上，将因子或者区组的均值绘制在前景。</p>
<h1>统计检验</h1>
<h2 id="方差分析">方差分析</h2>
<h3 id="stats-aov">stats::aov</h3>
<p><code>aov(formula, data, projections = FALSE, qr = TRUE, contrasts = NULL, ...)</code></p>
<p>formula 中包含的 Error 项: 指定误差项，在重复测量方差分析、裂区设计中使用。</p>
<blockquote>
<p><strong>aov is designed for balanced designs, and the results can be hard to interpret without balance</strong>: beware that missing values in the response(s) will likely lose the balance. If there are two or more error strata, the methods used are statistically inefficient without balance, and <strong>it may be better to use lme in package nlme.</strong></p>
<p>Balance can be checked with the replications function.</p>
<p>The default ‘contrasts’ in R are not orthogonal contrasts, and aov and its helper functions will work better with such contrasts: see the examples for how to select these.</p>
</blockquote>
<p><code>aov</code> 只适用于平衡设计（没有缺失值）。当存在两个或更多的误差项时，该方法将在统计上失效。此时可以使用 <code>nlme::lme</code>。数据是否平衡可以通过 <code>replications()</code> 函数检测。</p>
<p>默认的 ‘contrasts’ 为非正交对比，<code>aov</code> 及其辅助函数在正交对比下更有效。可以通过 <code>options(contrasts = c(&quot;contr.helmert&quot;, &quot;contr.poly&quot;))</code> 修改 ‘contrasts’。</p>
<h3 id="car-anova">car::Anova</h3>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## S3 method for class 'lm'</span></div><div class="line">Anova(mod, error, type=c(<span class="string">"ii"</span>, <span class="string">"iii"</span>, <span class="number">2</span>, <span class="number">3</span>),</div><div class="line">  white.adjust=c(<span class="literal">FALSE</span>, <span class="literal">TRUE</span>, <span class="string">"hc3"</span>, <span class="string">"hc0"</span>, <span class="string">"hc1"</span>, <span class="string">"hc2"</span>, <span class="string">"hc4"</span>),</div><div class="line">  vcov.=<span class="literal">NULL</span>, singular.ok, <span class="keyword">...</span>)</div></pre></td></tr></table></figure>
<p>用于计算模型对象（lm, glm, multinom, …）的 type-II 或者 type-III 方差分析表。</p>
<p>问题：检验类型，type-I, type-II, type-III?</p>
<blockquote>
<p>The designations “type-II” and “type-III” are borrowed from SAS, but the definitions used here do not correspond precisely to those employed by SAS. <strong>Type-II tests are calculated according to the principle of marginality, testing each term after all others</strong>, except ignoring the term’s higher-order relatives; <strong>so-called type-III tests violate marginality, testing each term in the model after all of the others.</strong> This definition of Type-II tests corresponds to the tests produced by SAS for analysis-of-variance models, where all of the predictors are factors, but not more generally (i.e., when there are quantitative predictors). <strong>Be very careful in formulating the model for type-III tests, or the hypotheses tested will not make sense.</strong></p>
<p>As implemented here, type-II Wald tests are a generalization of the linear hypotheses used to gen- erate these tests in linear models.</p>
<p>The standard R anova function calculates sequential (“type-I”) tests. These rarely test interesting hypotheses in unbalanced designs.</p>
</blockquote>
<ul>
<li><a href="http://myowelt.blogspot.de/2008/05/obtaining-same-anova-results-in-r-as-in.html" target="_blank" rel="external">btaining the same ANOVA results in R as in SPSS - the difficulties with Type II and Type III sums of squares</a></li>
<li><a href="http://stats.stackexchange.com/questions/20452/how-to-interpret-type-i-type-ii-and-type-iii-anova-and-manova" target="_blank" rel="external">How to interpret type I, type II, and type III ANOVA and MANOVA?</a></li>
<li><a href="http://stats.stackexchange.com/questions/60362/choice-between-type-i-type-ii-or-type-iii-anova" target="_blank" rel="external">Choice between Type-I, Type-II, or Type-III ANOVA</a></li>
<li><a href="http://stats.stackexchange.com/questions/4544/how-does-one-do-a-type-iii-ss-anova-in-r-with-contrast-codes" target="_blank" rel="external">How does one do a Type-III SS ANOVA in R with contrast codes?</a></li>
<li><a href="https://afni.nimh.nih.gov/sscc/gangc/SS.html" target="_blank" rel="external">Types of Sums of Squares</a></li>
</ul>
<p>进行重复测量方差分析的步骤：</p>
<p><strong>0. 准备数据</strong></p>
<p><code>car::Anova()</code>需要宽型数据，也就是数据横着排列。所以事先要将数据整理为宽型数据。另外，还需要构造一个矩阵（变量模型），用来表示实验设计中变量和变量水平。其中每一列为自变量，列中的每一项为数据中对应的处理。</p>
<p>例如：<br>
如下，有一批数据：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">subject   a.1  a.2  b.1  b.2</div><div class="line">      <span class="number">1</span>   <span class="number">2.3</span>  <span class="number">3.4</span>  <span class="number">3.2</span>  <span class="number">4.5</span></div><div class="line">      <span class="number">2</span>   <span class="number">2.4</span>  <span class="number">3.6</span>  <span class="number">3.0</span>  <span class="number">3.9</span></div><div class="line">    <span class="keyword">...</span>   <span class="keyword">...</span>  <span class="keyword">...</span>  <span class="keyword">...</span>  <span class="keyword">...</span></div></pre></td></tr></table></figure>
<p>此时变量模型应该为：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var1  var2</div><div class="line">   a     <span class="number">1</span></div><div class="line">   a     <span class="number">2</span></div><div class="line">   b     <span class="number">1</span></div><div class="line">   b     <span class="number">2</span></div></pre></td></tr></table></figure>
<p><strong>1. 将数组列组合称矩阵</strong><br>
使用 <code>cbind()</code> 组合原始数据列。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataBind &lt;- cbind(<span class="keyword">...</span>)</div></pre></td></tr></table></figure>
<p><strong>2. 定义模型</strong><br>
使用 <code>lm()</code> 生成线性模型。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mod &lt;- lm(dataBind ~ <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><strong>3. 方差分析</strong><br>
使用 <code>car::Anova(mod, idata, idesign)</code> 进行方差分析。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">analysis &lt;- Anova(mod = mod,</div><div class="line">                  idata = idataTwoWayRepeatedMeasures,</div><div class="line">                  idesign = ~var1*var2)</div></pre></td></tr></table></figure>
<p><strong>4. 呈现方差分析结果</strong><br>
<code>summary(analysis)</code></p>
<p>计算效应量（偏eta方）</p>
<p><code>heplots::etasq(mod, anova = TRUE)</code></p>
<h3 id="ez-ezanova">ez::ezANOVA</h3>
<p><code>ezANOVA()</code><br>
计算效应量：<code>schoRsch::anova_out()</code></p>
<h3 id="lme4-lmer">lme4::lmer</h3>
<p><a href="http://psych.wisc.edu/moore/R_Analysis_of_Variance_Handouts_html.html" target="_blank" rel="external">doing Analysis of Variance in Psychology</a></p>
<p>参考：<br>
<a href="https://egret.psychol.cam.ac.uk/statistics/R/index.html" target="_blank" rel="external">Local tips for R</a><br>
<a href="http://gribblelab.org/stats/index.html" target="_blank" rel="external">Introduction to Statistics Using R</a> Paul Gribble 课程内容，讲解如何使用 R 进行心理学研究中的统计分析。</p>
]]></content>
    
    <summary type="html">
    
      在使用 R 语言过程中的全部记录，包括常用包和函数的用法记录。
    
    </summary>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Wiki/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Emacs 个人参考</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-wiki-emacs/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-wiki-emacs/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-03T08:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1>markdown-mode</h1>
<p>总是容易忘记 markdown mode 的快捷键，这回刻意记下常用的快捷键。</p>
<p>在 markdown-mode 下，打开帮助文档 <kbd>C-h m</kbd>（我自己将 <kbd>C-h</kbd> 改为了 <kbd>f1</kbd>）。markdown-mode 的 key-map 的前缀命令为 <kbd>C-c</kbd>，也就是按这个键能调出与 markdown-mode 有关的一些命令的快捷键。</p>
<h2 id="对标题的操作">对标题的操作</h2>
<ul>
<li><code>&lt;M-S-down/up&gt;</code> <code>markdown-move-subtree-down/up</code> 向下或向上移动标题。</li>
<li><code>&lt;M-S-left/right&gt;</code> <code>markdown-promote/demote-subtree</code> 标题升级或降级。
<ul>
<li>当标题为 <code># title #</code> 通过 <code>&lt;M-S-left&gt;</code> 得到 <code>title</code>；<code>&lt;M-S-right&gt;</code> 得到 <code>## title ##</code>。</li>
<li>最低级数为第六级 <code>###### title ######</code>。</li>
</ul>
</li>
<li><code>&lt;M-left/right&gt;</code> <code>markdown-promote/demote</code> 循环改变标题级数（升或降）。</li>
<li><code>&lt;S-tab&gt;</code> <code>markdown-shifttab</code> 折叠标题内容</li>
<li><code>C-c C-t 1/2/3/4/5/6</code> <code>markdown-insert-header-atx-1/2/3/4/5/6</code></li>
</ul>
<h2 id="跳转与移动">跳转与移动</h2>
<p>跳转标题</p>
<ul>
<li><code>C-c C-b/f</code> <code>markdown-backward/forward-same-level</code> 同级跳转（后或前）。</li>
<li><code>C-c C-n/p</code> <code>markdown-next/previous-visible-heading</code> 标题跳转（后或前）。</li>
</ul>
<p>跳转链接</p>
<ul>
<li><code>M-n/p</code> <code>markdown-next/previous-link</code></li>
<li><code>M-{/}</code> <code>markdown-backward/forward-paragraph</code></li>
</ul>
<h2 id="添加内容">添加内容</h2>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">列表</td>
<td style="text-align:left"><code>&lt;M-RET&gt;</code> <code>C-c C-j</code></td>
</tr>
<tr>
<td style="text-align:left">添分隔符</td>
<td style="text-align:left"><code>C-c -</code></td>
</tr>
<tr>
<td style="text-align:left">添加行引用</td>
<td style="text-align:left"><code>C-c C-s b</code></td>
</tr>
<tr>
<td style="text-align:left">块引用</td>
<td style="text-align:left"><code>C-c C-s C-b</code></td>
</tr>
<tr>
<td style="text-align:left">行代码</td>
<td style="text-align:left"><code>C-c C-s c</code></td>
</tr>
<tr>
<td style="text-align:left">代码块</td>
<td style="text-align:left"><code>C-c C-s P</code></td>
</tr>
<tr>
<td style="text-align:left">斜体</td>
<td style="text-align:left"><code>C-c C-s e</code></td>
</tr>
<tr>
<td style="text-align:left">加粗</td>
<td style="text-align:left"><code>C-c C-s s</code></td>
</tr>
<tr>
<td style="text-align:left">键盘</td>
<td style="text-align:left"><code>C-c C-s k</code></td>
</tr>
<tr>
<td style="text-align:left">行预排格式文本</td>
<td style="text-align:left"><code>C-c C-s p</code></td>
</tr>
<tr>
<td style="text-align:left">块预排格式文本</td>
<td style="text-align:left"><code>C-c C-s C-p</code></td>
</tr>
<tr>
<td style="text-align:left">引用图片</td>
<td style="text-align:left"><code>C-c TAB I</code></td>
</tr>
<tr>
<td style="text-align:left">图片</td>
<td style="text-align:left"><code>C-c TAB i</code></td>
</tr>
<tr>
<td style="text-align:left">脚注</td>
<td style="text-align:left"><code>C-c C-a f</code></td>
</tr>
<tr>
<td style="text-align:left">链接</td>
<td style="text-align:left"><code>C-c C-a l</code></td>
</tr>
<tr>
<td style="text-align:left">网址</td>
<td style="text-align:left"><code>C-c C-a u</code></td>
</tr>
<tr>
<td style="text-align:left">wiki链接</td>
<td style="text-align:left"><code>C-c C-a w</code></td>
</tr>
</tbody>
</table>
<h1>help-mode</h1>
<p>用于阅读帮助文档和跳转文档内引用的主要编辑模式（Major mode）</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>TAB</code></td>
<td style="text-align:left">forward-button 下一个按钮/链接</td>
</tr>
<tr>
<td style="text-align:left"><code>S-TAB</code></td>
<td style="text-align:left">backward-button 上一个按钮/链接</td>
</tr>
<tr>
<td style="text-align:left"><code>SPC</code></td>
<td style="text-align:left">scroll-up-command 向下滚动内容</td>
</tr>
<tr>
<td style="text-align:left"><code>DEL</code>/<code>S-SPC</code></td>
<td style="text-align:left">scroll-down-command 向上滚动内容</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">beginning-of-buffer 缓冲区开始</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">end-of-buffer 缓冲区末尾</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code>/<code>h</code></td>
<td style="text-align:left">describe-mode 描述模式</td>
</tr>
<tr>
<td style="text-align:left"><code>g</code></td>
<td style="text-align:left">revert-buffer 更新</td>
</tr>
<tr>
<td style="text-align:left"><code>l</code>/<code>C-c C-b</code></td>
<td style="text-align:left">help-go-back 回退</td>
</tr>
<tr>
<td style="text-align:left"><code>r</code>/<code>C-c C-f</code></td>
<td style="text-align:left">help-go-forward 前进</td>
</tr>
<tr>
<td style="text-align:left"><code>q</code></td>
<td style="text-align:left">quit-window 推出帮助窗口</td>
</tr>
<tr>
<td style="text-align:left"><code>RET</code>/<code>C-c C-c</code></td>
<td style="text-align:left">help-follow-symbol 跳转到光标处的符号</td>
</tr>
</tbody>
</table>
<h1>ess-help-mode</h1>
<h2 id="导航">导航</h2>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">移动到 buffer 顶端</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">移动到 buffer 末端</td>
</tr>
<tr>
<td style="text-align:left"><code>RET</code></td>
<td style="text-align:left">移动到下一行</td>
</tr>
<tr>
<td style="text-align:left"><code>SPC</code></td>
<td style="text-align:left">向下滚动</td>
</tr>
<tr>
<td style="text-align:left"><code>S-SPC</code></td>
<td style="text-align:left">向上滚动</td>
</tr>
<tr>
<td style="text-align:left"><code>n</code></td>
<td style="text-align:left">跳转到下一小节</td>
</tr>
<tr>
<td style="text-align:left"><code>p</code></td>
<td style="text-align:left">跳转到上一小节</td>
</tr>
<tr>
<td style="text-align:left"><code>C-c C-y</code></td>
<td style="text-align:left">跳转到 ess</td>
</tr>
<tr>
<td style="text-align:left"><code>C-c C-z</code></td>
<td style="text-align:left">跳转到 ess 的命令行末端</td>
</tr>
<tr>
<td style="text-align:left"><code>s</code></td>
<td style="text-align:left">prefix command, 跳转</td>
</tr>
</tbody>
</table>
<hr>
<p>0 … 9          digit-argument<br>
C-c             Prefix Command<br>
ESC             Prefix Command</p>
<ul>
<li>
<pre><code>          negative-argument
</code></pre>
</li>
</ul>
<p>/               isearch-forward<br>
0 … 9          digit-argument</p>
<p>a | ess-display-help-apropos<br>
h | ess-display-help-on-object<br>
i | ess-display-package-index<br>
v | ess-display-vignettes<br>
w | ess-display-help-in-browser</p>
<p>f               ess-eval-function-or-paragraph-and-step<br>
l               ess-eval-line-and-step<br>
r               ess-eval-region-and-go<br>
<c-return>      ess-eval-region-or-line-and-step</c-return></p>
<p>g               revert-buffer<br>
q               quit-window<br>
k               kill-this-buffer<br>
?               ess-describe-help-mode<br>
x               ess-kill-buffer-and-go</p>
<p>s               Prefix Command<br>
<remap>         Prefix Command</remap></p>
<p>C-c C-c         ess-eval-region-or-function-or-paragraph-and-step<br>
C-c C-d         ess-doc-map<br>
C-c C-e         ess-extra-map</p>
<p>C-c C-f         ess-eval-function<br>
C-c C-j         ess-eval-line<br>
C-c C-n         ess-eval-line-and-step<br>
C-c C-r         ess-eval-region</p>
<p>C-c C-k         ess-request-a-process<br>
C-c C-l         ess-load-file</p>
<p>C-c C-s         ess-switch-process<br>
C-c C-t         ess-dev-map<br>
C-c C-v         ess-display-help-on-object</p>
<p>C-c ESC         Prefix Command<br>
C-c h           ess-handy-commands</p>
<p>C-M-a           ess-goto-beginning-of-function-or-para<br>
C-M-e           ess-goto-end-of-function-or-para<br>
C-M-x           ess-eval-function</p>
<p>s &lt;             beginning-of-buffer<br>
s &gt;             end-of-buffer<br>
s ?             ess-describe-sec-map<br>
s D             ess-skip-to-help-section<br>
s a             ess-skip-to-help-section<br>
s d … s e      ess-skip-to-help-section<br>
s n             ess-skip-to-help-section<br>
s r … s v      ess-skip-to-help-section</p>
<p>C-c C-t C-b     ess-bp-set<br>
C-c C-t C-d     ess-debug-flag-for-debugging<br>
C-c C-t C-e     ess-debug-toggle-error-action<br>
C-c C-t C-k     ess-bp-kill-all<br>
C-c C-t C-l     ess-bp-set-logger<br>
C-c C-t C-n     ess-bp-next<br>
C-c C-t C-o     ess-bp-toggle-state<br>
C-c C-t C-p     ess-bp-previous<br>
C-c C-t C-s     ess-r-set-evaluation-env<br>
C-c C-t C-u     ess-debug-unflag-for-debugging<br>
C-c C-t C-w     ess-watch<br>
C-c C-t 0 … C-c C-t 9          ess-electric-selection<br>
C-c C-t ?       ess-tracebug-show-help<br>
C-c C-t B       ess-bp-set-conditional<br>
C-c C-t I       ess-debug-goto-input-event-marker<br>
C-c C-t K       ess-bp-kill-all<br>
C-c C-t L       ess-bp-set-logger<br>
C-c C-t T       ess-toggle-tracebug<br>
C-c C-t `       ess-show-traceback<br>
C-c C-t b       ess-bp-set<br>
C-c C-t d       ess-debug-flag-for-debugging<br>
C-c C-t e       ess-debug-toggle-error-action<br>
C-c C-t i       ess-debug-goto-input-event-marker<br>
C-c C-t k       ess-bp-kill<br>
C-c C-t l       ess-r-devtools-load-package<br>
C-c C-t n       ess-bp-next<br>
C-c C-t o       ess-bp-toggle-state<br>
C-c C-t p       ess-bp-previous<br>
C-c C-t s       ess-r-set-evaluation-env<br>
C-c C-t u       ess-debug-unflag-for-debugging<br>
C-c C-t w       ess-watch<br>
C-c C-t ~       ess-show-call-stack<br>
C-c C-t C-S-b   ess-bp-set-conditional<br>
C-c C-t C-S-d   ess-debug-unflag-for-debugging</p>
<p>C-c C-e C-d     ess-dump-object-into-edit-buffer<br>
C-c C-e C-e     ess-execute<br>
C-c C-e TAB     ess-install-library<br>
C-c C-e C-l     ess-load-library<br>
C-c C-e C-s     ess-set-style<br>
C-c C-e C-t     ess-build-tags-for-directory<br>
C-c C-e C-w     ess-execute-screen-options<br>
C-c C-e /       ess-set-working-directory<br>
C-c C-e d       ess-dump-object-into-edit-buffer<br>
C-c C-e e       ess-execute<br>
C-c C-e i       ess-install-library<br>
C-c C-e l       ess-load-library<br>
C-c C-e s       ess-set-style<br>
C-c C-e t       ess-build-tags-for-directory<br>
C-c C-e w       ess-execute-screen-options</p>
<p>C-c C-d C-a     ess-display-help-apropos<br>
C-c C-d C-d     ess-display-help-on-object<br>
C-c C-d C-e     ess-describe-object-at-point<br>
C-c C-d TAB     ess-display-package-index<br>
C-c C-d RET     ess-manual-lookup<br>
C-c C-d C-o     ess-display-demos<br>
C-c C-d C-r     ess-reference-lookup<br>
C-c C-d C-v     ess-display-vignettes<br>
C-c C-d C-w     ess-help-web-search<br>
C-c C-d a       ess-display-help-apropos<br>
C-c C-d d       ess-display-help-on-object<br>
C-c C-d e       ess-describe-object-at-point<br>
C-c C-d i       ess-display-package-index<br>
C-c C-d m       ess-manual-lookup<br>
C-c C-d o       ess-display-demos<br>
C-c C-d r       ess-reference-lookup<br>
C-c C-d v       ess-display-vignettes<br>
C-c C-d w       ess-help-web-search</p>
<p>C-c M-f         ess-eval-function-and-go<br>
C-c M-j         ess-eval-line-and-go<br>
C-c M-l         ess-load-file<br>
C-c M-r         ess-eval-region-and-g</p>
<h1>dired-mode</h1>
<p>用于编辑文件和路径列表的主要编辑模式（Major mode）。</p>
<p>键前缀</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">bindings</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>%</code></td>
<td style="text-align:left">高级正则表达式操作</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">高级选中操作</td>
</tr>
<tr>
<td style="text-align:left"><code>:</code></td>
<td style="text-align:left">加密验证操作</td>
</tr>
</tbody>
</table>
<p>shell命令</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>!</code>/<code>X</code></td>
<td style="text-align:left">dired-do-shell-command 执行shell命令</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">dired-do-async-shell-command 异步执行shell命令</td>
</tr>
<tr>
<td style="text-align:left"><code>A</code></td>
<td style="text-align:left">dired-do-find-regexp 正则表达式查找</td>
</tr>
<tr>
<td style="text-align:left"><code>Q</code></td>
<td style="text-align:left">dired-do-find-regexp-and-replace</td>
</tr>
<tr>
<td style="text-align:left"><code>B</code></td>
<td style="text-align:left">dired-do-byte-compile 字节编译</td>
</tr>
<tr>
<td style="text-align:left"><code>C</code></td>
<td style="text-align:left">dired-do-copy 复制</td>
</tr>
<tr>
<td style="text-align:left"><code>D</code></td>
<td style="text-align:left">dired-do-delete 删除</td>
</tr>
<tr>
<td style="text-align:left"><code>H</code></td>
<td style="text-align:left">dired-do-hardlink 硬链接</td>
</tr>
<tr>
<td style="text-align:left"><code>S</code></td>
<td style="text-align:left">dired-do-symlink</td>
</tr>
<tr>
<td style="text-align:left"><code>L</code></td>
<td style="text-align:left">dired-do-load 加载</td>
</tr>
<tr>
<td style="text-align:left"><code>M</code></td>
<td style="text-align:left">dired-do-chmod</td>
</tr>
<tr>
<td style="text-align:left"><code>O</code></td>
<td style="text-align:left">dired-do-chown</td>
</tr>
<tr>
<td style="text-align:left"><code>G</code></td>
<td style="text-align:left">dired-do-chgrp</td>
</tr>
<tr>
<td style="text-align:left"><code>P</code></td>
<td style="text-align:left">dired-do-print</td>
</tr>
<tr>
<td style="text-align:left"><code>R</code></td>
<td style="text-align:left">dired-do-rename</td>
</tr>
<tr>
<td style="text-align:left"><code>T</code></td>
<td style="text-align:left">dired-do-touch</td>
</tr>
<tr>
<td style="text-align:left"><code>Z</code></td>
<td style="text-align:left">dired-do-compress 压缩</td>
</tr>
<tr>
<td style="text-align:left"><code>c</code></td>
<td style="text-align:left">dired-do-compress-to 压缩至…</td>
</tr>
<tr>
<td style="text-align:left"><code>k</code></td>
<td style="text-align:left">dired-do-kill-lines 删除行</td>
</tr>
<tr>
<td style="text-align:left"><code>l</code></td>
<td style="text-align:left">dired-do-redisplay 重新显示</td>
</tr>
<tr>
<td style="text-align:left"><code>x</code></td>
<td style="text-align:left">dired-do-flagged-delete 删除标记的项目</td>
</tr>
</tbody>
</table>
<p>对文件的操作</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>W</code></td>
<td style="text-align:left">browse-url-of-dired-file 使用外部应用打开文件</td>
</tr>
<tr>
<td style="text-align:left"><code>a</code></td>
<td style="text-align:left">dired-find-alternate-file 打开替代文件（默认关闭）</td>
</tr>
<tr>
<td style="text-align:left"><code>j</code></td>
<td style="text-align:left">dired-goto-file 去往文件</td>
</tr>
<tr>
<td style="text-align:left"><code>o</code></td>
<td style="text-align:left">dired-find-file-other-window 从另一窗口打开</td>
</tr>
<tr>
<td style="text-align:left"><code>v</code></td>
<td style="text-align:left">dired-view-file 阅读文件（只读）</td>
</tr>
<tr>
<td style="text-align:left"><code>C-o</code></td>
<td style="text-align:left">dired-display-file 显示文件内容（只读）</td>
</tr>
<tr>
<td style="text-align:left"><code>RET</code>/<code>e</code>/<code>f</code></td>
<td style="text-align:left">dired-find-file 打开文件（可写）</td>
</tr>
<tr>
<td style="text-align:left"><code>y</code></td>
<td style="text-align:left">dired-show-file-type 显示文件类型</td>
</tr>
<tr>
<td style="text-align:left"><code>w</code></td>
<td style="text-align:left">dired-copy-filename-as-kill 复制文件名</td>
</tr>
<tr>
<td style="text-align:left"><code>s</code></td>
<td style="text-align:left">dired-sort-toggle-or-edit 排序</td>
</tr>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">dired-diff 比较差异</td>
</tr>
<tr>
<td style="text-align:left"><code>#</code></td>
<td style="text-align:left">dired-flag-auto-save-files 标记自动保存文件</td>
</tr>
</tbody>
</table>
<p>对路径的操作</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>$</code></td>
<td style="text-align:left">dired-hide-subdir 隐藏子路径</td>
</tr>
<tr>
<td style="text-align:left"><code>M-$</code></td>
<td style="text-align:left">dired-hide-all 隐藏所有子路径</td>
</tr>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">dired-create-directory 新创建路径</td>
</tr>
<tr>
<td style="text-align:left"><code>i</code></td>
<td style="text-align:left">dired-maybe-insert-subdir 在当前窗口打开子路径</td>
</tr>
<tr>
<td style="text-align:left"><code>.</code></td>
<td style="text-align:left">dired-clean-directory 清理路径</td>
</tr>
</tbody>
</table>
<p>标记与取消标记</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>d</code></td>
<td style="text-align:left">dired-flag-file-deletion 标记要删除的对象</td>
</tr>
<tr>
<td style="text-align:left"><code>m</code></td>
<td style="text-align:left">dired-mark 选中</td>
</tr>
<tr>
<td style="text-align:left"><code>u</code></td>
<td style="text-align:left">dired-unmark 取消选中</td>
</tr>
<tr>
<td style="text-align:left"><code>M-{</code></td>
<td style="text-align:left">dired-prev-marked-file 上一个选中</td>
</tr>
<tr>
<td style="text-align:left"><code>M-}</code></td>
<td style="text-align:left">dired-next-marked-file 下一个选中</td>
</tr>
<tr>
<td style="text-align:left"><code>U</code>/<code>M-DEL</code></td>
<td style="text-align:left">dired-unmark-all-marks 全部取消选中</td>
</tr>
<tr>
<td style="text-align:left"><code>DEL</code></td>
<td style="text-align:left">dired-unmark-backward 退回取消选中</td>
</tr>
<tr>
<td style="text-align:left"><code>t</code></td>
<td style="text-align:left">dired-toggle-marks 选中取反</td>
</tr>
<tr>
<td style="text-align:left"><code>~</code></td>
<td style="text-align:left">dired-flag-backup-files 标记备份文件</td>
</tr>
</tbody>
</table>
<p>导航快捷键</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>SPC</code>/<code>n</code></td>
<td style="text-align:left">dired-next-line 下一行</td>
</tr>
<tr>
<td style="text-align:left"><code>S-SPC</code>/<code>p</code></td>
<td style="text-align:left">dired-previous-line 上一行</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">dired-prev-dirline 上一行文件路径</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">dired-next-dirline 下一行文件路径</td>
</tr>
<tr>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left">dired-up-directory 上一页路径</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code></td>
<td style="text-align:left">dired-summary 文件路径总结</td>
</tr>
<tr>
<td style="text-align:left"><code>C-M-d</code></td>
<td style="text-align:left">dired-tree-down 下一级文件树</td>
</tr>
<tr>
<td style="text-align:left"><code>C-M-u</code></td>
<td style="text-align:left">dired-tree-up 上一级文件树</td>
</tr>
<tr>
<td style="text-align:left"><code>C-M-n</code></td>
<td style="text-align:left">dired-next-subdir 下一个子路径</td>
</tr>
<tr>
<td style="text-align:left"><code>C-M-p</code></td>
<td style="text-align:left">dired-prev-subdir 上一个子路径</td>
</tr>
</tbody>
</table>
<p>其他</p>
<table>
<thead>
<tr>
<th style="text-align:left">Key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>g</code></td>
<td style="text-align:left">revert-buffer 重载/更新</td>
</tr>
<tr>
<td style="text-align:left"><code>h</code></td>
<td style="text-align:left">describe-mode 打开模式文档</td>
</tr>
<tr>
<td style="text-align:left"><code>q</code></td>
<td style="text-align:left">quit-window 推出窗口</td>
</tr>
<tr>
<td style="text-align:left"><code>(</code></td>
<td style="text-align:left">dired-hide-details-mode 细节隐藏模式切换</td>
</tr>
</tbody>
</table>
<h1>evil-mode</h1>
<h2 id="evil-window-map">evil-window-map</h2>
<p>Keymap for window-related commands.</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C-b</td>
<td style="text-align:left">evil-window-bottom-right</td>
</tr>
<tr>
<td style="text-align:left">C-c</td>
<td style="text-align:left">evil-window-delete</td>
</tr>
<tr>
<td style="text-align:left">C-f</td>
<td style="text-align:left">ffap-other-window</td>
</tr>
<tr>
<td style="text-align:left">C-n</td>
<td style="text-align:left">evil-window-new</td>
</tr>
<tr>
<td style="text-align:left">C-o</td>
<td style="text-align:left">delete-other-windows</td>
</tr>
<tr>
<td style="text-align:left">C-p</td>
<td style="text-align:left">evil-window-mru</td>
</tr>
<tr>
<td style="text-align:left">C-r</td>
<td style="text-align:left">evil-window-rotate-downwards</td>
</tr>
</tbody>
</table>
<p>C-s    | evil-window-split<br>
C-v    | evil-window-vsplit</p>
<p>C-t    | evil-window-top-left</p>
<p>C-w    | evil-window-next<br>
C-_    | evil-window-set-height</p>
<ul>
<li>
<pre><code> | evil-window-increase-height
</code></pre>
</li>
</ul>
<ul>
<li>
<pre><code> | evil-window-decrease-height
</code></pre>
</li>
</ul>
<p>&lt;      | evil-window-decrease-width<br>
=      | balance-windows</p>
<blockquote>
<pre><code> | evil-window-increase-width
</code></pre>
</blockquote>
<p>H      | evil-window-move-far-left<br>
J      | evil-window-move-very-bottom<br>
K      | evil-window-move-very-top<br>
L      | evil-window-move-far-right<br>
R      | evil-window-rotate-upwards<br>
S      | evil-window-split<br>
W      | evil-window-prev<br>
_      | evil-window-set-height<br>
b      | evil-window-bottom-right<br>
c      | evil-window-delete<br>
h      | evil-window-left<br>
j      | evil-window-down<br>
k      | evil-window-up<br>
l      | evil-window-right<br>
n      | evil-window-new<br>
o      | delete-other-windows<br>
p      | evil-window-mru<br>
r      | evil-window-rotate-downwards<br>
s      | evil-window-split<br>
t      | evil-window-top-left<br>
v      | evil-window-vsplit<br>
w      | evil-window-next<br>
| | evil-window-set-width<br>
C-S-h  | evil-window-move-far-left<br>
C-S-j  | evil-window-move-very-bottom<br>
C-S-k  | evil-window-move-very-top<br>
C-S-l  | evil-window-move-far-right<br>
C-S-r  | evil-window-rotate-upwards<br>
C-S-s  | evil-window-split<br>
C-S-w  | evil-window-prev</p>
<h2 id="evil-insert-state-map">evil-insert-state-map</h2>
<p>Keymap for Insert state.</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C-a</td>
<td style="text-align:left">evil-paste-last-insertion</td>
</tr>
<tr>
<td style="text-align:left">C-d</td>
<td style="text-align:left">evil-shift-left-line</td>
</tr>
<tr>
<td style="text-align:left">C-e</td>
<td style="text-align:left">evil-copy-from-below</td>
</tr>
<tr>
<td style="text-align:left">C-k</td>
<td style="text-align:left">evil-insert-digraph</td>
</tr>
<tr>
<td style="text-align:left">C-n</td>
<td style="text-align:left">evil-complete-next</td>
</tr>
<tr>
<td style="text-align:left">C-o</td>
<td style="text-align:left">evil-execute-in-normal-state</td>
</tr>
<tr>
<td style="text-align:left">C-p</td>
<td style="text-align:left">evil-complete-previous</td>
</tr>
<tr>
<td style="text-align:left">C-r</td>
<td style="text-align:left">evil-paste-from-register</td>
</tr>
<tr>
<td style="text-align:left">C-t</td>
<td style="text-align:left">evil-shift-right-line</td>
</tr>
<tr>
<td style="text-align:left">C-v</td>
<td style="text-align:left">quoted-insert</td>
</tr>
<tr>
<td style="text-align:left">C-w</td>
<td style="text-align:left">evil-delete-backward-word</td>
</tr>
<tr>
<td style="text-align:left">C-y</td>
<td style="text-align:left">evil-copy-from-above</td>
</tr>
<tr>
<td style="text-align:left">C-z</td>
<td style="text-align:left">evil-emacs-state</td>
</tr>
<tr>
<td style="text-align:left"><delete></delete></td>
<td style="text-align:left">delete-char</td>
</tr>
<tr>
<td style="text-align:left"><escape></escape></td>
<td style="text-align:left">evil-normal-state</td>
</tr>
<tr>
<td style="text-align:left"><mouse-2></mouse-2></td>
<td style="text-align:left">mouse-yank-primary</td>
</tr>
</tbody>
</table>
<h2 id="evil-motion-state-map">evil-motion-state-map</h2>
<p>Keymap for Motion state.</p>
<table>
<thead>
<tr>
<th style="text-align:left">key</th>
<th style="text-align:left">binding</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">h/l</td>
<td style="text-align:left">evil-backward/forward-char 向后/前移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">j/k</td>
<td style="text-align:left">evil-next/previous-line 想下/上移动一行</td>
</tr>
<tr>
<td style="text-align:left">B/W</td>
<td style="text-align:left">evil-backward/forward-WORD-begin 向后/前移动到 WORD 前</td>
</tr>
<tr>
<td style="text-align:left">E</td>
<td style="text-align:left">evil-forward-WORD-end 向前移动到 WORD 后</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">evil-forward-word-begin 向前移动到 word 前</td>
</tr>
<tr>
<td style="text-align:left">C-b/C-f</td>
<td style="text-align:left">evil-scroll-page-up/down 向上/下滚动页面</td>
</tr>
<tr>
<td style="text-align:left">C-d</td>
<td style="text-align:left">evil-scroll-down 向下滚动</td>
</tr>
<tr>
<td style="text-align:left">C-y/C-e</td>
<td style="text-align:left">evil-scroll-line-up/down 向上/下滚动一行</td>
</tr>
<tr>
<td style="text-align:left">TAB/C-o</td>
<td style="text-align:left">evil-jump-forward/backward 前/后跳</td>
</tr>
<tr>
<td style="text-align:left">RET</td>
<td style="text-align:left">evil-ret</td>
</tr>
<tr>
<td style="text-align:left">C-z</td>
<td style="text-align:left">evil-emacs-state 切换 emacs 和 vim 模式</td>
</tr>
<tr>
<td style="text-align:left">C-v</td>
<td style="text-align:left">evil-visual-block</td>
</tr>
<tr>
<td style="text-align:left">C-w</td>
<td style="text-align:left">evil-window-map</td>
</tr>
<tr>
<td style="text-align:left">C-]</td>
<td style="text-align:left">evil-jump-to-tag</td>
</tr>
<tr>
<td style="text-align:left"><code>%</code></td>
<td style="text-align:left">evil-jump-item</td>
</tr>
<tr>
<td style="text-align:left">C-^</td>
<td style="text-align:left">evil-buffer</td>
</tr>
<tr>
<td style="text-align:left">SPC</td>
<td style="text-align:left">evil-forward-char</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">evil-shell-command</td>
</tr>
<tr>
<td style="text-align:left"><code>#</code></td>
<td style="text-align:left">evil-search-word-backward</td>
</tr>
<tr>
<td style="text-align:left"><code>$</code></td>
<td style="text-align:left">evil-end-of-line</td>
</tr>
<tr>
<td style="text-align:left"><code>'</code></td>
<td style="text-align:left">evil-goto-mark-line</td>
</tr>
<tr>
<td style="text-align:left">```</td>
<td style="text-align:left">evil-goto-mark</td>
</tr>
<tr>
<td style="text-align:left"><code>G</code></td>
<td style="text-align:left">evil-goto-line</td>
</tr>
</tbody>
</table>
<p>( |    evil-backward-sentence-begin<br>
) |    evil-forward-sentence-begin</p>
<p>K |    evil-lookup</p>
<ul>
<li>|    evil-search-word-forward<br>
<code>/</code>/<code>?</code> |    evil-search-forward/backward<br>
N/n |    evil-search-previous/next<br>
, |    evil-repeat-find-char-reverse<br>
; |    evil-repeat-find-char<br>
F |    evil-find-char-backward<br>
T |    evil-find-char-to-backward</li>
</ul>
<ul>
<li>|    evil-next-line-first-non-blank</li>
</ul>
<ul>
<li>|    evil-previous-line-first-non-blank</li>
</ul>
<p>0 |    evil-digit-argument-or-evil-beginning-of-line<br>
1 … 9  | digit-argument<br>
: |    evil-ex</p>
<p>H |    evil-window-top<br>
L |    evil-window-bottom<br>
M |    evil-window-middle</p>
<p>V |    evil-visual-line</p>
<p>Y |    evil-yank-line<br>
y |    evil-yank</p>
<p>[ |    Prefix Command<br>
\ |    evil-execute-in-emacs-state<br>
] |    Prefix Command<br>
^ |    evil-first-non-blank<br>
_ |    evil-next-line-1-first-non-blank</p>
<p><code>|</code> |    evil-goto-column<br>
b |    evil-backward-word-begin<br>
e |    evil-forward-word-end<br>
f |    evil-find-char<br>
g |    Prefix Command</p>
<p>t |    evil-find-char-to<br>
v |    evil-visual-char</p>
<p>z |    Prefix Command<br>
<code>{</code> |    evil-backward-paragraph</p>
<p><code>}</code> |    evil-forward-paragraph<br>
C-6 |  evil-switch-to-windows-last-buffer<br>
<down> | evil-next-line<br>
<down-mouse-1>  | evil-mouse-drag-region<br>
<left> | evil-backward-char<br>
<remap> | Prefix Command<br>
<right> | evil-forward-char<br>
<up> | evil-previous-line</up></right></remap></left></down-mouse-1></down></p>
<p><remap> <ace-jump-char-mode>    evil-ace-jump-char-mode<br>
<remap> <ace-jump-line-mode>    evil-ace-jump-line-mode<br>
<remap> <ace-jump-word-mode>    evil-ace-jump-word-mode<br>
<remap> <avy-goto-char>         evil-avy-goto-char<br>
<remap> <avy-goto-char-2>       evil-avy-goto-char-2<br>
<remap> <avy-goto-char-2-above> evil-avy-goto-char-2-above<br>
<remap> <avy-goto-char-2-below> evil-avy-goto-char-2-below<br>
<remap> <avy-goto-char-in-line> evil-avy-goto-char-in-line<br>
<remap> <avy-goto-line>         evil-avy-goto-line<br>
<remap> <avy-goto-subword-0>    evil-avy-goto-subword-0<br>
<remap> <avy-goto-subword-1>    evil-avy-goto-subword-1<br>
<remap> <avy-goto-word-0>       evil-avy-goto-word-0<br>
<remap> <avy-goto-word-1>       evil-avy-goto-word-1<br>
<remap> <avy-goto-word-1-above> evil-avy-goto-word-1-above<br>
<remap> <avy-goto-word-1-below> evil-avy-goto-word-1-below<br>
<remap> <avy-goto-word-or-subword-1> evil-avy-goto-word-or-subword-1</avy-goto-word-or-subword-1></remap></avy-goto-word-1-below></remap></avy-goto-word-1-above></remap></avy-goto-word-1></remap></avy-goto-word-0></remap></avy-goto-subword-1></remap></avy-goto-subword-0></remap></avy-goto-line></remap></avy-goto-char-in-line></remap></avy-goto-char-2-below></remap></avy-goto-char-2-above></remap></avy-goto-char-2></remap></avy-goto-char></remap></ace-jump-word-mode></remap></ace-jump-line-mode></remap></ace-jump-char-mode></remap></p>
<p>z RET | Keyboard Macro<br>
z + |  evil-scroll-bottom-line-to-top<br>
z - |  Keyboard Macro<br>
z . |  Keyboard Macro<br>
z H |  evil-scroll-left<br>
z L |  evil-scroll-right<br>
z ^ |  evil-scroll-top-line-to-bottom<br>
z b |  evil-scroll-line-to-bottom<br>
z h |  evil-scroll-column-left<br>
z l |  evil-scroll-column-right<br>
z t |  evil-scroll-line-to-top<br>
z z |  evil-scroll-line-to-center<br>
z <left>  | Keyboard Macro<br>
z <return> | Keyboard Macro<br>
z <right> | Keyboard Macro</right></return></left></p>
<p>C-w C-b |  evil-window-bottom-right<br>
C-w C-c |  evil-window-delete<br>
C-w C-f |  ffap-other-window<br>
C-w C-n |  evil-window-new<br>
C-w C-o |  delete-other-windows<br>
C-w C-p |  evil-window-mru<br>
C-w C-r |  evil-window-rotate-downwards<br>
C-w C-s |  evil-window-split<br>
C-w C-t |  evil-window-top-left<br>
C-w C-v |  evil-window-vsplit<br>
C-w C-w |  evil-window-next<br>
C-w C-_ |  evil-window-set-height<br>
C-w + | evil-window-increase-height<br>
C-w - | evil-window-decrease-height<br>
C-w &lt; | evil-window-decrease-width<br>
C-w = | balance-windows<br>
C-w &gt; | evil-window-increase-width<br>
C-w H | evil-window-move-far-left<br>
C-w J | evil-window-move-very-bottom<br>
C-w K | evil-window-move-very-top<br>
C-w L | evil-window-move-far-right<br>
C-w R | evil-window-rotate-upwards<br>
C-w S | evil-window-split<br>
C-w W | evil-window-prev<br>
C-w _ | evil-window-set-height<br>
C-w b | evil-window-bottom-right<br>
C-w c | evil-window-delete<br>
C-w h | evil-window-left<br>
C-w j | evil-window-down<br>
C-w k | evil-window-up<br>
C-w l | evil-window-right<br>
C-w n | evil-window-new<br>
C-w o | delete-other-windows<br>
C-w p | evil-window-mru<br>
C-w r | evil-window-rotate-downwards<br>
C-w s | evil-window-split<br>
C-w t | evil-window-top-left<br>
C-w v | evil-window-vsplit<br>
C-w w | evil-window-next<br>
C-w | | evil-window-set-width<br>
C-w C-S-h | evil-window-move-far-left<br>
C-w C-S-j |  evil-window-move-very-bottom<br>
C-w C-S-k |  evil-window-move-very-top<br>
C-w C-S-l |  evil-window-move-far-right<br>
C-w C-S-r |  evil-window-rotate-upwards<br>
C-w C-S-s |  evil-window-split<br>
C-w C-S-w |  evil-window-prev</p>
<p>[ ( |   evil-previous-open-paren<br>
[ [ |   evil-backward-section-begin<br>
[ ] |   evil-backward-section-end<br>
[ { |   evil-previous-open-brace</p>
<p>] ) |   evil-next-close-paren<br>
] [ |   evil-forward-section-end<br>
] ] |   evil-forward-section-begin<br>
] } |   evil-next-close-brace</p>
<p>g C-] | find-tag<br>
g # |   evil-search-unbounded-word-backward<br>
g $ |   evil-end-of-visual-line<br>
g * |   evil-search-unbounded-word-forward<br>
g 0 |   evil-beginning-of-visual-line<br>
g E |   evil-backward-WORD-end<br>
g N |   evil-previous-match<br>
g ^ |   evil-first-non-blank-of-visual-line<br>
g _ |   evil-last-non-blank<br>
g d |   evil-goto-definition<br>
g e |   evil-backward-word-end<br>
g g |   evil-goto-first-line<br>
g j |   evil-next-visual-line<br>
g k |   evil-previous-visual-line<br>
g m |   evil-middle-of-visual-line<br>
g n |   evil-next-match<br>
g v |   evil-visual-restore</p>
<h1>学习</h1>
<p><a href="https://github.com/emacs-china/emacs-lisp-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">emacs lisp 风格指南</a></p>
<h1>常用包</h1>
<h2 id="外观">外观</h2>
<p>正在使用<br>
<a href="https://github.com/bbatsov/solarized-emacs" target="_blank" rel="external">solarized-theme</a><br>
<a href="https://github.com/Malabarba/smart-mode-line/" target="_blank" rel="external">smart-mode-line</a><br>
<a href="https://github.com/roman/golden-ratio.el" target="_blank" rel="external">golden-ratio</a> 自动调整 window 的大小比例，将当前活动 buffer 所在的 window 调大，非活动窗口调小。</p>
<p>以前用过<br>
<a href="https://github.com/oneKelvinSmith/monokai-emacs" target="_blank" rel="external">monokai-theme</a> 对比度有些高不太适应，后来改为了 solarized-theme。<br>
<a href="https://github.com/kuanyui/moe-theme.el" target="_blank" rel="external">moe-theme</a><br>
[powerline]<br>
[spaceline]</p>
]]></content>
    
    <summary type="html">
    
      使用 Emacs 过程中的记录。
    
    </summary>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Wiki/"/>
    
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>报错问题解决记录</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-wiki-error/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-wiki-error/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-01T03:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1>R</h1>
<h2 id="macos-下-xml包依赖-libxml2-冲突">MacOS 下 XML包依赖 libxml2 冲突</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">checking for xml2-config... /Users/lix/anaconda2/bin/xml2-config</div><div class="line">USE_XML2 = yes</div><div class="line">SED_EXTENDED_ARG: -E</div><div class="line">Minor 9, Patch 2 for 2.9.2</div><div class="line">Located parser file -I/Users/lix/anaconda2/include/libxml2/parser.h</div><div class="line">Checking for 1.8:  -I/Users/lix/anaconda2/include/libxml2</div><div class="line">...</div><div class="line">You are trying to use a version 2.* edition of libxml</div><div class="line">but an incompatible library. The header files and library seem to be</div><div class="line">mismatched. If you have specified LIBXML_INCDIR, make certain to also</div><div class="line">specify an appropriate LIBXML_LIBDIR if the libxml2 library is not in the default</div><div class="line">directories.</div><div class="line">ERROR: configuration failed for package ‘XML’</div></pre></td></tr></table></figure>
<p>在安装 REmap 包时，安装依赖 XML 包，出现依赖错误。XML 包是解析和生成 XML 文件的 R 语言包，系统依赖 libxml2 (&gt;= 2.6.3)。本身通过 homebrew 安装过 libxml2，发现 anaconda 也安装了 libxml2，出现冲突。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; brew list libxml2</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/bin/xml2-config</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/bin/xmlcatalog</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/bin/xmllint</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/include/libxml2/ (47 files)</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/lib/libxml2.2.dylib</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/lib/cmake/libxml2/libxml2-config.cmake</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/lib/pkgconfig/libxml-2.0.pc</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/lib/ (3 other files)</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/share/aclocal/libxml.m4</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/share/doc/ (153 files)</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/share/gtk-doc/ (55 files)</div><div class="line">/usr/local/Cellar/libxml2/2.9.4/share/man/ (4 files)</div></pre></td></tr></table></figure>
<p>检查 homebrew 安装的 libxml2，发现版本满足 XML 包要求。报错信息提示可以定义环境变量到非默认的路径。</p>
<blockquote>
<p>If you have specified LIBXML_INCDIR, make certain to also specify an appropriate LIBXML_LIBDIR if the libxml2 library is not in the defaultdirectories.</p>
</blockquote>
<p>设置环境变量：</p>
<ul>
<li><code>export LIBXML_INCDIR=/usr/local/Cellar/libxml2/2.9.4</code></li>
<li><code>export LIBXML_LIBDIR=/usr/local/Cellar/libxml2/2.9.4/lib</code></li>
</ul>
<p>继续安装仍然报错：提示无法找到 parser.h 文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">You specified LIBXML_INCDIR, but we couldn&apos;t find parser.h</div><div class="line">Please specify it correctly and re-run the INSTALL&apos;ation.</div><div class="line">ERROR: configuration failed for package ‘XML’</div></pre></td></tr></table></figure>
<p><strong>Anaconda 与 Homebrew 冲突问题</strong></p>
<p>运行 <code>brew doctor</code> 发现一个警告：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Warning: Anaconda is known to frequently break Homebrew builds, including Vim and</div><div class="line">MacVim, due to bundling many duplicates of system and Homebrew-available</div><div class="line">tools.</div><div class="line"></div><div class="line">If you encounter a build failure please temporarily remove Anaconda</div><div class="line">from your $PATH and attempt the build again prior to reporting the</div><div class="line">failure to us. Thanks!</div><div class="line"></div><div class="line">Warning: &quot;config&quot; scripts exist outside your system or Homebrew directories.</div><div class="line">`./configure` scripts often look for *-config scripts to determine if</div><div class="line">software packages are installed, and what additional flags to use when</div><div class="line">compiling and linking.</div><div class="line"></div><div class="line">Having additional scripts in your path can confuse software installed via</div><div class="line">Homebrew if the config script overrides a system or Homebrew provided</div><div class="line">script of the same name. We found the following &quot;config&quot; scripts:</div><div class="line">  /Users/lix/anaconda2/bin/curl-config</div><div class="line">  /Users/lix/anaconda2/bin/freetype-config</div><div class="line">  /Users/lix/anaconda2/bin/libdynd-config</div><div class="line">  /Users/lix/anaconda2/bin/libpng-config</div><div class="line">  /Users/lix/anaconda2/bin/libpng16-config</div><div class="line">  /Users/lix/anaconda2/bin/python-config</div><div class="line">  /Users/lix/anaconda2/bin/python2-config</div><div class="line">  /Users/lix/anaconda2/bin/python2.7-config</div><div class="line">  /Users/lix/anaconda2/bin/xml2-config</div><div class="line">  /Users/lix/anaconda2/bin/xslt-config</div></pre></td></tr></table></figure>
<p>可以看到 xml2-config 与 homebrew 下的 xml2-config 出现了冲突。</p>
<p><strong>解决：不添加 anaconda 至 PATH 中，然后重新安装 libxml2，最后成功安装 XML 包。</strong></p>
<h1>Homebrew</h1>
<h2 id="terminating-active-homebrew-process">Terminating active homebrew process</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># try</div><div class="line">/usr/bin/pkill ruby</div><div class="line"># try</div><div class="line">/usr/bin/pgrep ruby</div><div class="line"># do</div><div class="line">chown -R $(whoami) /usr/local/var/homebrew</div><div class="line"># do</div><div class="line">sudo rm -rf /usr/local/var/homebrew/locks</div></pre></td></tr></table></figure>
<p>来源：<a href="https://github.com/Homebrew/homebrew-core/issues/5159" target="_blank" rel="external">Terminating active homebrew process #5159</a></p>
]]></content>
    
    <summary type="html">
    
      记录遇到的所有报错的解决方法。
    
    </summary>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Wiki/"/>
    
    
      <category term="Error" scheme="http://lix90.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>环境和工具配置</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-wiki-config/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-wiki-config/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-13T03:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Python</h1>
<p>放弃使用 Anaconda 发行版，改为直接手动配置环境。</p>
<h2 id="pypi">PyPi</h2>
<h3 id="macos-配置-pip">MacOS 配置 pip</h3>
<ol>
<li>安装 easy_install<br>
<code>curl https://bootstrap.pypa.io/ez_setup.py -o - | sudo python</code></li>
<li>安装 pip<br>
<code>sudo easy_install pip</code><br>
或通过 Homebrew 安装 python，会一同安装 pip<br>
或直接使用 Anaconda 等发行版，自带 pip</li>
</ol>
<h3 id="镜像源">镜像源</h3>
<p>pipy国内镜像目前有：</p>
<p><a href="http://pypi.douban.com/simple" target="_blank" rel="external">http://pypi.douban.com/simple</a>  豆瓣<br>
<a href="http://pypi.hustunique.com/simple" target="_blank" rel="external">http://pypi.hustunique.com/simple</a>  华中理工大学<br>
<a href="http://pypi.sdutlinux.org/simple" target="_blank" rel="external">http://pypi.sdutlinux.org/simple</a>  山东理工大学<br>
<a href="http://pypi.mirrors.ustc.edu.cn/simple" target="_blank" rel="external">http://pypi.mirrors.ustc.edu.cn/simple</a>  中国科学技术大学<br>
<a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="external">http://mirrors.aliyun.com/pypi/simple</a> 阿里云<br>
清华大学<br>
公网：<a href="http://e.pypi.python.org/simple" target="_blank" rel="external">http://e.pypi.python.org/simple</a><br>
教育网：<a href="http://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">http://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>Linux 和 MacOS 系统下配置文件位置: <code>$HOME/.pip/pip.conf</code><br>
Windows 系统下配置文件位置: <code>%HOME%\pip\pip.ini</code></p>
<p>设置环境变量 <code>PIP_CONFIG_FILE</code> 可以指定默认配置文件路径。</p>
<p>修改配置文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">trusted-host = mirrors.aliyun.com</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple</div></pre></td></tr></table></figure>
<h3 id="其他配置">其他配置</h3>
<p>另外还可以添加其他参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">timeout = 60</div><div class="line"></div><div class="line">[freeze]</div><div class="line">timeout = 10</div><div class="line"></div><div class="line">[install]</div><div class="line">ignore-installed = true</div><div class="line">no-dependencies = no # or yes</div></pre></td></tr></table></figure>
<p>对于 easy_install 可以修改 <code>$HOME/.pydistutils.cfg</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[easy_install]</div><div class="line">index_url = &lt;mirror&gt;</div></pre></td></tr></table></figure>
<p>另外还可以创建别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias pip=&quot;pip -i &lt;mirror&gt;&quot;</div></pre></td></tr></table></figure>
<h3 id="pip-常用命令">pip 常用命令</h3>
<p>搜索模块<br>
<code>pip search &lt;pkg_name&gt;</code></p>
<p>安装模块<br>
<code>pip install &lt;pkg_name&gt;</code><br>
<code>pip install &lt;pkg_name&gt;==&lt;version&gt;</code></p>
<p>升级模块（如果不提供版本号，升级到最新版本）<br>
<code>pip install --upgrade &lt;pkg_name&gt;&gt;=&lt;version&gt;</code></p>
<p>卸载模块<br>
<code>pip uninstall &lt;pkg_name&gt;</code></p>
<p>显示当前环境中模块的清单<br>
<code>pip freeze</code><br>
重定向到文本文件<br>
<code>pip freeze &gt; req.txt</code><br>
使用清单<br>
<code>pip install -r req.txt</code></p>
<h2 id="环境管理">环境管理</h2>
<p>使用虚拟环境管理工具</p>
<p>virtualenv <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">doc</a><br>
virtualenvwrapper <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="external">doc</a></p>
<p>virtualenvwrapper 是对 virtualenv 的一系列扩展，包括创建和删除虚拟环境的包装工具，用于管理开发环境。</p>
<p>配置流程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pip install virtualenvwrapper</div><div class="line">export WORKON_HOME=~/pyEnvs</div><div class="line">mkdir -p $WORKON_HOME</div><div class="line">source /usr/local/bin/virtualenvwrapper.sh</div><div class="line">mkvirtualenv env1</div><div class="line">lssitepackages</div><div class="line">mkvirtualenv env2</div><div class="line">workon env1</div><div class="line">echo $VIRTUAL_ENV</div><div class="line">mkvirtualenv -p /usr/bin/python2 env27</div><div class="line">mkvirtualenv -p /usr/bin/python3 env3</div><div class="line">deactivate</div></pre></td></tr></table></figure>
<h1>Homebrew</h1>
<h2 id="镜像源-v2">镜像源</h2>
<p><a href="http://heepo.github.io/%E5%B7%A5%E5%85%B7/2015/08/05/Homebrew-Mirror-Links.html" target="_blank" rel="external">Homebrew 镜像源</a><br>
<a href="http://blog.haohtml.com/archives/16915" target="_blank" rel="external">HomeBrew中国镜像源</a><br>
<a href="https://maomihz.com/2016/06/tutorial-6/" target="_blank" rel="external">换源让Homebrew速度飞起！一起brew吧！</a></p>
<p>最后修改镜像不成功，太麻烦，放弃折腾，改回了官方 github 源。</p>
<h1>MacOS 配置</h1>
<h2 id="time-machine">Time machine</h2>
<ul>
<li>准备移动硬盘，做好备份</li>
<li>移动硬盘分出一个300GB左右的分区，格式化为 Mac OS Extened Journaled 格式。</li>
<li>然后选择该分区作为备份空间，开始备份并且加密</li>
</ul>
<p>参考</p>
<ul>
<li><a href="http://www.jianshu.com/p/5f8b4d9a8922" target="_blank" rel="external">Mac下移动硬盘的分区以及TimeMachine的备份</a></li>
<li><a href="http://sspai.com/tag/Time%20Machine" target="_blank" rel="external">少数派 Time Machine 使用教程</a></li>
</ul>
<h2 id="卸载-rime-输入法">卸载 Rime 输入法</h2>
<p>这个所谓的“程序员”用的输入法，实在是没用习惯。@2016-12-02 喜欢能简则简的我，改用苹果系统自带中文输入法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ killall Squirrel</div><div class="line">$ sudo rm -Rf &quot;/Library/Input Methods/Squirrel.app&quot;</div><div class="line">$ rm -Rf ~/Library/Rime</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      记录各种开发环境和工具的配置过程。
    
    </summary>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Wiki/"/>
    
    
      <category term="Configuration" scheme="http://lix90.github.io/tags/Configuration/"/>
    
  </entry>
  
  <entry>
    <title>R：graphics 包</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-r-graphics/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-r-graphics/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-01T12:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">函数名</th>
<th style="text-align:left">中文描述</th>
<th style="text-align:left">用法</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Axis (axis)</td>
<td style="text-align:left">添加坐标轴，调用函数 <code>axis</code></td>
<td style="text-align:left">``</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">axis.POSIXct</td>
<td style="text-align:left">Date and Date-time Plotting Functions</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">abline</td>
<td style="text-align:left">添加垂直线至图形</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">arrows</td>
<td style="text-align:left">添加箭头</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">box</td>
<td style="text-align:left">绘制线框</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">grid</td>
<td style="text-align:left">添加网格线</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">legend</td>
<td style="text-align:left">添加图例</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">lines</td>
<td style="text-align:left">Add Connected Line Segments to a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">segments</td>
<td style="text-align:left">Add Line Segments to a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">mtext</td>
<td style="text-align:left">Write Text into the Margins of a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">points</td>
<td style="text-align:left">Add Points to a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">rect</td>
<td style="text-align:left">Draw One or More Rectangles</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">rug</td>
<td style="text-align:left">Add a Rug to a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">Add Text to a Plot</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">绘制标题</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">polygon</td>
<td style="text-align:left">绘制多边形</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">polypath</td>
<td style="text-align:left">绘制路径</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">symbols</td>
<td style="text-align:left">绘制符号 (Circles, Squares, Stars, Thermometers, Boxplots)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">xspline</td>
<td style="text-align:left">Draw an X-spline</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>contour                 Display Contours<br>
image                   Display a Color Image<br>
rasterImage             Draw One or More Raster Images<br>
strwidth                Plotting Dimensions of Character Strings and Math Expressions</p>
<p>par                     Set or Query Graphical Parameters<br>
axTicks                 Compute Axis Tickmark Locations<br>
clip                    Set Clipping Region<br>
filled.contour          Level (Contour) Plots<br>
frame                   Create / Start a New Plot Frame<br>
grconvertX              Convert between Graphics Coordinate Systems<br>
identify                Identify Points in a Scatter Plot<br>
layout                  Specifying Complex Plot Arrangements<br>
locator                 Graphical Input<br>
screen                  Creating and Controlling Multiple Screens on a Single Device<br>
xinch                   Graphical Units</p>
<p>assocplot               Association Plots<br>
barplot                 Bar Plots<br>
boxplot                 Box Plots<br>
boxplot.matrix          Draw a Boxplot for each Column (Row) of a Matrix<br>
bxp                     Draw Box Plots from Summaries<br>
cdplot                  Conditional Density Plots<br>
coplot                  Conditioning Plots<br>
curve                   Draw Function Plots<br>
dotchart                Cleveland’s Dot Plots<br>
fourfoldplot            Fourfold Plots<br>
hist                    Histograms<br>
hist.POSIXt             Histogram of a Date or Date-Time Object<br>
matplot                 Plot Columns of Matrices<br>
mosaicplot              Mosaic Plots<br>
pairs                   Scatterplot Matrices<br>
panel.smooth            Simple Panel Plot<br>
persp                   Perspective Plots<br>
pie                     Pie Charts<br>
plot                    Generic X-Y Plotting<br>
plot.data.frame         Plot Method for Data Frames<br>
plot.default            The Default Scatterplot Function<br>
plot.design             Plot Univariate Effects of a Design or Model<br>
plot.factor             Plotting Factor Variables<br>
plot.formula            Formula Notation for Scatterplots<br>
plot.histogram          Plot Histograms<br>
plot.raster             Plotting Raster Images<br>
plot.table              Plot Methods for ‘table’ Objects<br>
plot.window             Set up World Coordinates for Graphics Window<br>
plot.xy                 Basic Internal Plot Function<br>
smoothScatter           Scatterplots with Smoothed Densities Color Representation<br>
spineplot               Spine Plots and Spinograms<br>
stars                   Star (Spider/Radar) Plots and Segment Diagrams<br>
stem                    Stem-and-Leaf Plots<br>
stripchart              1-D Scatter Plots<br>
sunflowerplot           Produce a Sunflower Scatter Plot</p>
]]></content>
    
    <summary type="html">
    
      R 语言 graphics 包中文参考。
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="R" scheme="http://lix90.github.io/categories/Original/R/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
      <category term="Data viz" scheme="http://lix90.github.io/tags/Data-viz/"/>
    
  </entry>
  
  <entry>
    <title>shell 命令整理</title>
    <link href="http://lix90.github.io/2016/12/01/2016-12-01-wiki-shell/"/>
    <id>http://lix90.github.io/2016/12/01/2016-12-01-wiki-shell/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2016-12-01T11:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>@2016-11-16</p>
<p><code>ps</code> 返回正在运行的进程的信息<br>
<code>ps aux</code> 列出所有运行进程<br>
<code>ps aux | grep string</code> 列出匹配字符串的进程</p>
<p>使用 <code>$HOME</code> 替代 <code>~</code><br>
使用 <code>type -p</code> 替代 <code>which</code></p>
<p>@2016-12-01</p>
<p>修改 MacOS 计算机名<br>
<code>scutil --set ComputerName &lt;computer_name&gt;</code></p>
<p>格式化磁盘为 Mac OS Extended Journaled (JHFS+)<br>
<code>diskutil erasedisk JHFS+ &lt;disk_name&gt; &lt;disk_directory&gt;</code><br>
其他格式:</p>
<ul>
<li>FAT32: MS-DOS fat32</li>
<li>HFS+: Mac OS Extended (HFS+)</li>
<li>ExFAT</li>
</ul>
<p>lsof 列出已打开的文件以及对应的进程</p>
]]></content>
    
    <summary type="html">
    
      使用 shell 过程中的笔记。
    
    </summary>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Wiki/"/>
    
    
      <category term="Shell" scheme="http://lix90.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-29</title>
    <link href="http://lix90.github.io/2016/11/29/2016-11-29-daily/"/>
    <id>http://lix90.github.io/2016/11/29/2016-11-29-daily/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-12-01T03:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript</h1>
<h2 id="基本包装类型">基本包装类型</h2>
<p>ECMAScript 提供了3个特殊的引用类型：Boolean、Number 和 String。<br>
引用类型与基本包装类型的主要区别就是<strong>对象的生存期</strong>。</p>
<blockquote>
<p>使用 new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着不能在运行时为基本类型值添加属性和方法。</p>
</blockquote>
<p>使用 new 调用基本包装类型的构造函数，与直接调用同名的转型函数不一样。使用转型函数得到的对象仍然为基本类型。<br>
不建议显式地创建基本包装类型的对象。</p>
<h3 id="boolean-类型">Boolean 类型</h3>
<p>基本类型与引用类型的布尔值的区别：</p>
<ul>
<li>布尔表达式中的所有对象都会被转换为 true，所以即便 Boolean 对象的值为 false，在布尔表达式中仍然为 true。</li>
<li>typeof 操作符对基本类型返回 “boolean”，而对引用类型返回 “object”。</li>
<li>由于 Boolean 对象是 Boolean 类型的实例，所以使用 instanceof 操作符测试 Boolean 对象会返回 true，而测试基本类型的布尔值则返回 false。</li>
</ul>
<h3 id="number-类型">Number 类型</h3>
<p>Number 类型提供了操作数值的方法。</p>
<ul>
<li><code>toExponential</code> 返回指数（科学记数法）表示方法的数值的字符串。</li>
<li><code>toFixed()</code> 返回固定小数点位数表示方法的数值的字符串。</li>
<li><code>toPrecision()</code> 返回特定精度的数值的字符串。</li>
<li><code>valueOf()</code> 返回基本类型值</li>
<li><code>toLocaleString()</code> <code>toString()</code> 返回数值的字符串表示。</li>
</ul>
<h3 id="string-类型">String 类型</h3>
<p>String 类型实例同样继承了 <code>valueOf()</code> <code>toLocaleString()</code> <code>toString()</code> 方法，都返回对象所表示的基本字符串值。</p>
<p><strong>字符方法</strong><br>
两个用于访问字符串中特定字符的方法：<code>charAt()</code> 和 <code>charCodeAt()</code>，两个方法都接收一个参数，即基于0的字符位置。<br>
ECMAScript 5定义了另一个访问个别字符的方法，在支持此方法的浏览器中，可以使用方括号加数字索引来反问字符串中的特定字符。</p>
<p><strong>字符串操作方法</strong><br>
拼接字符串 <code>concat()</code>，该方法可以接受任意多个参数。<br>
三个基于子字符串创建新字符串的方法：<code>slice()</code> <code>substr()</code> <code>substring()</code>。<br>
字符串位置方法：<code>indexOf()</code> <code>lastIndexOf()</code><br>
<code>trim()</code> 方法：删除前置及后缀的所有空格。<br>
大小写转换方法：<code>toLowerCase()</code> <code>toLocaleLowerCase()</code> <code>toUpperCase()</code> <code>toLocaleUpperCase()</code><br>
模式匹配方法：<code>match()</code> <code>search()</code> <code>replace()</code> <code>split()</code><br>
<code>localeCompare()</code>：比较两个字符串，并返回-1，0，或1。<br>
<code>fromCharCode()</code>：接收一或多个字符编码，然后将它们转换成一个字符串。</p>
<h2 id="单体内置对象">单体内置对象</h2>
<p><strong>内置对象</strong>：由 ECMAScript 实现提供的、不依赖于宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了。开发者不必显式地实例化内置对象，因为它们已经被实例化了。</p>
<h3 id="global-对象">Global 对象</h3>
<p>不属于任何其他对象的属性和方法，最终都是 Global 对象的属性和方法。事实上，没有全局变量或全局函数；所有在全局作用域中定义的属性和函数，都是 Global 对象的属性。</p>
<p>URI 编码方法<br>
<code>encodeURI()</code> <code>encodeURIComponent()</code> 方法可以对 URI (Uniform Resource Identifiers, 通用资源标识符) 进行编码，以便发送给浏览器。有效的 URI 中不能包含某些字符，于是这两个方法就对 URI 进行编码，使用特殊的 UTF-8 编码替换掉所有无效的字符，从而让浏览器能够接受和理解。</p>
<p><code>decodeURI()</code> <code>decodeURIComponent()</code> 解码方法和编码方法相对应。</p>
<p><code>eval()</code> 方法像是一个完整的 ECMAScript 解析器，只接受一个参数，即要执行的 ECMAScript 字符串。</p>
<h3 id="math-对象">Math 对象</h3>
<p>Math 对象的属性，大多是数学计算中可能会用到的一些特殊值。<br>
<code>min()</code> 和 <code>max()</code> 方法<br>
舍入方法：<code>Math.ceil()</code> <code>Math.floor()</code> <code>Math.round()</code><br>
<code>random()</code> 方法返回大于等于0小于1的一个随机数。<br>
要得到特定范围的随机值 <code>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</code></p>
<h2 id="总结">总结</h2>
<p>学习 JavaScript 编程基础已有一段时间，觉得 JavaScript 的难点在于几个难以理解的抽象概念和应对一些语言设计上的“坑”。理解了 JS 语言中的这几个概念，例如，对象，类，原型，原型链，作用域，闭包，继承等，也就算是入门了吧。实际上，这些概念也就是面向对象和函数式编程语言对于初学编程的人来说难以理解的点。只不过在 JS 上，有其特殊性。</p>
<hr>
<h1>JavaScript 作用域</h1>
<p>来源：你不知道的 JS 上 — 作用域</p>
<p>传统编译语言的流程中，源码在执行前会经历三个步骤（编译）：</p>
<ul>
<li><strong>分词/词法分析（Tokenizing/Lexing）</strong>：将由字符组成的字符串分解成有意义的代码块（词法单元）。</li>
<li><strong>解析/语法分析（Parsing）</strong>：将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的数（抽象语法树，Abstract Syntax Tree, AST）。</li>
<li><strong>代码生成</strong>：将 AST 转换为可执行代码。</li>
</ul>
<p>对 JS 来说，大部分情况下编译发生在代码执行前的几微秒（甚至更短！）的时间内。任何 JS 代码片段在执行前都要进行编译。编译后通常马上执行它。</p>
<p>代码编译到执行关键的三个部件：</p>
<ul>
<li><strong>引擎</strong>：从头到尾负责整个 JS 程序的编译及执行过程。</li>
<li><strong>编译器</strong>：负责语法分析及代码生成等。</li>
<li><strong>作用域</strong>：负责收集并维护有所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</li>
</ul>
<p><strong>变量的赋值操作</strong>会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</p>
<p>理解两种查询方式：</p>
<ul>
<li><strong>LHS 查询</strong>，视图找到变量的容器本身，然后对其赋值。赋值操作的目标是谁？</li>
<li><strong>RHS 查询</strong>，取到它的源值，意味着得到某某的值。谁是赋值操作的源头？</li>
</ul>
<p>当变量出现在赋值操作的左侧时，进行 LHS 查询，出现在右侧（非左侧）则进行 RHS 查询。RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是视图找到变量的容器本身，从而可以对其赋值。</p>
<p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。<br>
<strong>遍历嵌套作用域链</strong>：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到与否，查找过程都会停止。</p>
<p><strong>ReferenceError</strong><br>
如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。但是，当引擎执行 LHS 查询时，如果在顶层中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非“严格模式”下。在严格模式下，会禁止自动或隐式地创建全局变量。因此，在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎同样抛出 ReferenceError 异常。</p>
<p><strong>TypeError</strong><br>
如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作，比如视图对一个非函数类型的值进行函数调用，或者引用 null 或 undefined 类型的值中的属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError。</p>
<p>总结：作用域是学习编程过程中需要着重理解的概念之一。</p>
<h1>数据科学</h1>
<h2 id="r-地理信息可视化">R 地理信息可视化</h2>
<p>看了 REmap 包的开发者<a href="http://lchiffon.github.io/about/" target="_blank" rel="external">郎大为</a>在<a href="http://www.xueqing.tv/" target="_blank" rel="external">雪晴数据网</a>上所做的 REmap 基本教程。了解了一些地理信息可视化包。</p>
<p>静态地理信息：</p>
<ul>
<li>maps：较老</li>
<li>ggmap：需科学上网</li>
<li>choroplethr：国外比较火<br>
交互地理信息：</li>
<li>leaflet</li>
<li>googleVis<br>
辅助的 R 包：</li>
<li>RgoogleMaps</li>
<li>mapdata</li>
<li>mapproj</li>
<li>baidumap：与 ggplot2 结合</li>
</ul>
<p><a href="https://github.com/lchiffon/REmap" target="_blank" rel="external">REmap</a> 是一个基于 Echarts 的 R 包，提供了一个简便，可交互的地图数据可视化工具。</p>
<p>安装：<code>devtools::install_github('lchiffon/REmap')</code></p>
<p>关于数据产品</p>
<ul>
<li>数据驱动</li>
<li>建模预测</li>
<li>较好的可视化</li>
</ul>
<h2 id="数据工程师">数据工程师</h2>
<p>在学晴网上还报了个免费的数据工程师入门系列教程—<a href="http://www.xueqing.tv/course/73" target="_blank" rel="external">全栈数据工程师养成攻略</a>，可以稍微走一个整体的简单数据挖掘的流程，特别是我还未实际操作过的领域，比如爬虫，与数据库交互，交互式数据可视化，Processing 可视化等。</p>
]]></content>
    
    <summary type="html">
    
      JS 包括引用类型中的包装类型和内置对象。你不知道的JS之作用域。看了学晴数据网上的通过R进行地理信息数据可视化的教学视频。报了个免费基础数据挖掘教程“全栈数据工程师养成”。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="Data science" scheme="http://lix90.github.io/tags/Data-science/"/>
    
      <category term="Data viz" scheme="http://lix90.github.io/tags/Data-viz/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-28</title>
    <link href="http://lix90.github.io/2016/11/28/2016-11-28-daily/"/>
    <id>http://lix90.github.io/2016/11/28/2016-11-28-daily/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-01T03:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript</h1>
<h2 id="date">Date</h2>
<p>构建 Date 类型<br>
<code>var now = new Data()</code> 为传入参数将自动返回当前的日期和时间，为距 UTC 1970-1-1午夜零时的时间戳（毫秒）。若需创建特定日期和时间创建日期对象，需传入时间戳。</p>
<p>两个方法：输出因浏览器而异。<br>
<code>Data.parse()</code> 接收日期的字符串参数然后返回时间戳。参数格式因本地语言设置有关。<br>
<code>Data.UTC()</code> 接收的参数分别为年、月（0开始）、日、时、分、秒、毫秒。返回时间戳。</p>
<p>ECMAScript 5 新引入的方法<br>
<code>Data.now()</code> 调用该方式时的日期和时间的毫秒数。</p>
<p>继承方法<br>
Date 类型继承了 <code>toLocaleString()</code> <code>toString()</code> <code>valueOf()</code> 的方法，但输出值与其他类型的方法不同。</p>
<p>日期格式化方法<br>
<code>toDateString()</code><br>
<code>toTimeString()</code><br>
<code>toLocaleDateString()</code><br>
<code>toLocaleTimeString()</code><br>
<code>toUTCString()</code></p>
<p>日期/时间组件方法：直接取得和设置日期值中特定部分的方法 <code>get/set*</code>。</p>
<h2 id="regexp-类型">RegExp 类型</h2>
<p>字面量 <code>/pattern/flags</code><br>
构造函数 <code>new RegExp(pattern[, flags])</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/ab+c/i;</div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ab+c'</span>, <span class="string">'i'</span>);</div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/ab+c/</span>, <span class="string">'i'</span>);</div></pre></td></tr></table></figure>
<p><strong>pattern</strong> 任何简单或复杂的正则表达式，包含字符类、限定符、分组、先前查找、反向引用。构造函数下，pattern 也可以为字符串模式。<br>
<strong>flags</strong> 每个正则表达式都可以带一个或多个标志（flags），用来标明正则表达式的行为。</p>
<ul>
<li>g：全局，遍历所有匹配项。</li>
<li>i：不区分大小写。</li>
<li>m：多行模式。</li>
</ul>
<p>元字符：模式中所有元字符都必须转义，包括 <code>( [ { \ ^ $ | ) ? * + . ] }</code>。</p>
<h3 id="regexp-实例属性">RegExp 实例属性</h3>
<p>RegExp 实例属性可以取得有关模式的各种信息：</p>
<ul>
<li><strong>global</strong> 布尔值，是否设置了 g 标志。</li>
<li><strong>ignore</strong>Case 布尔值，是否设置了 i 标志。</li>
<li><strong>lastIndex</strong> 整数，表示开始搜索下一个匹配项的字符位置，从0算起。</li>
<li><strong>multiline</strong> 布尔值，是否设置了 m 标志。</li>
<li><strong>source</strong> 正则表达式的字符串表示，按照<strong>字面量形式</strong>返回。</li>
</ul>
<h3 id="regexp-构造函数属性">RegExp 构造函数属性</h3>
<p>RegExp 构造函数包含的一些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。这些属性分别有一个长属性名和一个短属性名。短属性名大都不是有效的 ECMAScript 标识符，因此必须通过方括号语法来访问它们。除此之外还有用9个用于存储捕获组的构造函数属性。访问这些属性的语法是 <code>RegExp.$1/2/.../9</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">长属性名</th>
<th style="text-align:left">短属性名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>input</code></td>
<td style="text-align:left"><code>$_</code></td>
<td style="text-align:left">最近一次要匹配的字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>lastMatch</code></td>
<td style="text-align:left"><code>$&amp;</code></td>
<td style="text-align:left">最近一次的匹配项</td>
</tr>
<tr>
<td style="text-align:left"><code>lastParen</code></td>
<td style="text-align:left"><code>$+</code></td>
<td style="text-align:left">最近一次匹配的捕获组</td>
</tr>
<tr>
<td style="text-align:left"><code>leftContext</code></td>
<td style="text-align:left">`$``</td>
<td style="text-align:left">input 字符串中 lastMatch 之前的文本</td>
</tr>
<tr>
<td style="text-align:left"><code>multiline</code></td>
<td style="text-align:left"><code>$*</code></td>
<td style="text-align:left">布尔值，表示是否所有表达式都使用多行模式</td>
</tr>
<tr>
<td style="text-align:left"><code>rightContext</code></td>
<td style="text-align:left"><code>$'</code></td>
<td style="text-align:left">input 字符串中 lastMatch 之后的文本</td>
</tr>
</tbody>
</table>
<h3 id="模式的局限性">模式的局限性</h3>
<p>不支持的正则表达式特性：</p>
<ul>
<li>匹配字符串开始和结尾的 <code>\A</code> 和 <code>\Z</code> 锚。（支持 <code>^</code> 和 <code>$</code> 匹配）</li>
<li>向后查找（但完全支持向前查找）</li>
<li>并集和交集类</li>
<li>原子组</li>
<li>Unicode 支持（单个字符除外，如 \uFFFF）</li>
<li>命名的捕获组</li>
<li><code>s</code>（单行） 和 <code>x</code>（无间隔） 匹配模式</li>
<li>条件匹配</li>
<li>正则表达式注释</li>
</ul>
<h1>jQuery</h1>
<p>jQuery 的优势：</p>
<ul>
<li>轻量级：采用 UglifyJS 压缩，保持在 30KB 左右。</li>
<li>强大的选择器：允许开发者使用 CSS 几乎所有选择器，以及独创的高级而复杂的选择器。开发者还可以编写自己的选择器。</li>
<li>出色的 DOM 操作的封装。</li>
<li>可靠的事件处理机制。</li>
<li>完善的 Ajax。所有 ajax 的操作都封装到一个函数 <code>$.ajax()</code> 里，使得开发者处理 ajax 的时候能够专心处理业务逻辑。</li>
<li>不污染顶层变量。该特性使得 jQuery 可以与其他 JS 库共存。</li>
<li>出色的浏览器兼容性。</li>
<li>链式操作方法。jQuery 最有特色的莫过于它的链式操作方式，即对发生在同一个 jQuery 对象上的一组动作，可以直接连写而无需重复获取对象。</li>
<li>隐式迭代。jQuery 里的方法都被设计成自动操作对象集合，而不是单独的对象。</li>
<li>行为层与结构层的分离。开发者可以使用 jQuery 选择器选中元素，然后直接给元素添加事件。</li>
<li>丰富的插件支持。jQuery 的易扩展性，吸引了来自全球的开发者来编写 jQuery 的扩展插件。</li>
<li>完善的文档。包括长期更新的中文文档。</li>
<li>开源。</li>
</ul>
<p>来源：《锋利的 jQeury 第二版》</p>
<h1>阅读：前端工程</h1>
<h2 id="笔记">笔记</h2>
<blockquote>
<p>从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。</p>
</blockquote>
<p>前端工程的三个阶段<br>
**第一阶段：库/框架选型。**根据项目特征进行技术选型，合理的技术选型可以为项目节省许多工程量这点毋庸置疑。<br>
**第二阶段：简单构建优化。**选型之后基本上就可以开始敲码了，不过光解决开发效率还不够，必须要兼顾运行性能。前端工程进行到第二阶段会选型一种构建工具，对代码进行压缩，校验，之后再以页面为单位进行简单的资源合并。<br>
<strong>第三阶段：JS/CSS模块化开发。<strong>分而治之是软件工程中的重要思想，是复杂系统开发和维护的基石，这点放在前端开发中同样适用。在解决了基本开发效率运行效率问题之后，前端团队开始</strong>思考维护效率</strong>，模块化是目前前端最流行的分治手段。模块化开发的最大价值应该是分治。</p>
<ul>
<li>JS 模块化方案，AMD/CommonJS/UMD/ES6 Module等。</li>
<li>CSS 模块化方案，less、sass、stylus等预处理器的import/mixin特性支持下实现。</li>
</ul>
<p>第四阶段<br>
前端是一种<strong>技术问题较少、工程问题较多</strong>的软件开发领域。</p>
<p>在开发一款完整的Web应用时，前端将面临许多工程问题，比如：</p>
<ul>
<li>大体量：多功能、多页面、多状态、多系统；</li>
<li>大规模：多人甚至多团队合作开发；</li>
<li>高性能：CDN 部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载、移动端首屏 CSS 内嵌、HTTP 2.0 服务端资源推送。</li>
</ul>
<p>用最少最简单明了的规则制定出最容易遵守最容易理解的开发规范或工具，以提升开发效率和工程质量，这同样是小而美的典范！</p>
<p>进入第四阶段，我们只需做好两件事就能大幅提升前端开发效率，并且兼顾运行性能，那就是——组件化开发与资源管理。</p>
<p>第一件事：组件化开发</p>
<blockquote>
<p>前端作为一种GUI软件，光有JS/CSS的模块化还不够，对于UI组件的分治也有着同样迫切的需求。</p>
</blockquote>
<p>前端组件化开发理念：</p>
<blockquote>
<ol>
<li>页面上的每个独立的可视/可交互区域视为一个组件；</li>
<li>每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；</li>
<li>由于组件具有独立性，因此组件与组件之间可以自由组合；</li>
<li>页面只不过是组件的容器，负责组合组件形成功能完整的界面；</li>
<li>当不需要某个组件，或者想要替换组件时，可以整个目录删除/替换。</li>
</ol>
</blockquote>
<blockquote>
<p>基于这样的工程理念，我们很容易将系统以独立的组件为单元进行分工划分。由于系统功能被分治到独立的模块或组件中，粒度比较精细，组织形式松散，开发者之间不会产生开发时序的依赖，大幅提升并行的开发效率，理论上允许随时加入新成员认领组件开发或维护工作，也更容易支持多个团队共同维护一个大型站点的开发。</p>
</blockquote>
<p>整个前端项目可以划分为这么几种开发概念：</p>
<ul>
<li><strong>JS 模块</strong>：<strong>独立</strong>的算法和数据单元。例如：浏览器环境监测；网络请求；应用配置。</li>
<li><strong>CSS 模块</strong>：<strong>独立</strong>的功能性样式单元。例如：栅格系统；字体图标；动画样式。</li>
<li><strong>UI 组件</strong>：<strong>独立</strong>的可视/可交互功能单元。例如：页头、页尾、导航栏。</li>
<li><strong>页面</strong>：前端这种 GUI 软件的界面状态，是 <strong>UI 组件的容器</strong>。例如：首页，列表页，用户管理。</li>
<li><strong>应用</strong>：<strong>整个项目或整个站点</strong>被称之为应用，由多个页面组成。</li>
</ul>
<p>第二件事：“智能”静态资源管理</p>
<blockquote>
<p>模块化/组件化开发之后，我们最终要解决的，就是模块/组件加载的技术问题。</p>
</blockquote>
<blockquote>
<p>前端是一种远程部署，运行时增量下载的GUI软件。前端应用没有安装过程，其所需程序资源都部署在远程服务器，用户使用浏览器访问不同的页面来加载不同的资源，随着页面访问的增加，渐进式的将整个程序下载到本地运行，<strong>“增量下载”是前端在工程上有别于客户端GUI软件的根本原因。</strong></p>
</blockquote>
<blockquote>
<p>静态资源管理系统 = 资源表 + 资源加载框架<br>
通过一个小工具扫描所有静态资源，生成一张资源表，然后有一个PHP实现的资源管理框架（Celerity）提供了资源加载接口，替代了传统的script/link等静态的资源加载标签，最终通过查表来加载资源。</p>
</blockquote>
<blockquote>
<p>资源表是非常通用的数据结构，无论什么业务场景，其业务代码最终都可以被扫描为相同结构的表数据，并标记资源间的依赖关系，有了表之后我们只需根据不同的业务场景定制不同的资源加载框架就行了，从此彻底告别一个团队维护一套工具的时代！！！</p>
</blockquote>
<h3 id="结论">结论</h3>
<p>作为初学者，无须把目标设为掌握前端工程话，但必须得提前<strong>了解前端工程化</strong>。从 fouber 这篇文章，有一些关键概念和理念。</p>
<p><strong>关键概念</strong></p>
<ul>
<li>模块化与组件化</li>
<li>分治</li>
<li>三个效率：开发效率、运行效率（性能）、维护效率</li>
<li>增量下载</li>
</ul>
<p><strong>关键观点</strong></p>
<ul>
<li>前端即用户图形界面。</li>
<li>前端是一种<strong>技术问题较少、工程问题较多</strong>的软件开发领域。</li>
<li>静态资源管理系统 = 资源表 + 资源加载框架</li>
</ul>
<p>FACEBOOK 3D:</p>
<blockquote>
<p>Allow product engineers to move fast: 3D</p>
<ul>
<li>Simple <strong>D</strong>evelopment process</li>
<li>Quick <strong>D</strong>eployment</li>
<li>Easy <strong>D</strong>ebugging</li>
</ul>
</blockquote>
<p>内容来源：<a href="https://github.com/fouber/blog/issues/10" target="_blank" rel="external">fouber：前端工程——基础篇</a><br>
拓展阅读：<a href="http://velocity.oreilly.com.cn/2010/index.php?func=session&amp;name=%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E8%B5%84%E6%BA%90%E7%9A%84%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96" target="_blank" rel="external">静态网页资源的管理和优化</a></p>
<h1>概念</h1>
<p><strong>没有银弹</strong>：没有任何一项技术或方法能让软件工程的生产力在十年内提高十倍。[百度百科]<br>
<strong>粒度</strong>：指数据仓库的数据单位中保存数据的细化或综合程度的级别。细化程度越高，粒度级就越小；相反，细化程度越低，粒度级就越大。数据的粒度一直是一个设计问题。在数据仓库环境中粒度之所以是主要的设计问题，是因为它<strong>深深地影响存放在数据仓库中的数据量的大小，同时影响数据仓库所能回答的查询类型</strong>。在数据仓库中的数据量大小与查询的详细程度之间要作出权衡。[百度百科]</p>
]]></content>
    
    <summary type="html">
    
      JS 看了 Date 和 RegExp 类型的内容。翻看了jQuery的一本书，记录了书中阐述的jQuery的众多优点。最后阅读了一篇关于前端工程化的文章。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://lix90.github.io/tags/jQuery/"/>
    
      <category term="Front-end" scheme="http://lix90.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-27</title>
    <link href="http://lix90.github.io/2016/11/27/2016-11-27-daily/"/>
    <id>http://lix90.github.io/2016/11/27/2016-11-27-daily/</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2016-11-28T12:23:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1>杂项</h1>
<h2 id="css">CSS</h2>
<p>CSS 原生变量</p>
<ul>
<li>原生变量定义语法 <code>--*</code>，例如 <code>--col: #fff;</code></li>
<li>原生变量使用语法是：<code>var(--*)</code>，例如 <code>background: var(--blue);</code></li>
<li>不能包含 <code>$[^(%</code> 等字符，普通字符局限在数字 <code>[0-9]</code>、字母 <code>[a-zA-Z]</code>、下划线 <code>_</code> 和短横线 <code>-</code> 组合，但可以为中文，日文或者韩文文字。</li>
<li>变量的定义和使用只能在声明块 <code>{}</code> 里面</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="http://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/" target="_blank" rel="external">张鑫旭博客：了解 CSS/CSS3 原生变量</a></li>
<li><a href="http://www.w3cplus.com/css3/css-properties-in-depth.html" target="_blank" rel="external">深入学习 CSS 自定义属性</a></li>
</ul>
<p>CSS font-weight</p>
<ul>
<li>一般情况下，特定字体仅包含少数可用字重。若指定的字重不存在直接匹配，那么通过字体匹配算法规则匹配使用邻近的可用字重。</li>
<li>在实际中，最为常用的字重为 normal 和 bold。400、700 等效于 normal、bold。</li>
<li>推荐使用数值替代 lighter、bolder，因为涉及到继承计算问题，使用数值会更清晰命令。</li>
</ul>
<p>参考：<a href="https://aotu.io/notes/2016/11/08/css3fontweight/" target="_blank" rel="external">Aotu.io：深入了解 font-weight</a></p>
<p>CSS Dev Conf 可以获取到 CSS 有关的最新资讯和趋势，可以重点关注下。</p>
<p><a href="http://www.w3cplus.com/css/notes-css-dev-conf-2016.html" target="_blank" rel="external">2016 CSS Dev Conf会议笔记</a></p>
<h2 id="ux-用户体验设计：愉悦性">UX 用户体验设计：愉悦性</h2>
<p><strong>增加认知负荷与交互成本</strong>：愉悦性的设计降低可用性。</p>
<blockquote>
<p>视觉表现层面的愉悦性可以为产品赋予生命与性格，使品牌形象更加生动饱满。然而一旦处理不当，愉悦性反而会破坏产品最基本的可用性，阻碍用户获取信息、完成任务。</p>
</blockquote>
<p><strong>愉悦设计容易审美疲劳</strong>：愉悦感容易随时间淡化，只能一遍遍重设计，难以维持。<br>
<strong>愉悦的界定是主观的</strong><br>
<strong>扩展性有限</strong>：当用户群扩大，试图取悦众人的设计目标会越发难以实现。<strong>问题：受众越广，设计越不应该追求个性化？</strong></p>
<p>参考：<a href="http://beforweb.com/node/873" target="_blank" rel="external">BeForWeb博客</a></p>
<h2 id="前端开发">前端开发</h2>
<blockquote>
<p>At a minimum, all code written for general audiences should be:</p>
<ul>
<li><strong>responsive</strong> 响应式：<a href="http://alistapart.com/article/responsive-web-design" target="_blank" rel="external">A List Apart: Responsive Web Design</a></li>
<li><strong>accessible</strong> 可访问：<a href="https://www.w3.org/WAI/WCAG20/glance/Overview.html" target="_blank" rel="external">Web Content Accessibility Guidelines (WCAG) 2.0</a></li>
<li><strong>performant</strong> 性能优化：<a href="http://alistapart.com/column/performance-matters" target="_blank" rel="external">A List Apart: Performance Matters</a></li>
</ul>
</blockquote>
<p>来源：<a href="http://feedproxy.google.com/~r/alistapart/main/~3/wgw5fwWnE-g/insisting-on-core-development-principles" target="_blank" rel="external">Insisting on Core Development Principles</a></p>
<h2 id="正则表达式">正则表达式</h2>
<p>正则表达式可以做什么？</p>
<ul>
<li>数据验证</li>
<li>复杂的字符串搜寻、替换</li>
<li>基于模式匹配从字符串中提取子字符串</li>
</ul>
<p>来源：<a href="https://aotu.io/notes/2016/11/17/regexp-theory/" target="_blank" rel="external">Aotu.io：正则表达式理论篇</a></p>
<h1>JavaScript：解构赋值</h1>
<p><strong>解构赋值句法</strong>是一个能够从数组或者对象中提取出数据并赋值到不同变量的表达式。</p>
<h2 id="数组解构赋值">数组解构赋值</h2>
<p>基本赋值：数组中的元素依次赋值给左边的变量。如果变量个数超出了数组长度，那么超出部分的变量赋值为 <code>undefined</code>。如果变量个数不及数组长度，多余的数组元素不赋值给变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</div><div class="line"></div><div class="line"><span class="comment">// 变量个数等于 foo 长度</span></div><div class="line"><span class="keyword">var</span> [One, Two, Three] = foo;</div><div class="line"></div><div class="line"><span class="comment">// 变量个数小于 foo 长度</span></div><div class="line"><span class="keyword">var</span> [One, Two] = foo;</div><div class="line"></div><div class="line"><span class="comment">// 变量个数大于 foo 长度</span></div><div class="line"><span class="keyword">var</span> [One, Two, Three, Four] = foo;</div><div class="line"><span class="built_in">console</span>.log(Four); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>可以对变量设定默认值，这样当数组长度不足时，仍然具有想要的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a, b;</div><div class="line">[a = <span class="number">1</span>, b = <span class="number">8</span>] = [<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 8 not undefined</span></div></pre></td></tr></table></figure>
<p>可以用过逗号分隔而不写变量名忽略掉某些数组的值。解构句法也可以从函数输出值赋值给变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 忽略掉特定的值</span></div><div class="line"><span class="keyword">var</span> [a, , b] = f();</div><div class="line"></div><div class="line"><span class="comment">// 忽略掉所有值</span></div><div class="line">[,,] = f();</div></pre></td></tr></table></figure>
<p>使用 <code>...</code> 将剩余内容赋值给一个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [2, 3]</span></div></pre></td></tr></table></figure>
<p>交换变量值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">[a, b] = [b, a];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>拉取正则表达式的匹配值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"https://developer.mozilla.org/en-US/Web/JavaScript"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> parsedURL = <span class="regexp">/^(\w+)\:\/\/([^\/]+)\/(.*)$/</span>.exec(url);</div><div class="line"><span class="built_in">console</span>.log(parsedURL);</div><div class="line"><span class="keyword">var</span> [, protocol, fullhost, fullpath] = parsedURL;</div><div class="line"><span class="built_in">console</span>.log(protocol); <span class="comment">// "https"</span></div></pre></td></tr></table></figure>
<p>补充：</p>
<ul>
<li><code>RegExp.prototype.exec()</code> 执行对特定字符串的匹配搜索，返回数组或 <code>null</code>。<code>regObj.exec(str)</code></li>
<li><code>RegExp.prototype.test()</code> 将正则表达式与特定字符串进行匹配，并执行搜索，返回 <code>true</code> 或 <code>false</code>。<code>regObj.test(str)</code></li>
<li><code>String.prototype.search()</code> 执行特定字符串与正则表达式的匹配搜索，返回 <code>true</code> 或 <code>false</code>。<code>str.search(regexp)</code></li>
<li><code>String.prototype.match()</code> 执行特定字符串与正则表达式的匹配搜索，返回数组或 <code>null</code>。<code>str.match(regexp)</code></li>
</ul>
<h2 id="对象解构">对象解构</h2>
<p>对象的解构与数组不同的地方，最显著在于括号，数组使用 <code>[]</code>，对象使用 <code>{}</code>。基本用法为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;p: <span class="number">1</span>, q: <span class="literal">true</span>&#125;;</div><div class="line"><span class="keyword">var</span> &#123;p, q&#125; = obj; <span class="comment">// 变量名必须为对象的 key，否则变量值为 undefined。</span></div></pre></td></tr></table></figure>
<p>但是也可以赋值到新变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;p: foo, q: bar&#125; = o;</div></pre></td></tr></table></figure>
<p>如果未先声明对象，语句应该用 <code>()</code> 包裹。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a, b;</div><div class="line">(&#123;a, b&#125; = &#123;a:<span class="number">1</span>, b:<span class="number">2</span>&#125;);</div></pre></td></tr></table></figure>
<p>和数组一样，对象解构的变量也可以设定默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;a = <span class="number">10</span>, b = <span class="number">5</span>&#125; = &#123;a: <span class="number">3</span>&#125;;</div></pre></td></tr></table></figure>
<p>可用于设定函数的默认参数。<br>
对嵌套对象的数组解构。<code>var {varname: [{element: alias}]} = obj;</code><br>
在迭代时解构对象。 <code>for (var {var: alias} of obj) {...}</code></p>
<p>参考：<br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">MDN: Destructuring assignment</a></p>
]]></content>
    
    <summary type="html">
    
      阅读了几篇关于 CSS 的文章，主题涉及原生变量、字重、2016年CSS开发者大会。如何处理用户体验设计中的“愉悦性”问题？前端开发三个核心开发问题：响应式、可访问性、性能优化。JS 中的“解构赋值”句法。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Conf" scheme="http://lix90.github.io/tags/Conf/"/>
    
      <category term="UX" scheme="http://lix90.github.io/tags/UX/"/>
    
      <category term="Front-end" scheme="http://lix90.github.io/tags/Front-end/"/>
    
      <category term="regex" scheme="http://lix90.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-25</title>
    <link href="http://lix90.github.io/2016/11/25/2016-11-25-daily/"/>
    <id>http://lix90.github.io/2016/11/25/2016-11-25-daily/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2016-11-28T12:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Chrome 开发者工具</h1>
<p>来源：</p>
<ul>
<li>伯乐在线：Chrome 开发者工具详解<a href="http://web.jobbole.com/89079/" target="_blank" rel="external">(1)</a><a href="http://web.jobbole.com/89106/" target="_blank" rel="external">(2)</a><a href="http://web.jobbole.com/89148/" target="_blank" rel="external">(3)</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="external">Google Developers: Chrome DevTools</a></li>
</ul>
<p>Console 面板</p>
<ul>
<li>console.log 显示一般的基本日志信息，当要显示的基本日志太多时可以使用 console.group 将相关的日志进行分组</li>
<li>console.warn 显示带有黄色警告图标的警告信息</li>
<li>console.error 显示带有红色错误图标的红色的错误信息</li>
<li>console.assert 当第一个参数为 false 时，显示出带有红色错误图标并且包含第二个参数的内容</li>
</ul>
<p>Source 面板可以用来调试代码</p>
<p>Network</p>
<blockquote>
<p>Network 面板可以记录页面上的网络请求的详情信息，从发起网页页面请求 Request 后分析 HTTP 请求后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间、Request 和 Response 等），可以根据这个进行网络性能优化。</p>
</blockquote>
<blockquote>
<p>Timeline 面板是整个面板里面最复杂的一个面板。可以利用这个面板来<strong>记录和分析网页运行过程中的所有活动行为信息</strong>，用来分析你的网页的程序性能问题。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      因为感冒，缺席两天学习，仅仅阅读了关于 chrome 开发者工具的文章。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Chrome" scheme="http://lix90.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>R：基本数据对象</title>
    <link href="http://lix90.github.io/2016/11/24/2016-11-24-r-data-type/"/>
    <id>http://lix90.github.io/2016/11/24/2016-11-24-r-data-type/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2016-11-28T12:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>vector 向量</h1>
<p>向量 vector 由同类型的元素构成。</p>
<h2 id="向量创建">向量创建</h2>
<p><code>vector</code> 创建给定长度和模式的向量。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; vector(mode = <span class="string">"character"</span>, length = <span class="number">5</span>)</div><div class="line">[<span class="number">1</span>] <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span></div></pre></td></tr></table></figure>
<p><code>as.vector</code> 可以将实参转换为给定模式的向量。如果输入结果为原子模式（atomic），属性将丢失。R 中原子模式为 “logical”, “integer”, “numeric” (“double”), “complex”, “character”, 和 “raw”。在 R 中原子模式应该就是指最基本的模式，能够组合成其他的复杂模式，例如 “list” “expression”。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x &lt;- c(a = <span class="number">1</span>, b = <span class="number">2</span>)</div><div class="line">a b</div><div class="line"><span class="number">1</span> <span class="number">2</span></div><div class="line">&gt;&gt;&gt; is.vector(x)</div><div class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></div><div class="line">&gt;&gt;&gt; as.vector(x)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span></div><div class="line">all.equal(x, as.vector(x))</div><div class="line">[<span class="number">1</span>] <span class="string">"names for target but not for current"</span></div></pre></td></tr></table></figure>
<p><code>c</code> 可以将它的实参组合成一个向量。所有的实参都将被强制转换为通用的类型，除了 names 之外，其他属性都将丢失。输出数据类型由实参中元素的最高级类型决定（NULL &lt; raw &lt; logical &lt; integer &lt; double &lt; complex &lt; character &lt; list &lt; expression）。</p>
<p>例如：</p>
<p>转换为字符串。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; (out &lt;- c(<span class="number">1</span>, <span class="string">"2"</span>))</div><div class="line">[<span class="number">1</span>] <span class="string">"1"</span> <span class="string">"2"</span></div></pre></td></tr></table></figure>
<p>转换为 list</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; (out &lt;- c(<span class="number">1</span>, list(<span class="number">2</span>)))</div><div class="line">[[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="number">1</span></div><div class="line"></div><div class="line">[[<span class="number">2</span>]]</div><div class="line">[<span class="number">1</span>] <span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="向量运算">向量运算</h2>
<p><strong>向量的索引</strong><br>
<code>a[1]</code> 单个元素的索引<br>
<code>a[1:2]</code> <code>a[c(1,3)]</code> 多个元素的索引<br>
<code>a[a==5]</code> 使用逻辑值来索引<br>
<code>a[-1]</code> <code>a[c(-1,-3)]</code> 排除元素</p>
<p><strong>向量的运算</strong><br>
<code>a*2</code> 向量与2相乘，2将与向量的每一个元素相乘。<br>
<code>a*b</code> 向量与向量相乘，对应位置的元素相乘。如果 <code>a</code> 和 <code>b</code> 的长度不等长呢？试一个例子：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; v1 &lt;- c(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; v2 &lt;- c(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</div><div class="line">&gt;&gt;&gt; v3 &lt;- c(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; v1*v2</div><div class="line">[<span class="number">1</span>] <span class="number">3</span> <span class="number">6</span> <span class="number">3</span></div><div class="line">Warning message:</div><div class="line">In v1 * v2 : 长的对象长度不是短的对象长度的整倍数</div><div class="line">&gt;&gt;&gt; v1*v3</div><div class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">8</span> <span class="number">4</span> <span class="number">8</span></div></pre></td></tr></table></figure>
<p>也就是说，向量相乘时，若长度不相等，较短的向量会继续往后与长的向量相乘。如果向量的长度不是整数倍，会出现警告：“长的对象长度不是短的对象长度的整倍数”。</p>
<p><code>a%%2</code> 对向量所有元素求余数<br>
<code>a%/%2.4</code> 向量所有元素与2.4进行整除运算<br>
<code>t(a)</code> 对 <code>a</code> 进行转置</p>
<p><strong>总结：对于向量的运算，都是对其元素的运算。</strong></p>
<h1>matrix 矩阵</h1>
<h2 id="矩阵创建">矩阵创建</h2>
<p><code>matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)</code></p>
<ul>
<li><code>data</code> 为向量类型，非原子模式的对象将由 <code>as.vector</code> 强制转换为向量，并且去掉属性。</li>
<li><code>nrow</code> <code>ncol</code> 指定矩阵的行或列的数目，如果两个参数均未指定，那么将得到一个单列矩阵。</li>
<li><code>byrow</code> 逻辑值，若 <code>FALSE</code>（默认），矩阵按列来填充；若 <code>TRUE</code> 则按行填充。</li>
<li><code>dimnames</code> 矩阵的名称属性，<code>NULL</code> 或者长度为 list 的对象，空 list 为 <code>NULL</code>。list 的第一个元素的值被当作矩阵行的名称。list 也可以含有名称，那么 list 的名称将被当作矩阵的维度名称。</li>
</ul>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>,</div><div class="line">+ dimnames = list(c(<span class="string">"R.1"</span>, <span class="string">"R.2"</span>), c(<span class="string">"C.1"</span>, <span class="string">"C.2"</span>, <span class="string">"C.3"</span>)))</div><div class="line">&gt;&gt;&gt; mdat</div><div class="line">     C.1 C.2 C.3</div><div class="line">row1   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></div><div class="line">row2  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span></div></pre></td></tr></table></figure>
<h2 id="矩阵运算">矩阵运算</h2>
<p><code>a[,2]</code> <code>a[1,2]</code> <code>a[c(1,2),]</code> <code>a[-2,]</code> 矩阵索引或者取子矩阵<br>
<code>rbind(a,b)</code> <code>cbind(a,c)</code> 将两个矩阵或向量按照行或者列合并</p>
<p><code>a*b</code> 一对一乘积（点积），行和列数必须匹配。<br>
<code>a%*%b</code> 矩阵乘积，<code>a</code> 的列必须等于 <code>b</code> 的行。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a &lt;- matrix(<span class="number">1</span>:<span class="number">6</span>, nrow = <span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; b &lt;- matrix(<span class="number">2</span>:<span class="number">7</span>, nrow = <span class="number">3</span>)</div><div class="line">&gt;&gt;&gt; a*b</div><div class="line">Error <span class="keyword">in</span> a * b : 非整合陈列</div><div class="line">&gt;&gt;&gt; a*t(b)</div><div class="line">[,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">9</span>   <span class="number">20</span></div><div class="line">[<span class="number">2</span>,]   <span class="number">10</span>   <span class="number">24</span>   <span class="number">42</span></div><div class="line">&gt;&gt;&gt; a%*%b</div><div class="line">[,<span class="number">1</span>] [,<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>,]   <span class="number">31</span>   <span class="number">58</span></div><div class="line">[<span class="number">2</span>,]   <span class="number">40</span>   <span class="number">76</span></div><div class="line">&gt;&gt;&gt; a%*%t(b)</div><div class="line">Error <span class="keyword">in</span> a %*% t(b) : 非整合参数</div></pre></td></tr></table></figure>
<p><code>apply(a, MARGIN, FUN, ...)</code> 对矩阵或数组的向量化运算，如果存在名称的话，<code>MARGIN</code> 也可为维度的名称字符串。在此只讨论对矩阵的用法。</p>
<ul>
<li><code>apply(a, MARGIN = 1, sum)</code> 对矩阵 a 的行求和。</li>
<li><code>apply(a, MARGIN = 2, sum)</code> 对矩阵 a 的列求和。</li>
<li><code>apply(a, MARGIN = C(1,2), sum)</code> 对矩阵 a 的行列求和，得到的仍为原来的矩阵。</li>
</ul>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a &lt;- matrix(<span class="number">1</span>:<span class="number">6</span>, nrow = <span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; apply(a, <span class="number">1</span>, sum)</div><div class="line">[<span class="number">1</span>]  <span class="number">9</span> <span class="number">12</span></div><div class="line">&gt;&gt;&gt; apply(a, <span class="number">2</span>, sum)</div><div class="line">[<span class="number">1</span>]  <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span></div><div class="line">&gt;&gt;&gt; apply(a, c(<span class="number">1</span>,<span class="number">2</span>), sum)</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">5</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span>    <span class="number">6</span></div></pre></td></tr></table></figure>
<p><code>diag(a)</code> 提取矩阵 a 的对角元素<br>
<code>diag(1:4)</code> 构建一个新的对角矩阵<br>
<code>crossprod(a,b)</code> 矩阵叉积，等同于 <code>t(a)%*%b</code>，前者计算效率更高。</p>
<h1>array 数组创建</h1>
<p><code>array(data = NA, dim = length(data), dimnames = NULL)</code></p>
<p>数组可以存储两个以上维度数据。矩阵其实是特殊的两个维度的数组。<code>dim</code> 用于指定每个维度的长度。如果 <code>data</code> 数据长度不足，将会被复制循环填充。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; arr &lt;- array(<span class="number">1</span>:<span class="number">12</span>, dim = c(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">&gt;&gt;&gt; arr</div><div class="line">, , <span class="number">1</span></div><div class="line"></div><div class="line">[,<span class="number">1</span>] [,<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span></div><div class="line"></div><div class="line">, , <span class="number">2</span></div><div class="line"></div><div class="line">[,<span class="number">1</span>] [,<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">5</span>    <span class="number">7</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">6</span>    <span class="number">8</span></div><div class="line"></div><div class="line">, , <span class="number">3</span></div><div class="line"></div><div class="line">[,<span class="number">1</span>] [,<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">9</span>   <span class="number">11</span></div><div class="line">[<span class="number">2</span>,]   <span class="number">10</span>   <span class="number">12</span></div></pre></td></tr></table></figure>
<h1>factor 因子</h1>
<p>因子是一个由字符串或者整数组成的向量，用来对另外一个等长的向量进行分类的离散变量。与一般的向量不同点是 factor 具有 <code>level</code> 属性。R 提供了已排序和未排序两类 factor。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">factor(x = character(), levels, labels = levels,</div><div class="line">    exclude = <span class="literal">NA</span>, ordered = is.ordered(x), nmax = <span class="literal">NA</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>x</code> 向量，一般为少数几个不同的值。向量 <code>x</code> 的类型必须可以被转换为字符串 <code>as.character()</code> 和可以被排序 <code>sort.list</code>。</li>
<li><code>levels</code> 水平，<code>x</code> 中选择性的值构成的字符串向量。默认值为 <code>unique(as.character(x))</code>，并且增序排列。<code>levels</code> 可以少于 <code>sort(unique(x))</code>。如果 <code>levels</code> 少于 <code>sort(unique(x))</code>，<code>x</code> 中没有包含的元素将被当作 <code>NA</code>。</li>
<li><code>labels</code> 可选的参数，用来命名因子水平名称。例如，如果 <code>labels = &quot;f&quot;</code>，那么因子名为 <code>f1, f2, ...</code>。</li>
<li><code>exclude</code> 在组成 <code>levels</code> 时需要排除掉的元素。与 <code>x</code> 类型相同，否则需要强制转换。</li>
<li><code>ordered</code> 是否有序。有序的因子与未排序的因子仅仅在类上不同，但是方法和模型拟合函数对两者的处理有非常大的不同。</li>
<li><code>nmax</code> 水平数的上限。</li>
</ul>
<p><code>factor</code> 函数返回一个 “factor” 类的对象，这个对象具有和 <code>x</code> 等长的整数码，具有 “character” 模式的 “levels” 属性。如果 <code>ordered = TRUE</code> 或者使用了 <code>ordered()</code> ，那么对象则具有两个类 <code>c(&quot;ordered&quot;, &quot;factor&quot;)</code>。对因子的解释依赖于编码（codes）和水平属性（levels）两个因素，所以在对因子进行比较时需谨慎。对因子使用 <code>as.numeric</code> 没有意义，因为会自动强制转换。如果要将因子 <code>f</code> 转换为初始的数值，建议使用 <code>as.numeric(levels(f))[f]</code>，这样要比 <code>as.numeric(as.character(f))</code> 效率高。因子的水平默认进行了排序，但是排序的标准依赖本地区域设置。可能不是基于 ASCII。尽量不要使用 <code>NA</code> 作为水平值。</p>
<h2 id="因子的创建和操作">因子的创建和操作</h2>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a &lt;- c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; f &lt;- factor(a)</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">Levels: <span class="number">1</span> <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">## 指派了 levels 结果一致</span></div><div class="line">&gt;&gt;&gt; f &lt;- factor(a, levels = c(<span class="string">"1"</span>, <span class="string">"2"</span>))</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">Levels: <span class="number">1</span> <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">## levels 个数少于 a</span></div><div class="line">&gt;&gt;&gt; f &lt;- factor(a, levels = c(<span class="string">"1"</span>))</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] <span class="number">1</span>    <span class="number">1</span>    &lt;<span class="literal">NA</span>&gt; &lt;<span class="literal">NA</span>&gt;</div><div class="line">Levels: <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">## 增加标签</span></div><div class="line">&gt;&gt;&gt; f &lt;- factor(a, labels = <span class="string">"x"</span>)</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] x1 x1 x2 x2</div><div class="line">Levels: x1 x2</div><div class="line"></div><div class="line"><span class="comment">## 增加排序</span></div><div class="line">&gt;&gt;&gt; f &lt;- factor(a, labels = <span class="string">"x"</span>, ordered = <span class="literal">TRUE</span>)</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] x1 x1 x2 x2</div><div class="line">Levels: x1 &lt; x2</div><div class="line"></div><div class="line"><span class="comment">## 改变 levels 的顺序</span></div><div class="line">&gt;&gt;&gt; f &lt;- factor(a, levels = c(<span class="string">"2"</span>, <span class="string">"1"</span>), labels = <span class="string">"x"</span>, ordered = <span class="literal">TRUE</span>)</div><div class="line">&gt;&gt;&gt; f</div><div class="line">[<span class="number">1</span>] x2 x2 x1 x1</div><div class="line">Levels: x1 &lt; x2</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 构建一个 data.frame</span></div><div class="line">&gt;&gt;&gt; c.1 &lt;- rep(c(<span class="string">"f1"</span>, <span class="string">"f2"</span>), each = <span class="number">3</span>)</div><div class="line">&gt;&gt;&gt; c.2 &lt;- <span class="number">1</span>:<span class="number">6</span></div><div class="line">&gt;&gt;&gt; d &lt;- data.frame(c.1, c.2)</div><div class="line">&gt;&gt;&gt; d</div><div class="line">  c.1 c.2</div><div class="line"><span class="number">1</span>  f1   <span class="number">1</span></div><div class="line"><span class="number">2</span>  f1   <span class="number">2</span></div><div class="line"><span class="number">3</span>  f1   <span class="number">3</span></div><div class="line"><span class="number">4</span>  f2   <span class="number">4</span></div><div class="line"><span class="number">5</span>  f2   <span class="number">5</span></div><div class="line"><span class="number">6</span>  f2   <span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment">## 将 c.1 转换为因子</span></div><div class="line">&gt;&gt;&gt; (d$c.1 &lt;- factor(c.1))</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f1 f2</div><div class="line"></div><div class="line"><span class="comment">## 或者使用 as.factor</span></div><div class="line">&gt;&gt;&gt; as.factor(d$c.1)</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f1 f2</div><div class="line"></div><div class="line"><span class="comment">## 进行一个排序</span></div><div class="line">&gt;&gt;&gt; factor(d$c.1, levels = c(<span class="string">"f2"</span>, <span class="string">"f1"</span>), ordered = <span class="literal">TRUE</span>)</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f2 &lt; f1</div><div class="line"></div><div class="line">&gt;&gt;&gt; factor(d$c.1, levels = c(<span class="string">"f1"</span>, <span class="string">"f2"</span>), ordered = <span class="literal">TRUE</span>)</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f1 &lt; f2</div><div class="line"></div><div class="line"><span class="comment">## 或者使用 ordered</span></div><div class="line">&gt;&gt;&gt; ordered(d$c.1, levels = c(<span class="string">"f1"</span>, <span class="string">"f2"</span>))</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f1 &lt; f2</div><div class="line"></div><div class="line">&gt;&gt;&gt; ordered(d$c.1, levels = c(<span class="string">"f2"</span>, <span class="string">"f1"</span>))</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f2 &lt; f1</div><div class="line"></div><div class="line"><span class="comment">## 转换因子的数据模式</span></div><div class="line">&gt;&gt;&gt; as.character(d$c.1)</div><div class="line">[<span class="number">1</span>] <span class="string">"f1"</span> <span class="string">"f1"</span> <span class="string">"f1"</span> <span class="string">"f2"</span> <span class="string">"f2"</span> <span class="string">"f2"</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; as.numeric(d$c.1)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; as.logical(d$c.1)</div><div class="line">[<span class="number">1</span>] <span class="literal">NA</span> <span class="literal">NA</span> <span class="literal">NA</span> <span class="literal">NA</span> <span class="literal">NA</span> <span class="literal">NA</span></div></pre></td></tr></table></figure>
<h1>list 列表</h1>
<p>list 是 R 中比较宽松的数据类型，它可以由类型不一致的任意对象构成。list 非常适合用于封装函数的输出对象。list 的元素可以使用 <code>$</code> <code>[]</code> <code>[[]]</code> 访问。</p>
<p><code>l = list(tag1 = value1, tag2 = value2, ..., tagn = valuen)</code></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = list(a = <span class="number">1</span>:<span class="number">10</span>, beta = exp(-<span class="number">3</span>:<span class="number">3</span>),</div><div class="line">+ logic = c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>))</div><div class="line"></div><div class="line">&gt;&gt;&gt; x</div><div class="line">$a</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div><div class="line"></div><div class="line">$beta</div><div class="line">[<span class="number">1</span>]  <span class="number">0.04978707</span>  <span class="number">0.13533528</span>  <span class="number">0.36787944</span>  <span class="number">1.00000000</span>  <span class="number">2.71828183</span>  <span class="number">7.38905610</span></div><div class="line">[<span class="number">7</span>] <span class="number">20.08553692</span></div><div class="line"></div><div class="line">$logic</div><div class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; x$a</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div><div class="line">&gt;&gt;&gt; x[<span class="number">1</span>]</div><div class="line">$a</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; x[[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div><div class="line">&gt;&gt;&gt; x[[<span class="number">1</span>]][<span class="number">1</span>]</div><div class="line">[<span class="number">1</span>] <span class="number">1</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>apply</code> 函数簇中 <code>lapply</code> 函数可以对 list 进行向量化运算，返回的数据类型也是 list。<code>sapply</code> 同样支持 list 类型的参数，但是默认返回的数据类型为 vector。但是当传入参数 <code>simplify = FALSE</code>，返回 list。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lapply(x, mean)</div><div class="line">$a</div><div class="line">[<span class="number">1</span>] <span class="number">5.5</span></div><div class="line"></div><div class="line">$beta</div><div class="line">[<span class="number">1</span>] <span class="number">4.535125</span></div><div class="line"></div><div class="line">$logic</div><div class="line">[<span class="number">1</span>] <span class="number">0.5</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; sapply(x, mean)</div><div class="line">       a     beta    logic</div><div class="line"><span class="number">5.500000</span> <span class="number">4.535125</span> <span class="number">0.500000</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; class(lapply(x,mean))</div><div class="line">[<span class="number">1</span>] <span class="string">"list"</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; class(sapply(x,mean))</div><div class="line">[<span class="number">1</span>] <span class="string">"numeric"</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; is.matrix(sapply(x,mean))</div><div class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; is.vector(sapply(x,mean))</div><div class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; is.list(sapply(x,mean,simplify = <span class="literal">FALSE</span>))</div><div class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></div></pre></td></tr></table></figure>
<p>其他与 list 有关的函数</p>
<p><code>unlist(x, recursive = TRUE, use.names = TRUE)</code> 将 list 展开，转换为 vector</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; unlist(x)</div><div class="line">         a1          a2          a3          a4          a5          a6</div><div class="line"> <span class="number">1.00000000</span>  <span class="number">2.00000000</span>  <span class="number">3.00000000</span>  <span class="number">4.00000000</span>  <span class="number">5.00000000</span>  <span class="number">6.00000000</span></div><div class="line">         a7          a8          a9         a10       beta1       beta2</div><div class="line"> <span class="number">7.00000000</span>  <span class="number">8.00000000</span>  <span class="number">9.00000000</span> <span class="number">10.00000000</span>  <span class="number">0.04978707</span>  <span class="number">0.13533528</span></div><div class="line">      beta3       beta4       beta5       beta6       beta7      logic1</div><div class="line"> <span class="number">0.36787944</span>  <span class="number">1.00000000</span>  <span class="number">2.71828183</span>  <span class="number">7.38905610</span> <span class="number">20.08553692</span>  <span class="number">1.00000000</span></div><div class="line">     logic2      logic3      logic4</div><div class="line"> <span class="number">0.00000000</span>  <span class="number">0.00000000</span>  <span class="number">1.00000000</span></div></pre></td></tr></table></figure>
<p><code>as.list(x, all.names = FALSE, sorted = FALSE, ...)</code> 将对象数据类型转换为 list<br>
<code>is.list(x)</code> 检测数据类型是否为 list</p>
<h1>Data.frame 数据框</h1>
<p>data.frame 是 R 中非常重要的数据类型，它长得像 matrix，但是又与 list 一样，可以存储不同类型的数据，但是有一个每列数据长度必须一致。同样，data.frame 数据的访问与 matrix 和 list 类似。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data.frame(<span class="keyword">...</span>, row.names = <span class="literal">NULL</span>, check.rows = <span class="literal">FALSE</span>,</div><div class="line">           check.names = <span class="literal">TRUE</span>,</div><div class="line">           stringsAsFactors = default.stringsAsFactors())</div></pre></td></tr></table></figure>
<p>参数</p>
<ul>
<li><code>...</code> 参数形式为 value 或者 tag = value，value 为数据内容，tag 为列名。</li>
<li><code>row.names</code> 行的名称</li>
<li><code>check.rows</code> 是否检测行数和名称是否一致。</li>
<li><code>check.names</code> 是否检测列的名称的合法性以及是否重复，有必要的话，通过 <code>make.names</code> 调整名称。</li>
<li><code>stringsAsFactors</code> 是否将字符向量转换为因子类型。如果不想让某个对象被强行转换类型，可以用 <code>I(a)</code> 包裹。</li>
</ul>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d &lt;- data.frame(c1 = rep(c(<span class="string">"f1"</span>, <span class="string">"f2"</span>), each = <span class="number">3</span>), c2 = <span class="number">1</span>:<span class="number">6</span>)</div><div class="line">&gt;&gt;&gt; d</div><div class="line">  c1 c2</div><div class="line"><span class="number">1</span> f1  <span class="number">1</span></div><div class="line"><span class="number">2</span> f1  <span class="number">2</span></div><div class="line"><span class="number">3</span> f1  <span class="number">3</span></div><div class="line"><span class="number">4</span> f2  <span class="number">4</span></div><div class="line"><span class="number">5</span> f2  <span class="number">5</span></div><div class="line"><span class="number">6</span> f2  <span class="number">6</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; d$c1</div><div class="line">[<span class="number">1</span>] f1 f1 f1 f2 f2 f2</div><div class="line">Levels: f1 f2</div><div class="line"></div><div class="line">&gt;&gt;&gt; d[<span class="number">1</span>]</div><div class="line">c1</div><div class="line"><span class="number">1</span> f1</div><div class="line"><span class="number">2</span> f1</div><div class="line"><span class="number">3</span> f1</div><div class="line"><span class="number">4</span> f2</div><div class="line"><span class="number">5</span> f2</div><div class="line"><span class="number">6</span> f2</div><div class="line"></div><div class="line">&gt;&gt;&gt; d[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">[<span class="number">1</span>] <span class="number">1</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; d[<span class="string">"c1"</span>]</div><div class="line">c1</div><div class="line"><span class="number">1</span> f1</div><div class="line"><span class="number">2</span> f1</div><div class="line"><span class="number">3</span> f1</div><div class="line"><span class="number">4</span> f2</div><div class="line"><span class="number">5</span> f2</div><div class="line"><span class="number">6</span> f2</div><div class="line"></div><div class="line">&gt;&gt;&gt; d[<span class="string">"c1"</span>][<span class="number">1</span>,]</div><div class="line">[<span class="number">1</span>] f1</div><div class="line">Levels: f1 f2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文总结了下 R 语言中基本的几种数据对象，包括：向量、矩阵、多维数组、因子、列表、数据框。内容几乎全部从 R 语言内置文档阅读获取。
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="R" scheme="http://lix90.github.io/categories/Original/R/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-24</title>
    <link href="http://lix90.github.io/2016/11/24/2016-11-24-daily/"/>
    <id>http://lix90.github.io/2016/11/24/2016-11-24-daily/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2016-11-28T12:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>25 个公开数据网站</h1>
<p><strong>一般类型的数据</strong><br>
<a href="https://www.data.gov/" target="_blank" rel="external">data.gov</a> 美国政府公开数据，数据涉及气候、教育、能源、金融等其他领域。<br>
<a href="https://data.gov.in/" target="_blank" rel="external">data.gov.in</a> 印度政府公开数据，涉及不同行业，气候，健康医疗等。<br>
<a href="http://data.worldbank.org/" target="_blank" rel="external">World Bank</a> 世界银行公开数据，提供了 Open Data Catalog，世界发展指数，教育指数等。<br>
<a href="https://rbi.org.in/Scripts/Statistics.aspx" target="_blank" rel="external">RBI</a> 印度储备银行数据<br>
<a href="https://github.com/fivethirtyeight/data" target="_blank" rel="external">Five Thirty Eight Datasets</a> FiveThirtyEight 用过的数据集。</p>
<p><strong>大数据集</strong><br>
<a href="https://aws.amazon.com/datasets/" target="_blank" rel="external">Amazon Web Services (AWS) datasets</a><br>
<a href="https://cloud.google.com/bigquery/public-data/" target="_blank" rel="external">Google datasets</a><br>
<a href="https://research.google.com/youtube8m/" target="_blank" rel="external">Youtube labeled Video Dataset</a></p>
<p><strong>用于预测模型和机器学习的数据集</strong><br>
<a href="https://archive.ics.uci.edu/ml/datasets.html" target="_blank" rel="external">UCI Machine Learning Repository</a><br>
<a href="https://www.kaggle.com/datasets" target="_blank" rel="external">Kaggle</a><br>
<a href="https://datahack.analyticsvidhya.com/contest/all/" target="_blank" rel="external">Analytics Vidhya</a><br>
<a href="https://www.quandl.com/" target="_blank" rel="external">Quandl</a> 金融，经济，以及其他。<br>
<a href="http://www.kdd.org/kdd-cup" target="_blank" rel="external">Past KDD Cups</a><br>
<a href="https://www.drivendata.org/" target="_blank" rel="external">Driven Data</a></p>
<p><strong>图片分类数据集</strong><br>
<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="external">The MNIST Database</a><br>
<a href="http://www.ee.surrey.ac.uk/CVSSP/demos/chars74k/" target="_blank" rel="external">Chars74K</a><br>
<a href="http://vasc.ri.cmu.edu//idb/html/face/frontal_images/index.html" target="_blank" rel="external">Frontal Face Images</a><br>
<a href="http://image-net.org/" target="_blank" rel="external">ImageNet</a></p>
<p><strong>文本分类数据集</strong><br>
<a href="http://www.esp.uem.es/jmgomez/smsspamcorpus/" target="_blank" rel="external">Spam – Non Spam</a><br>
<a href="http://thinknook.com/twitter-sentiment-analysis-training-corpus-dataset-2012-09-22/" target="_blank" rel="external">Twitter Sentiment Analysis</a><br>
<a href="http://www.cs.cornell.edu/People/pabo/movie-review-data/" target="_blank" rel="external">Movie Review Data</a></p>
<p><strong>推荐引擎数据集</strong><br>
<a href="http://grouplens.org/" target="_blank" rel="external">MovieLens</a><br>
<a href="http://www.ieor.berkeley.edu/~goldberg/jester-data/" target="_blank" rel="external">Jester</a></p>
<p><strong>其他数据集</strong><br>
<a href="http://www.kdnuggets.com/datasets/index.html" target="_blank" rel="external">KNDuggets</a><br>
<a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="external">Awesome Public Datasets</a><br>
<a href="https://www.reddit.com/r/datasets/" target="_blank" rel="external">Reddit Datasets Subreddit</a></p>
<p>来源：<a href="https://www.analyticsvidhya.com/blog/2016/11/25-websites-to-find-datasets-for-data-science-projects/" target="_blank" rel="external">Analytics Vidhya</a></p>
<h1>Emacs 手册阅读</h1>
<p><code>C-x =</code> <code>what-cursor-position</code> 打印光标位置信息，并且描述光标之后的字符的信息，提供字符码。</p>
<p>**反馈区（echo area）**显示的信息都将保存在 <code>*Messages*</code> 缓存区，但是 <code>*Messages*</code> 缓存区储存的信息的行数在一定限度以内，可以通过指定变量 <code>message-log-max</code> 值来调整存储行数。</p>
]]></content>
    
    <summary type="html">
    
      25个公开数据网站，以后可以拿来玩一玩。计划以后没事儿就读一读 emacs 官方的几个文档，学学基本的 emacs 和 emacs lisp 知识。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Data science" scheme="http://lix90.github.io/tags/Data-science/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="Open data" scheme="http://lix90.github.io/tags/Open-data/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-23</title>
    <link href="http://lix90.github.io/2016/11/23/2016-11-23-daily/"/>
    <id>http://lix90.github.io/2016/11/23/2016-11-23-daily/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-11-28T12:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1>CSS</h1>
<h2 id="grid-布局">grid 布局</h2>
<p>来源：<a href="https://www.villainhr.com/page/2016/10/12/%E4%BA%8C%E7%BB%B4%20grid%20%E5%B8%83%E5%B1%80" target="_blank" rel="external">VillainHR: 二维 grid 布局</a></p>
<p>flexbox &gt;&gt;&gt; 一维布局<br>
<strong>grid &gt;&gt;&gt; 二维布局</strong><br>
absolute &gt;&gt;&gt; 性能损耗？<br>
grid 浏览器还未全面支持，需要额外开启实验特性。在 Chrome 中打开 <code>chrome://flags</code> 开启实验特性。</p>
<p>grid 相当于 table 和 flexbox 两者结合的产物。直接通过 <code>display: grid</code> 使用。最基本格式为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"display:grid;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>container 与 items</strong></p>
<ul>
<li><strong>container</strong> 为 grid 的 DOM。<strong>items</strong> 为 container 包裹的一级子元素。<strong>二级子元素与 grid 没有关系。</strong></li>
</ul>
<p><strong>line 和 cell</strong></p>
<ul>
<li>grid_line 类似于表格线</li>
<li>grid_cell 类似于表格单元格</li>
</ul>
<p><strong>track 和 area</strong></p>
<ul>
<li>track 行或列</li>
<li>area 多个 cell 构成的面积</li>
</ul>
<p><strong>grid 布局</strong></p>
<ul>
<li>可以将 DOM 放置于 grid 中的任何格子里</li>
<li><strong>column, float, clear, 和 vertical-align 在 grid 布局中没有效果</strong></li>
</ul>
<p><strong>grid 标签</strong></p>
<ul>
<li>
<p>container</p>
<ul>
<li><code>grid-template-*</code></li>
<li><code>grid-auto-*</code></li>
<li><code>grid</code></li>
<li><code>grid-gap</code></li>
<li><code>grid-*-gap</code></li>
<li><code>justify/align-items</code> 控制 item 水平/垂直布局</li>
<li><code>justify/align-content</code> 控制整个 container 水平/垂直布局</li>
</ul>
</li>
<li>
<p>items</p>
<ul>
<li><code>grid-column-*</code></li>
<li><code>grid-row-*</code></li>
<li><code>grid-area</code></li>
<li><code>justify-self</code></li>
<li><code>align-self</code></li>
</ul>
</li>
</ul>
<h1>JavaScript</h1>
<h2 id="在一个-js-脚本文件中导入另一个-js-脚本文件">在一个 JS 脚本文件中导入另一个 JS 脚本文件</h2>
<p>来源：<a href="http://stackoverflow.com/questions/950087/how-to-include-a-javascript-file-in-another-javascript-file" target="_blank" rel="external">stackoverflow: How to include a JavaScript file in another JavaScript file?</a></p>
<p>JS 没有 import, include, 或 require（在 ES6 Modules 中已支持）。</p>
<p><strong>通过 AJAX 导入</strong></p>
<ul>
<li>但有一定的限制，可能会引入 bugs 和 hacks<br>
<strong>通过 jQuery 导入</strong>：<code>jQuery.getScript()</code> <a href="http://api.jquery.com/jQuery.getScript/" target="_blank" rel="external">see</a><br>
<strong>动态加载（Dynamic script loading）</strong>：通过 <code>script</code> 标签导入。<a href="http://unixpapa.com/js/dyna.html" target="_blank" rel="external">JavaScript Madness: Dynamic Script Loading</a><br>
<strong>将多个文件合并为一个文件，然后单独加载</strong>：<a href="http://stackoverflow.com/questions/5511989/combine-multiple-javascript-files-into-one-js-file" target="_blank" rel="external">Combine multiple JavaScript files into one JS file</a></li>
</ul>
<p><strong>如何检测脚本何时执行？</strong></p>
<h2 id="如何从-js-数组中删除特定元素？">如何从 JS 数组中删除特定元素？</h2>
<p>来源：<a href="http://stackoverflow.com/questions/5767325/how-to-remove-a-particular-element-from-an-array-in-javascript" target="_blank" rel="external">stackoverflow: How to remove a particular element from an array in JavaScript?</a></p>
<p>寻找数组中要删除的元素的索引（index）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> index = array.indexOf(<span class="number">5</span>); <span class="comment">// indexOf 在 IE7/8 下不支持</span></div></pre></td></tr></table></figure>
<p>通过 <code>splice</code> 删除索引对应的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</div><div class="line">    array.splice(index, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>splice</code> 的第二个参数为删除的元素的个数。</p>
<hr>
<h1>R</h1>
<h2 id="解释-lm-的输出结果">解释 <code>lm()</code> 的输出结果</h2>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mod &lt;- lm(iris$Sepal.Width ~ iris$Petal.Width)</div><div class="line">summary(mod)</div><div class="line"></div><div class="line">Call:</div><div class="line">lm(formula = iris$Sepal.Width ~ iris$Petal.Width)</div><div class="line"></div><div class="line">Residuals:</div><div class="line">     Min       1Q   Median       3Q      Max</div><div class="line">-<span class="number">1.09907</span> -<span class="number">0.23626</span> -<span class="number">0.01064</span>  <span class="number">0.23345</span>  <span class="number">1.17532</span></div><div class="line"></div><div class="line">Coefficients:</div><div class="line">                 Estimate Std. Error t value Pr(&gt;|t|)</div><div class="line">(Intercept)       <span class="number">3.30843</span>    <span class="number">0.06210</span>  <span class="number">53.278</span>  &lt; <span class="number">2e-16</span> ***</div><div class="line">iris$Petal.Width -<span class="number">0.20936</span>    <span class="number">0.04374</span>  -<span class="number">4.786</span> <span class="number">4.07e-06</span> ***</div><div class="line">---</div><div class="line">Signif. codes:  <span class="number">0</span> ‘***’ <span class="number">0.001</span> ‘**’ <span class="number">0.01</span> ‘*’ <span class="number">0.05</span> ‘.’ <span class="number">0.1</span> ‘ ’ <span class="number">1</span></div><div class="line"></div><div class="line">Residual standard error: <span class="number">0.407</span> on <span class="number">148</span> degrees of freedom</div><div class="line">Multiple R-squared:  <span class="number">0.134</span>,	Adjusted R-squared:  <span class="number">0.1282</span></div><div class="line"><span class="literal">F</span>-statistic: <span class="number">22.91</span> on <span class="number">1</span> and <span class="number">148</span> DF,  p-value: <span class="number">4.073e-06</span></div></pre></td></tr></table></figure>
<p><strong>Five point summary of Residuals</strong><br>
对残差（residuals）的快速总结。残差为所要预测的变量的实际值与模型预测的值的差值，即 $y - \hat{y}$。对于大多数回归模型，我们都希望残差的图看起来想正态分布。残差应该相对于均值对称分布，即中位数（Median）应该接近0，1Q 和 3Q 的值应该最好具有差不多的绝对值。</p>
<p><strong>Coefficients</strong><br>
模型中的每个系数均为（标准）高斯随机变量。<br>
$\hat{\beta_i}$ 为该随机变量的分布的均值的估计。<br>
标准误为该分布的方差的平方根，它是 $\hat{\beta_i}$ 的估计的可能性指标。<br>
$t$ 统计量为 $t_i = \frac{\hat{\beta_i}}{\hat{\sigma_i}}$</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(tstats &lt;- coef(mod) / sqrt(diag(vcov(mod))))</div></pre></td></tr></table></figure>
<ul>
<li><code>coef(mod)</code> 为 $\hat{\beta_i}$</li>
<li><code>sqrt(diag(vcov(mod)))</code> 模型参数的协方差矩阵的对角元素的平方根，即为参数的标准误（$\hat{\sigma_i}$）</li>
</ul>
<p>p-value 为当虚无假设为真时，获得当前 $t$ 的概率。计算 p-value：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span> * pt(abs(tstats), df = df.residual(mod), lower.tail = <span class="literal">FALSE</span>)</div></pre></td></tr></table></figure>
<p>**残差标准误（the residual standard error）**为参数 $\sigma$ 的估计。</p>
<blockquote>
<p>The assumption in ordinary least squares（普通最小二乘） is that the residuals are individually described by a Gaussian (normal) distribution with mean 0 and standard deviation $\sigma$. The $\sigma$ relates to the constant variance assumption（方差恒定）; each residual has the same variance and that variance is equal to $\sigma^2$.</p>
</blockquote>
<p><strong>adjusted R^2</strong></p>
<blockquote>
<p>The adjusted $R^2$ is the same thing as $R^2$, but adjusted for the complexity of the model, i.e. the number of parameters in the model. Think about things for a minute. If we have a model with a single parameter. It will have a certain $R^2$. If we add another parameter to this model, the $R^2$ of the new model has to increase, even if the added parameter has no statistical power. The adjusted $R^2$ tries to account for this, by including information on the number of parameters in the model. 预测变量的增加，模型的 R^2 也会相应的增加。</p>
</blockquote>
<p>计算 Adjusted $R^2$:</p>
<p>$$1 - (1 - R^2) \frac{n - 1}{n - p - 1}$$</p>
<p><strong>F 值</strong></p>
<blockquote>
<p>The $F$ is the ratio of two variances, the variance explained by the parameters in the model and the residual or unexplained variance. F 值为两个方差的比值，这两个方差分别代表了模型中参数所能解释的方差，和残差或者模型参数无法解释的方差。</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">anova(mod)</div><div class="line"></div><div class="line">Analysis of Variance Table</div><div class="line"></div><div class="line">Response: Sepal.Width</div><div class="line">             Df  Sum Sq Mean Sq <span class="literal">F</span> value    Pr(&gt;<span class="literal">F</span>)</div><div class="line">Petal.Width   <span class="number">1</span>  <span class="number">3.7945</span>  <span class="number">3.7945</span>   <span class="number">22.91</span> <span class="number">4.073e-06</span> ***</div><div class="line">Residuals   <span class="number">148</span> <span class="number">24.5124</span>  <span class="number">0.1656</span></div><div class="line">---</div><div class="line">Signif. codes:  <span class="number">0</span> ‘***’ <span class="number">0.001</span> ‘**’ <span class="number">0.01</span> ‘*’ <span class="number">0.05</span> ‘.’ <span class="number">0.1</span> ‘ ’ <span class="number">1</span></div></pre></td></tr></table></figure>
<p>ANOVA 输出结果中的 F 值与 <code>summary(mod)</code> 中输出的 F 值是一样的。F 值由 <code>Mean Sq</code> 列中的数值计算得到：$3.7945 / 0.1656 = 22.91$。可以通过 F 分布和预测变量和残差的自由度来计算当虚无假设为真时获得当前 F 值的概率。对于<strong>单个连续的预测变量</strong>，F 值等于 t 值的平方。$F = t_{\mathrm{Petal.Width}}^2$。</p>
<p>来源：<a href="http://stats.stackexchange.com/questions/5135/interpretation-of-rs-lm-output" target="_blank" rel="external">stackexchange - cross validated</a><br>
拓展阅读：<a href="http://blog.yhat.com/posts/r-lm-summary.html" target="_blank" rel="external">Fitting &amp; Interpreting Linear Models in R</a></p>
<h2 id="作用于模型对象的范型函数">作用于模型对象的范型函数</h2>
<p><code>coef/coefficients(obj, ...)</code> 返回拟合模型对象的模型系数<br>
<code>vcov(obj, ...)</code> 计算拟合模型对象的参数的方差-协方差矩阵<br>
<code>resid/residuals(obj, ...)</code> 返回模型对象的残差值<br>
<code>fitted/fitted.values(obj, ...)</code> 返回模型对象的拟合值<br>
<code>df.residual(obj, ...)</code> 返回拟合模型对象的残差自由度<br>
<code>deviance(obj, ...)</code> 返回拟合模型对象的偏差<br>
<code>extractAIC(fit, scale, k = 2, ...)</code> 对拟合参数模型对象计算 Akaike’s An Information Criterion<br>
<code>AIC(obj, ..., k = 2)</code> <code>BIC(obj, ...)</code> 计算模型拟合指标<br>
<code>logLik(obj, ...)</code><br>
<code>anova(obj, ...)</code> 对一个或多个拟合模型对象计算方差分析表<br>
<code>effects(obj, ...)</code> 返回拟合模型的（正交）效应，一般用于线性模型（<code>lm</code> <code>glm</code>）<br>
<code>drop1</code> <code>add1</code> 剔除或者增加模型参数<br>
<code>step</code> 通过 AIC 值选择模型</p>
<h2 id="分布函数">分布函数</h2>
<h3 id="f-分布函数">F 分布函数</h3>
<p><code>df(x, df1, df2, ncp, log = FALSE)</code> 密度函数<br>
<code>pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)</code> 分布函数，可用来计算 F 值的 p-value<br>
<code>qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)</code> 分位数函数<br>
<code>rf(n, df1, df2, ncp)</code> 随机数</p>
<h3 id="t-分布函数">t 分布函数</h3>
<p><code>dt(x, df, ncp, log = FALSE)</code><br>
<code>pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)</code><br>
<code>qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)</code><br>
<code>rt(n, df, ncp)</code></p>
<h3 id="参数">参数</h3>
<ul>
<li>x, q：百分位数组成的向量</li>
<li>p：概率值组成的向量</li>
<li>n：观察数目</li>
<li>df, df1, df2:自由度</li>
<li>ncp：非中心参数</li>
<li>log, log.p：逻辑值，若为 <code>TRUE</code>，概率值取对数 <code>log(p)</code></li>
<li>lower.tail：逻辑值，若为 <code>TRUE</code>，概率为 P[X &lt;= x] 否则为 P[X &gt; x]</li>
</ul>
<h2 id="数据模拟">数据模拟</h2>
<p><strong>为什么要进行模拟？</strong></p>
<blockquote>
<p>According to Mooney (1997) Monte Carlo simulations are useful to:</p>
<ul>
<li>Make inferences when weak statistical theory exists for an estimator</li>
<li>Test null hypotheses under a variety of plausible conditions</li>
<li>Assess the quality of an inference method</li>
<li>Assess the robustness of parametric inference to assumption violations</li>
<li>Compare estimator’s properties</li>
</ul>
</blockquote>
<p><strong>蒙特卡洛模拟的逻辑</strong></p>
<blockquote>
<p>Mooney (1997) presents five steps</p>
<ol>
<li>Specify the pseudo-population in symbolic terms in such a way that it can be used to generate samples. That is, writing code to generate data in a specific manner.</li>
<li>Sample from the pseudo-population in ways that reflect the topic of interest</li>
<li>Calculate $\theta$ in a pseudo-sample and store it in a vector</li>
<li>Repeat steps 2 and 3 t times where t is the number of trials</li>
<li>Construct a relative frequency distribution of resulting  values which is a Monte Carlo estimate of the sampling distribution of  under the conditions specified by the pseudo-population and the sampling procedures</li>
</ol>
</blockquote>
<p><strong>使用 R 进行模拟</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">获取文档</th>
<th style="text-align:left">分布简称</th>
<th style="text-align:left">分布</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>?Normal</code></td>
<td style="text-align:left"><code>norm</code></td>
<td style="text-align:left">标准正态分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Uniform</code></td>
<td style="text-align:left"><code>unif</code></td>
<td style="text-align:left">均匀分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Possion</code></td>
<td style="text-align:left"><code>pois</code></td>
<td style="text-align:left">泊松分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Binomial</code></td>
<td style="text-align:left"><code>binom</code></td>
<td style="text-align:left">二项分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?NegativeBinomial</code></td>
<td style="text-align:left"><code>nbinom</code></td>
<td style="text-align:left">负二项分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Geometric</code></td>
<td style="text-align:left"><code>geom</code></td>
<td style="text-align:left">几何分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?TDist</code></td>
<td style="text-align:left"><code>t</code></td>
<td style="text-align:left">学生 t 分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?FDist</code></td>
<td style="text-align:left"><code>f</code></td>
<td style="text-align:left">F 分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Chisquare</code></td>
<td style="text-align:left"><code>chisq</code></td>
<td style="text-align:left">卡方分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?Exponential</code></td>
<td style="text-align:left"><code>exp</code></td>
<td style="text-align:left">指数分布</td>
</tr>
<tr>
<td style="text-align:left"><code>Beta</code></td>
<td style="text-align:left"><code>beta</code></td>
<td style="text-align:left">beta 分布</td>
</tr>
<tr>
<td style="text-align:left"><code>?GammaDist</code></td>
<td style="text-align:left"><code>gamma</code></td>
<td style="text-align:left">gamma 分布</td>
</tr>
</tbody>
</table>
<p><code>d*</code> density function<br>
<code>p*</code> distribution function<br>
<code>q*</code> quantile function<br>
<code>r*</code> random generation function</p>
<p><strong>可重复的随机数生成</strong>：使用 <code>set.seed()</code> 命令设置随机数生成的起始点。使用同一个种子点，能够获得同一批随机数。（注意：有的时候并非如此）</p>
<p><code>sample(x, size, replace = FALSE, prob = NULL)</code></p>
<ul>
<li>
<p><code>sample(x)</code> 随机置换 x 向量</p>
</li>
<li>
<p><code>sample(x, size)</code> 从 x 向量中不放回的随机抽取 size 大小的向量</p>
</li>
<li>
<p><code>sample(x, size, replace = TRUE)</code> 放回的随机抽样</p>
</li>
<li>
<p><code>prob</code> 参数指定一个抽样的概率权重</p>
</li>
<li>
<p>从已知分布中生成随机数：<code>r*</code>前缀的分布函数</p>
</li>
<li>
<p>重复表达式：<code>replicate</code></p>
<ul>
<li><code>replicate(n, expression)</code></li>
<li><code>replicate(10, mean(rnorm(100)))</code></li>
</ul>
</li>
<li>
<p>针对参数的不同元素重复执行表达式：<code>sapply</code></p>
<ul>
<li><code>sapply(1:10, sum)</code></li>
<li><code>sapply(1:10, function(n))</code></li>
</ul>
</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="http://www.esg.montana.edu/R/rsimul.pdf" target="_blank" rel="external">http://www.esg.montana.edu/R/rsimul.pdf</a></li>
<li><a href="http://had.co.nz/stat480/lectures/15-simulation.pdf" target="_blank" rel="external">http://had.co.nz/stat480/lectures/15-simulation.pdf</a></li>
</ul>
<h2 id="rep-seq">rep &amp; seq</h2>
<p><code>rep(x, ...)</code> 复制 <code>x</code> 中的元素</p>
<ul>
<li><code>rep(x)</code> 返回 <code>x</code> 自身，等同于 <code>rep(x, times = 1, length.out = NA, each = 1)</code></li>
<li><code>rep(x, times)</code>
<ul>
<li>如果 <code>times</code> 为正整数，将 <code>x</code> 整体复制 <code>n</code> 次。</li>
<li>如果 <code>times</code> 为与<code>x</code>等长的向量，那么对<code>x</code>的元素复制在<code>times</code>中对应的次数。</li>
</ul>
</li>
<li><code>rep(x, each = n)</code> 对 <code>x</code> 中的每个元素复制 <code>n</code> 次。
<ul>
<li><code>each</code> 只能传入长度为1的向量，当传入的向量长度大于1，取向量的第一个元素当作实参。</li>
</ul>
</li>
<li><code>rep(x, length.out = n)</code> 根据 <code>x</code> 返回长度为 <code>n</code> 的对象。
<ul>
<li>如果 <code>n &lt; length(x)</code> 那么丢弃 <code>n</code> 之外的元素。</li>
<li>如果 <code>n &gt; length(x)</code> 那么复制 <code>x</code> 直到输出对象的长度为 <code>n</code> 为止。</li>
<li>当 <code>length.out</code> 与 <code>each</code> 或者 <code>times</code> 同时使用，最后输出的对象的长度受制于 <code>length.out</code>。</li>
</ul>
</li>
<li><code>rep.int</code> <code>rep_len</code> 的计算效率比 <code>rep</code> 更高。</li>
</ul>
<p><code>seq(...)</code> 生成数列</p>
<ul>
<li>默认用法 <code>seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...)</code></li>
<li><code>from</code> <code>to</code> 数列的起始和终点值。</li>
<li><code>by</code> 数值，数列的增量或间隔</li>
<li><code>length.out</code> 数列长度</li>
<li><code>along.with</code> 与传入对象同等长度的数列</li>
<li><code>seq.int</code> <code>seq_along</code> <code>seq_len</code> 的计算效率比 <code>seq</code> 更高。</li>
</ul>
<p>常见用法：</p>
<ul>
<li><code>seq(from, to)</code> 此时增量默认为1</li>
<li><code>seq(from, to, by = )</code> 人为指定了增量</li>
<li><code>seq(from, to, length.out = )</code> 指定了数列长度</li>
<li><code>seq(along.with)</code> 指定了某个对象，此时 <code>from = 1</code> <code>to = length(along.with)</code> <code>by = 1</code></li>
<li><code>seq(from)</code> 此时 <code>from = 1</code> <code>to = from</code> <code>by = 1</code></li>
<li><code>seq(length.out = )</code> 此时 <code>from = 1</code> <code>to = length.out</code> <code>by = 1</code></li>
</ul>
<p><code>:</code> 也可以生成数列，用法为 <code>from:to</code>；<code>:</code> 还有另外一个用法，表示交互作用 <code>a:b</code> 等同于 <code>interaction(a, b)</code>。</p>
<h2 id="sort-order">sort &amp; order</h2>
<p><code>sort(x, decreasing = FALSE, na.last = NA, ...)</code> 将一个向量或因子增序或者降序排列。对于数据框，使用 <code>order</code> 来排序。</p>
<ul>
<li><code>decreasing</code> 是否为降序</li>
<li><code>na.last</code> 若为 <code>TRUE</code> 缺失值被排到最后；若为 <code>FALSE</code> 排到最前；若为 <code>NA</code> 剔除缺失值。</li>
<li><code>method</code> 算法名，包括 <code>&quot;shell&quot;</code> <code>&quot;quick&quot;</code> <code>&quot;radix&quot;</code></li>
<li><code>index.return</code> 是否返回索引</li>
</ul>
<p>查看 <code>sort.default</code> 的源代码：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> (x, decreasing = <span class="literal">FALSE</span>, na.last = <span class="literal">NA</span>, <span class="keyword">...</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (is.object(x))</div><div class="line">    x[order(x, na.last = na.last, decreasing = decreasing)]</div><div class="line">    <span class="keyword">else</span> sort.int(x, na.last = na.last, decreasing = decreasing, <span class="keyword">...</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>order(..., na.last = TRUE, decreasing = FALSE, method = c(&quot;shell&quot;, &quot;radix&quot;))</code> 返回第一个参数对象的元素对应的排列顺序的索引。</p>
<ul>
<li>实际上，<code>sort</code> 调用了 <code>order</code> 来对向量进行排序。<code>sort(x)</code> 等同于 <code>x[order(x)]</code>。</li>
</ul>
<h1>Statistics</h1>
<p><strong>标准差是否有好坏之分？</strong></p>
<ul>
<li>标准差并无好坏之分，有的时候需要较大的标准差，有时候需要较少的标准差，应该关注统计检验的目的，样本特征。</li>
</ul>
<h1>MySQL 索引</h1>
<p>索引有何用？</p>
<ul>
<li>加速数据库数据读取</li>
<li>强制约束（唯一索引 UNIQUE，外键 FOREIGN KEY）</li>
<li>提高查询效率：没有任何索引的情况下查询页能正常运行，但可能需很长时间</li>
</ul>
<p>索引类型：</p>
<ul>
<li>BTREE 索引：MySQL 中主要的索引类型</li>
<li>RTREE 索引：只有 MyISAM 支持，用于 GIS</li>
<li>HASH 索引：MEMORY, NDB 支持</li>
<li>BITMAP 索引：MySQL 不支持</li>
<li>FULLTEXT 索引：MyISAM, Innodb（MySQL 5.6 以上支持）</li>
</ul>
<p>BTREE 索引适用的操作：</p>
<ul>
<li>点查询：查询所有 KEY = 5 的记录</li>
<li>开合间查询：查询所有 KEY &gt; 5 的记录</li>
<li>闭合间查询：查询所有 5 &lt; KEY &lt; 10 的记录</li>
</ul>
<p>字符索引<br>
联合索引</p>
<p>索引的开销</p>
<ul>
<li>不要添加多余的索引：多数情况下，扩展索引比添加一个新的索引要好</li>
<li>写：主要为更新索引</li>
<li>读：需要占用硬盘和内存空间</li>
</ul>
<p>越长的索引越慢</p>
<p>MySQL 中常见索引</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES <span class="keyword">WHERE</span></div><div class="line">LAST_NAME = <span class="string">"Smith"</span></div></pre></td></tr></table></figure>
<p>KEY(LAST_NAME)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMPLOYEES <span class="keyword">WHERE</span></div><div class="line">LAST_NAME=<span class="string">"Smith"</span> <span class="keyword">AND</span> DEPT=<span class="string">"Accounting"</span></div></pre></td></tr></table></figure>
<p>复合索引 KEY(DEPT, LAST_NAME)</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000007494097" target="_blank" rel="external">MYSQL索引最佳实践</a><a href="https://www.percona.com/files/presentations/WEBINAR-MySQL-Indexing-Best-Practices.pdf" target="_blank" rel="external">原文</a></li>
</ul>
<h1>Shell</h1>
<p>三个命令：<code>repeat</code> <code>watch</code> <code>sleep</code></p>
<p><code>repeat 5 echo &quot;Repeat the line 5 times.&quot;</code> 重复执行5次<br>
<code>watch -n 1 echo &quot;Repeat the line every second, forever.&quot;</code> 每隔1秒执行重复执行</p>
<p>MacOS 下默认未安装 <code>watch</code> 可从 Mac Ports 或者 Homebrew 获取 <code>brew install watch</code></p>
<p>通过 <code>while</code> 和 <code>sleep</code> 也可以实现按固定周期重复命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">while true</div><div class="line">do</div><div class="line">    echo &quot;Repeat me every one second.&quot;</div><div class="line">    sleep 1</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">while sleep 1; do echo &quot;Repeat me every one second.&quot;; done</div></pre></td></tr></table></figure>
<p>来源：<a href="http://unix.stackexchange.com/questions/10646/repeat-a-unix-command-every-x-seconds-forever" target="_blank" rel="external">stackexchange - Unix &amp; Linux</a></p>
<p><code>fdisk -l</code> 查看硬盘分区<br>
<code>mount -t ntfs /dev/sda1 /mnt/</code> 挂载 ntfs 分区 sda1 至 mnt 下</p>
<h1>Emacs lisp</h1>
<h2 id="添加镜像">添加镜像</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(add-to-list</div><div class="line">    &apos;package-archives &apos;(&quot;melpa&quot; . &quot;https://elpa.zilongshanren.com/melpa/&quot;))</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(setq package-archives &apos;((&quot;gnu&quot; . &quot;http://elpa.zilongshanren.com/gnu/&quot;)</div><div class="line">                         (&quot;melpa&quot; . &quot;http://elpa.zilongshanren.com/melpa/&quot;))</div></pre></td></tr></table></figure>
<h2 id="list-循环添加镜像">list 循环添加镜像</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(dolist (i &apos;((&quot;melpa-cn&quot; . &quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/&quot;)</div><div class="line">             (&quot;org-cn&quot;   . &quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/org/&quot;)</div><div class="line">             (&quot;gnu-cn&quot;   . &quot;http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/&quot;)))</div><div class="line">  (add-to-list &apos;package-archives i))</div></pre></td></tr></table></figure>
<p>来源：<a href="https://emacs-china.org/t/emacs-china-archive/1656/1" target="_blank" rel="external">Emacs-china</a></p>
<h1>没来得及看</h1>
<ul>
<li><a href="https://github.com/liuchengxu/git-commit-emoji-cn" target="_blank" rel="external">git commit emoji 使用指南</a></li>
<li><a href="https://www.h5jun.com/post/gitmoji.html" target="_blank" rel="external">程序员提交代码的 emoji 指南</a></li>
<li><a href="https://forum.freecodecamp.com/t/testing-your-own-code-using-mocha-and-chai-simple-example/44149/1" target="_blank" rel="external">FreeCodeCamp: Mocha 和 Chai 测试入门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      CSS 内容了解了 grid 布局。JS 内容为几个 stackoverflow 的热门问答的内容，包括脚本文件导入，JS 数组操作。R 语言阅读了解释 lm 模型输出结果的问题和资料；另外顺便了解了下 F 和 t 分布函数。熟悉了下数据模拟，rep 和 seq，sort 和 order 函数。看了一篇关于 MySQL 索引的译文。最后记录了遇到的一个 emacs 的问题。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="Shell" scheme="http://lix90.github.io/tags/Shell/"/>
    
      <category term="grid layout" scheme="http://lix90.github.io/tags/grid-layout/"/>
    
      <category term="Linear regression" scheme="http://lix90.github.io/tags/Linear-regression/"/>
    
      <category term="Monte Carlo" scheme="http://lix90.github.io/tags/Monte-Carlo/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-22</title>
    <link href="http://lix90.github.io/2016/11/22/2016-11-22-daily/"/>
    <id>http://lix90.github.io/2016/11/22/2016-11-22-daily/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2016-11-29T02:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript：函数</h1>
<h2 id="函数声明与函数表达式">函数声明与函数表达式</h2>
<p><strong>函数是对象，函数名是指针。</strong><br>
使用不带圆括号的函数名是访问函数指针，而非调用函数。<br>
函数表达式最后有分号 <code>;</code>。<br>
Firefox, Opera, Chrome, Safari 通过 <code>name</code> 属性，访问函数名 <code>function.name</code>。</p>
<p><strong>函数声明提升</strong>：在执行代码前会先读取函数声明。也就是说，可以把函数声明放在调用它的语句之后。<br>
而对于<strong>函数表达式</strong>，必须等到解析器执行到它所在的代码行，才会真正被解释执行。</p>
<p>每个函数继承的 <code>toLocaleString()</code> 和 <code>toString()</code> 方法始终都返回函数的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">5</span>)&#125;</div><div class="line">func.toString()</div><div class="line"><span class="string">'function () &#123;console.log(5)&#125;'</span></div><div class="line">func.toLocaleString()</div><div class="line"><span class="string">'function () &#123;console.log(5)&#125;'</span></div></pre></td></tr></table></figure>
<p><strong>匿名函数</strong>：<code>function</code> 关键字后面没有标识符。匿名函数的 <code>name</code> 属性为空字符串。<br>
<strong>函数名本身就是变量</strong>，所以函数也可以作为值来使用。函数既可作为参数传递给另一个函数，又可以将一个函数作为结果返回。<br>
<strong>两个特殊对象</strong>：arguments 和 this。</p>
<h2 id="apply-call">apply &amp; call</h2>
<p>可在特定的作用域中调用函数，等同于设置函数体内 this 对象的值。</p>
<ul>
<li><code>apply()</code> 方法接受两个参数：一个是在其中运行函数的作用域，另一个是<strong>参数数组</strong>。第二个参数可以为 Array 实例，也可以为 arguments 对象。</li>
<li><code>call()</code> 与 apply 方法的作用相同，区别在于<strong>接受参数的方式不同</strong>。使用 call 时，传递给函数的参数必须<strong>逐个列举</strong>出来。</li>
</ul>
<blockquote>
<p>传递函数并非 apply 和 call 真正的用武之地；他们真正强大的地方是能够<strong>扩充函数赖以运行的作用域</strong>。使用 call 和 apply 来扩充作用域的最大好处，就是<strong>对象不需要与方法有任何耦合关系</strong>。</p>
</blockquote>
<p>ECMAScript 5 定义了一个新方法：<code>bind()</code>。该方法会创建一个函数的实例，其 this 值会被绑定到传给 bind 函数的值。</p>
<h2 id="递归">递归</h2>
<p><strong>递归函数</strong>：一个函数通过名字调用自身。<code>arguments.callee</code> 是一个指向正在执行的函数的指针，可以用它来实现对函数的递归调用。在编写递归函数时，使用 <code>arguments.callee</code> 总比使用函数名更保险。但在严格模式下，不能通过脚本访问 <code>arguments.callee</code>，访问这个属性会导致错误。此时可以通过命名函数表达式来实现对当前执行的函数的引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123; <span class="comment">// 命名函数表达式</span></div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> num * f(num<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="闭包">闭包</h2>
<p>匿名函数 vs 闭包</p>
<p><strong>闭包</strong>：有权访问<strong>另一个函数作用域</strong>中的<strong>变量</strong>的函数。在一个函数内部创建另一个函数，即可创建闭包。<br>
理解闭包需要先理解作用域链。作用域链本质上是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。</p>
<p>一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域。但是<strong>闭包函数在执行完毕后仍然携带包含它的函数的作用域</strong>，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，所以<strong>只在绝对必要时考虑使用闭包</strong>。</p>
<p>作用域链的这种配置机制引出了一个值得注意的副作用，即<strong>闭包只能取得包含函数中任何变量的最后一个值</strong>。</p>
<h3 id="this-对象">this 对象</h3>
<p><code>this</code> 对象是在运行时基于函数的执行环境绑定的：在全局函数中，<code>this</code> 等于 window，而当函数被作为某个对象的方法调用时，<code>this</code> 等于那个对象。匿名函数的执行环境具有全局性，因此其 <code>this</code> 对象通常指向 <code>window</code>。</p>
<p>每个函数在被调用时都会自动取得两个特殊变量：<code>this</code> 和 <code>arguments</code>。内部函数在搜索这两个变量时，只会搜索到其活动对象为止。因此永远不可能直接访问外部函数中的这两个变量。不过，把外部作用域中的 <code>this</code> 对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。如果想访问作用域中的 <code>arguments</code> 对象，必须将对该对象的引用保存到另一个闭包能够访问的变量中。</p>
<p><strong>即使是细微的变化，都有可能意外改变 <code>this</code> 的值。</strong></p>
<h3 id="内存泄漏">内存泄漏</h3>
<p>闭包在 IE9 之前的版本中会导致一些特殊的问题。如果闭包的作用域链中保存着一个 HTML 元素，那么意味着该元素将无法被销毁。 &gt;&gt;&gt; 内存泄漏</p>
<h2 id="模仿块级作用域">模仿块级作用域</h2>
<p>JS 没有块级作用域的概念。JS 从不会告诉你是否多次声明了同一个变量，它只会读后续的声明视而不见（但是它会执行后续声明中的变量初始化）。<strong>匿名函数</strong>可以用来模仿块级作用域并避免这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 这里是块级作用域</span></div><div class="line">&#125;)();</div><div class="line"><span class="comment">// 这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数执行完毕，就可以立即销毁其作用域链了。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 这里是块级作用域</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突。</p>
<h2 id="私有变量">私有变量</h2>
<p>严格来讲，JS 中没有私有成员的概念；所有对象属性都是公有的。</p>
<p>私有变量</p>
<ul>
<li>函数中定义的变量，可以认为是私有变量，因为在函数外部无法访问这些变量。</li>
<li>私有变量包括
<ul>
<li>函数的参数</li>
<li>局部变量</li>
<li>在函数内部定义的其他函数</li>
</ul>
</li>
</ul>
<p>可以通过闭包来创建用于访问私有变量的公有方法。</p>
<p><strong>特权方法（previleged method）</strong>：有权访问私有变量和私有函数的公有方法。</p>
<ol>
<li>在构造函数中定义特权方法。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 私有变量和私有函数</span></div><div class="line">    <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//特权方法</span></div><div class="line">    <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        privateVariable++;</div><div class="line">        <span class="keyword">return</span> privateFunction();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol start="2">
<li>在私有作用域中定义私有变量或函数创建特权方法。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 私有变量和私有函数</span></div><div class="line">    <span class="keyword">var</span> privateVariable = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 构造函数</span></div><div class="line">    MyObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 公有/特权方法</span></div><div class="line">    MyObject.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        privateVariable++;</div><div class="line">        <span class="keyword">return</span> privateFunction();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>注意：在初始化未经声明的变量，总是会创建一个全局变量。但是，在严格模式下给未经声明的变量赋值会导致错误。</p>
<p>这个模式与在构造函数中定义特权方法的主要区别，在于**私有变量和函数是由实例共享的。**由于特权方法是在原型上定义的，因此所有实例都使用同一个函数。而这个特权方法，作为一个闭包，总是保存着对包含作用域的引用。</p>
<p>以这种方式创建静态私有变量会因为使用原型而增进代码复用，但<strong>每个实例都没有自己的私有变量</strong>。</p>
<ol start="3">
<li>模块模式</li>
</ol>
<p>单例指只有一个实例的对象。模块模式是为单例创建私有变量和特权方法。模块模式通过为单例添加私有变量和特权方法能够使其得到增强。这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是非常有用的。如果必须创建一个对象并以某些数据对其进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么就可以使用模块模式。</p>
<ol start="4">
<li>增强的模块模式</li>
</ol>
<p><strong>增强的模块模式</strong>：在返回对象之前加入对其增强的代码，这种模式适合那些单例必须是某些类型的实例，同时还必须添加某些属性和（或）方法对其加以增强的情况。</p>
<p>来源：《JavaScript 高级程序设计 第三版》</p>
<hr>
<h1>JavaScript: 编写可维护的 JS 代码</h1>
<p>如何把一个意大利面式的代码仓库整理成一个整洁、有组织并易扩展的项目代码？</p>
<ol>
<li>分析项目：把自己当成用户去审视项目</li>
</ol>
<ul>
<li>使用网站所有功能，打开开发者工具，看是否有报错或输出日志。</li>
<li>Node.js 项目：打开名两行接口检查 api。最好的情况是项目有一个入口，通过入口能将所有模块初始化；最坏的情况也得找到每个业务逻辑的位置。</li>
<li>找出使用的工具，阅读工具的文档，寻找最佳实践。</li>
</ul>
<ol start="2">
<li>深入了解项目</li>
</ol>
<ul>
<li>单元测试：测试代码的功能和方法是否按预期调用的一种方法。通过单元测试深入了解代码。</li>
</ul>
<ol start="3">
<li>创建一个规范</li>
</ol>
<ul>
<li>建议添加一个 .editorconfig 文件来保证代码在不同的编辑器、IDE 或不同开发者之间的编写风格一致。</li>
</ul>
<ol start="4">
<li>代码缩进</li>
<li>命名规则</li>
<li>尽可能使用 lint：ESlint, JSlint, JSHint。</li>
<li>更新依赖：更新依赖需谨慎，升级依赖没有通用的处理规则。
<ul>
<li><code>npm outdated</code> 可以检查哪些依赖版本比较旧</li>
</ul>
</li>
</ol>
<p><strong>常见单元测试框架</strong>：karma，jasmine，macha，ava。<br>
如果测试用户界面，可以使用 Nightwatch.js 和 Dalekjs 这类<strong>浏览器自动测试工具</strong>。</p>
<p><strong>单元测试与浏览器自动化测试的区别</strong>：前者测试 JS 本身代码，保证所有的模块和通用逻辑能预期运行；后者测试项目的用户界面，保证页面上的元素在预期正确的位置。</p>
<p><strong>在重构之前先建立好单元测试。</strong></p>
<p><strong>架构</strong></p>
<ul>
<li>知道项目中使用到了何种设计模式。了解该模式，并保证它在整个项目中是一致的。在项目中可以使用不同的设计模式达到不同的目的，但是<strong>绝对不要在一个模块中使用几种不同的设计模式</strong>。</li>
<li>如果项目中没有用到什么架构，尽早作出改变。最基本的架构层级结构分为：
<ul>
<li>第三方内容</li>
<li>模块内容</li>
<li>数据</li>
<li>初始化所有模块</li>
<li>逻辑入口</li>
</ul>
</li>
</ul>
<p><strong>模块化</strong></p>
<ul>
<li>把功能划分成小的模块。</li>
<li>每个模块对应一个明确的目标功能。</li>
<li>应该无法通过一个模块知道外面代码逻辑。</li>
<li>模块能在不同的场景下复用。</li>
</ul>
<p><strong>写注释</strong></p>
<ul>
<li>可用 <a href="http://usejsdoc.org/" target="_blank" rel="external">JSDoc</a> 来管理文档。</li>
</ul>
<p><strong>构建有组织的提交工作流程</strong></p>
<ul>
<li>在新分支上重构，不要在主干上直接修改</li>
</ul>
<p>来源：</p>
<ul>
<li><a href="http://web.jobbole.com/88909/" target="_blank" rel="external">伯乐在线：编写可维护的 JS 代码</a></li>
</ul>
<h2 id="个人总结">个人总结</h2>
<ul>
<li>了解和分析项目</li>
<li>建立代码规范</li>
<li>注释和管理文档</li>
<li>管理依赖</li>
<li>重构前进行单元测试</li>
<li>了解设计模式</li>
<li>模块化</li>
<li>良好的版本控制流程习惯</li>
</ul>
<h1>阅读</h1>
<h2 id="chrome-dev-summit-2016">Chrome Dev Summit 2016</h2>
<p>Progressive Web Apps (PWA)，能够提供类似 Native app 一样体验的 Web app。主要有几个特点：</p>
<ul>
<li>可添加至桌面（可安装）</li>
<li>离线能力</li>
<li>消息推送</li>
<li>安全</li>
<li>响应式</li>
</ul>
<p>Darin Fisher（选择我感兴趣的点）</p>
<ul>
<li>移动端的挑战：分辨率，cpu，内存，电池，网络</li>
<li>印度 2.3 亿，美国 4.6 亿，中国 7.6 亿的网民</li>
<li><strong>超过 3 秒的网页，53% 的用户选择离开</strong></li>
<li>在 3G 环境下，要确保页面 5 秒内加载完成</li>
<li>“添加到主屏幕”这个功能提高了用户 4 倍的浏览频率</li>
<li>Lighthouse 是个测试 PWA 的工具</li>
<li><a href="https://browser-issue-tracker-search.appspot.com/" target="_blank" rel="external">browser-issue-tracker-search</a> 为开发者提供的网站，包括bug，w3c 标准，API 建议等</li>
</ul>
<p>Alex</p>
<ul>
<li>手机网页打开的平均时间在 19s</li>
<li>Motion Mark 测试，PC 要比手机端快 25 倍</li>
<li><strong>使用真机 Debug</strong></li>
<li><strong>重视低端设备</strong></li>
<li>硬件限制以至于手机不能比 PC 块</li>
<li><a href="https://hpbn.co/" target="_blank" rel="external">High Performance Browser Networking</a></li>
<li>少加载 code，在合适的时间执行合适的代码</li>
<li>Service Worker 不仅仅是离线，更重要的是提升效率</li>
</ul>
<p>Paul - 关于 Web 未来发展方向</p>
<ul>
<li><strong>Web 一定会赶超 Native APIs</strong></li>
<li>手机游戏会与 Native 平起平坐，并带来更高的利润</li>
<li>现有 API：定位（Geolocation），相机（Camera），麦克风（Microphone），电池（Battery），权限（Permissions），网络状况（Network），自动填充（Autofill），用户授权（Credential Management API），支付（PaymentRequest API），消息推送（Push notifications），离线（Offline），可安装（Installability）</li>
<li>SLICE（Secure，Linkable，Indexable，Composable，Ephemeral）</li>
<li><a href="https://infrequently.org/2015/08/doing-science-on-the-web/" target="_blank" rel="external">Doing Science On The Web</a></li>
<li><strong>新的交互方式</strong>：Physical Web. Web Bluetooth. WebUSB. WebVR.</li>
</ul>
<p>来源：<a href="http://www.75team.com/post/cds.html" target="_blank" rel="external">奇舞团博客</a></p>
]]></content>
    
    <summary type="html">
    
      JS 包括函数的学习笔记；阅读了一篇关于“编写可维护的 JS 代码”的文章。最后看了篇 chrome 开发者大会的文章。
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="项目管理" scheme="http://lix90.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="单元测试" scheme="http://lix90.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Conf" scheme="http://lix90.github.io/tags/Conf/"/>
    
      <category term="Chrome" scheme="http://lix90.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>关于 EEGLAB 分析 EGI 数据</title>
    <link href="http://lix90.github.io/2016/11/21/2016-11-21-eeg-egi/"/>
    <id>http://lix90.github.io/2016/11/21/2016-11-21-eeg-egi/</id>
    <published>2016-11-20T16:00:00.000Z</published>
    <updated>2016-11-28T12:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>EEGLAB 作为通用型脑电数据分析的工具包，理论上适用于所有脑电设备记录的数据。问题在于，如果 EEGLAB 未提供原生的 EGI (Electrical Geodesics Incorporated) 数据格式的导入，那么如何转换格式导入数据。另外就是获取并导入匹配的电极位置文件。除了原始数据的导入和电极位置文件的加载，后续分析同其他格式数据一致。</p>
<h1>数据导入</h1>
<p>原生的2009版的 EGI 文件与 EEGLAB 并不兼容，需要转换为 Netstation 二进制文件（Netstation binary simple）。对于新版本的 EGI 文件的读取，有两种解决方案。</p>
<ul>
<li>第一种为使用 EEGLAB 插件；</li>
<li>第二种为使用 File-IO。</li>
</ul>
<p>EGI 文件也可以转换为 EDF 文件后导入 EEGLAB，但是这会导致“事件”（mark）的损坏或丢失。所以应该选择转换为 Netstation 二进制文件。</p>
<p><code>pop_readegi</code> 函数可用于读取 EGI 版本2和版本3的数据文件。EGI 格式文件的事件存储在专门的 EGI 数据通道。该通道的信息将被自动地导入到 EEGLAB 的事件表中，然后被 EEGLAB 从数据中剔除。如果导入事件通道失败，可以手动提取事件信息（<code>File &gt; Import event info &gt; From data channel</code>）。</p>
<p>当前新版原生的 Netstation 文件无法直接导入到 EEGLAB/Matlab 中。可以通过 Netstation software 将数据转换为 Netstation 二进制文件。虽然 Netstation 也可以导出为 EDF 文件，但是储存事件信息的通道丢失了。</p>
<p>如果单个被试的文件没分为多个数据段，可以在 EEGLAB 中一同导入 <code>File &gt; Import data &gt; From multiple seg. Nestation files</code>。</p>
<p>Nestation 也可以把数据导出为 Matlab 文件，然后再通过 EEGLAB 导入 Matlab 文件 <code>File &gt; Import data &gt; From Netstation epoch Matlab files</code>。这种方法仍然会丢失许多信息。</p>
<p><strong>总结：先将数据从 Netstation 中导出为二进制文件，然后通过 EEGLAB 导入。</strong></p>
<h1>电极位置文件</h1>
<p>电极位置文件可以从 <a href="ftp://ftp.egi.com/pub/support/3rdPartySoftwareSupport/BESA/" target="_blank" rel="external">EGI ftp site</a> 获取。另外，EEGLAB 自带了一些电极位置文件，位于 EEGLAB 根目录下的 <code>sample_locs</code> 文件夹下的 <code>GSM*.sfp</code> 文件。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://sccn.ucsd.edu/wiki/A01:_Importing_Continuous_and_Epoched_Data#Importing_Netstation.2FEGI_files" target="_blank" rel="external">Importing Continuous and Epoched Data: Importing Netstation/EGI files</a></li>
<li><a href="https://sccn.ucsd.edu/wiki/Channel_Location_Files" target="_blank" rel="external">Channel Location Files</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      最近需要指导一位访问学习的博士师兄分析脑电数据，涉及到 EGI 设备的数据格式，记录下通过 EEGLAB 如何导入 EGI 记录的脑电数据。
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="EEG" scheme="http://lix90.github.io/categories/Original/EEG/"/>
    
    
      <category term="EEG" scheme="http://lix90.github.io/tags/EEG/"/>
    
      <category term="EGI" scheme="http://lix90.github.io/tags/EGI/"/>
    
      <category term="EEGLAB" scheme="http://lix90.github.io/tags/EEGLAB/"/>
    
  </entry>
  
  <entry>
    <title>西服保养建议</title>
    <link href="http://lix90.github.io/2016/11/21/2016-11-21-clean-suit/"/>
    <id>http://lix90.github.io/2016/11/21/2016-11-21-clean-suit/</id>
    <published>2016-11-20T16:00:00.000Z</published>
    <updated>2016-11-28T12:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>声明：内容整理自：</p>
<ul>
<li><a href="https://www.zhihu.com/question/23243060" target="_blank" rel="external">知乎：西装在平时应该如何保养？应该如何清洗？普先生、赵远方等人回答</a></li>
<li><a href="http://www.merino.com/cn/wool/care-instructions/cleaning-a-wool-suit/" target="_blank" rel="external">Merino：羊毛西装的清洁</a></li>
</ul>
<h1>清洗</h1>
<ul>
<li><strong>干洗</strong>。只在必要时才选择干洗。找专门而可靠的干洗店，减少染毛和毛料被烫坏的可能。</li>
<li><strong>按需干洗，一年一次</strong>。一般西服最高耐用年限为 4-5年，顶尖品牌的西服也只能保证干洗6次以内不起泡。一套西装每年最多干洗三次。</li>
<li><strong>及时清除污渍</strong>。小范围污渍使用局部清洗法。在产生污渍的最短时间内用蘸水或少许清洁剂的布轻轻擦拭，不能太用力，否则污渍会嵌入到面料中。干洗时，要告知干洗店污渍残留的位置，以免疏忽造成污渍的永久残留。</li>
<li><strong>使用专门的西服刷清洁尘污</strong>。西服刷尽量选择由真正动物毛发制成的刷子。尘污会使西服失去新鲜感。当西服沾上其他纤维或较不容易去除的尘污，可以用胶带吸附。</li>
</ul>
<h1>穿着频率</h1>
<p><strong>避免疲劳穿着，一套西服不要连续穿两天以上</strong>。西服在穿过后，会因局部张力而变形，需适当“休息”，故应准备两、三套换穿。一套西服可配两条西裤替换。</p>
<h1>悬挂</h1>
<ul>
<li>使用专用的木衣架（宽柄圆弧形，与肩同宽）悬挂西服，换季时储存在袋子或箱子中防潮防尘。避免使用过窄衣架，以免破坏肩型。</li>
<li>裤子的吊挂可用衣裤联合衣架，也可用带夹子的西裤专用衣架，夹住裤脚自然倒挂，有助于长期保持裤线及裤型。<br>
<img src="/img/care-suit/hang-suit.jpg" alt="悬挂西裤方法"></li>
</ul>
<h1>折叠</h1>
<p><img src="/img/care-suit/fold-suit-1.jpg" alt="折叠西服方法一"><br>
<img src="/img/care-suit/fold-suit-2.jpg" alt="折叠西服方法二"></p>
<h1>熨烫</h1>
<ul>
<li><strong>切勿直接熨烫，使用蒸汽熏烫法</strong>。调好温度，选择蒸汽档轻轻熏烫（高品质蒸汽清洁器价格不菲）。用蒸汽熨斗对准西装喷射足够两的蒸汽。</li>
<li><strong>重点关照活动多的部位</strong>。如胳膊肘、膝盖、袖子、腰部等部位。褶皱严重的地方用蒸汽让面料吸足水后，轻轻拉平有褶皱的地方。朝四周均衡拉平，而不应该只朝一个方向拉。</li>
<li><strong>盖一层薄棉布熨烫西裤裤线</strong>。盖上薄棉布后，慢慢移动熨斗。熨完之后不应立即撤掉棉布，等降温后再撤走。<br>
<img src="/img/care-suit/press-suit.jpg" alt="熨烫西服建议"></li>
</ul>
<h1>防潮</h1>
<ul>
<li>收藏存放前要晾干。</li>
<li>收藏存放期间适度进行通风和晾晒。</li>
<li>选择通风干燥处的合适地点或位置收藏存放。</li>
<li>在湿度较大的收藏间存放时可使用防潮剂。用干净的白沙布定制成小袋，装入块状的氯化钙封口，并放置在衣柜，切勿将防潮袋与服装接触。另外，需要经常检查防潮袋是否仍有效。</li>
<li>使用防潮袋（布料为佳）悬挂西服。</li>
</ul>
<h1>防虫</h1>
<ul>
<li>使用樟脑丸时用白纸或浅色纱布包好，散放在箱柜四周，或装入小布袋中悬挂在衣柜内。</li>
<li>在使用防蛀剂时要注意它的用量。仅在存放服装的箱柜中能嗅到樟脑丸的气味为宜。</li>
</ul>
<h1>去亮光</h1>
<p>久穿的西装（尤其是光面面料），在肘部和膝部易产生亮光。准备半盆清水，并往水中滴上几滴醋，把毛巾蘸湿后，用毛巾按一个方向檫几下，便可除去亮光。</p>
<h1>其他</h1>
<ul>
<li>仔细阅读西服上的护理标签，清楚标签的含义和指示。</li>
<li>减少衣物堆积。避免西服出现皱褶和混色。</li>
<li>坐在桌旁工作时，建议脱掉西服，以免袖口及肘部跟桌子长时间摩擦变得光亮。</li>
<li>西服外兜不要拆线，以免变形不服帖，钱包和手机等可放到西服内兜。</li>
<li>久穿的毛料西服，在相对湿度 35% - 40% 环境（如洗完澡后的浴室）中放置一晚，可除去衣服细小皱纹。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      为了后面的求职面试，花“重金”买了套休闲西服。对于还未有正式收入的未毕业学生来说，略微昂贵。于是网上找了些与西服保养有关的资料，整理在此，方便以后温习。事事不能想当然，生活技能也需要学习。
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="Life style" scheme="http://lix90.github.io/tags/Life-style/"/>
    
      <category term="西服保养" scheme="http://lix90.github.io/tags/%E8%A5%BF%E6%9C%8D%E4%BF%9D%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>数据库面试题解答</title>
    <link href="http://lix90.github.io/2016/11/19/2016-11-19-sql-interview/"/>
    <id>http://lix90.github.io/2016/11/19/2016-11-19-sql-interview/</id>
    <published>2016-11-18T16:00:00.000Z</published>
    <updated>2016-11-28T12:42:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容来源：<a href="https://zhuanlan.zhihu.com/p/23713529" target="_blank" rel="external">知乎专栏-学习编程：常见面试题整理–数据库篇</a></p>
<h1>存储过程</h1>
<p>什么是存储过程？优缺点？</p>
<p>存储过程：一个预编译的代码块（T-SQL），实现一系列功能（对表单或多表增删改查），然后方便调用。<br>
优点：执行效率较高；降低网络通信量，提高通信效率；一定程度上确保数据安全。</p>
<p>我的问题：如何编写存储过程代码？</p>
<h1>索引</h1>
<p>什么是索引？作用？优缺点？使用索引查询一定能提高查询的性能吗？</p>
<p>索引：对数据库表中一或多个列的值进行<strong>排序</strong>的结构，能够<strong>加快数据检索</strong>，允许数据库程序迅速找到表中数据，而不必扫描整个数据库。<br>
MySQL中几个基本的索引：普通索引、唯一索引、主键索引、全文索引。<br>
优缺点：</p>
<ul>
<li>加快数据检索速度</li>
<li>降低增删改等维护任务的速度</li>
<li>唯一索引可以确保每一行数据的唯一性</li>
<li>可以在查询过程中使用优化隐藏器，提高系统性能</li>
<li>占物理和数据空间（缺点）</li>
</ul>
<p>然而，在使用索引查询数据时，需要注意到它的代价。<strong>索引需要存储空间，也需要定期维护</strong>，当表中记录被增减，或者索引列被修改时，索引本身也会被修改，将会因此多付出4，5次磁盘I/O。有时候，<strong>不必要的索引反而会时查询反应时间变慢</strong>，所使用索引并不一定提高查询性能。</p>
<p>索引查询适合两种情况：</p>
<ul>
<li><strong>基于一定范围的检索</strong>，一般查询返回结果集小于表中记录数的30%；</li>
<li><strong>基于非唯一性索引的检索</strong>。</li>
</ul>
<p>我的问题：如何创建索引？</p>
<h1>事务</h1>
<p>事务（Transaction）：并发控制的基本单位。它是一个操作序列，要么执行，要么都不执行，是一个不可分割的工作单位。事务是数据库维护数据一致性的单位，在每个事务结束时，保持数据一致性。</p>
<h1>并发控制</h1>
<p>乐观锁与悲观锁</p>
<p><strong>并发控制</strong>确保多个事务在同时存取数据库中同一数据时，不破坏事务的隔离性和统一性，以及数据库的统一性。乐观锁和悲观锁为并发控制的主要技术手段。</p>
<ul>
<li>悲观锁为悲观并发控制，它假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作；</li>
<li>乐观锁为乐观并发控制，它假定不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</li>
</ul>
<h1>删除操作</h1>
<p>drop, delete, truncate 的区别？分别在什么场景下使用？</p>
<ul>
<li>三者均为删除操作；</li>
<li>delete 和 truncate 只删除表的数据不删除表的结构</li>
<li>速度：drop &gt; truncate &gt; delete</li>
<li>delete 语句是 dml，这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。truncate，drop 是 ddl，操作立即生效，原数据不放到 rollback segment 中，不能回滚。操作不触发 trigger。</li>
</ul>
<p>场景：</p>
<ul>
<li>不再需要一张表，用 drop；</li>
<li>删除部分数据行，用 delete，带上 where 子句；</li>
<li>保留表而删除所有数据，用 truncate。</li>
</ul>
<h1>键</h1>
<p>超键、候选键、主键、外键是什么？</p>
<p>超键：在关系中<strong>能唯一标识元组的属性集</strong>称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含<strong>候选键</strong>和<strong>主键</strong>。<br>
候选键：最小超键，即没有冗余元素的超键。<br>
主键：数据库表中对储存数据对象予以<strong>唯一和完整标识</strong>的数据列或属性的组合。<strong>一个数据列只能有一个主键</strong>，且主键的取值不能缺失，即不能为空值（Null）。<br>
外键：在一个表中存在的另一个表的主键称此表的外键。</p>
<h1>视图</h1>
<p>什么是视图？视图的使用场景？</p>
<p>视图是一种虚拟的表，具有和物理表相同的功能，可对视图进行增，改，查的操作。视图通常是一个表或者多个表的行或列的子集。相比多表查询，使得我们获取数据更容易。对视图的修改不影响基本表。</p>
<ul>
<li>只暴露部分字段给访问者；</li>
<li>查询的数据来源于不同的表，而查询者希望以统一的方式查询，创建视图能把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异</li>
</ul>
<h1>范式</h1>
<p>范式（Normal Form）：符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度。通俗地讲，就是一张数据表的表结构所符合的某种设计标准的级别。符合高一级范式的设计，必定符合低一级范式。范式作为设计的标准范式，其最大的意义就是为了避免数据的冗余和插入/删除/更新的异常。</p>
<p>第一范式 1NF：符合 1NF 关系中的每个属性都不可再分。也就是说，一个属性不能有子属性。1NF 是所有关系型数据库（RDB）的最基本要求。只要在关系型数据库管理系统中已经存在的数据表，一定是符合 1NF 的。如果仅仅符合 1NF 的设计，会存在数据冗余过大，插入异常，删除异常，修改异常等问题。故需要提高设计标准，解决导致上述问题的因素，使其符合更高一级范式，这就是所谓的“规范化”。</p>
<p>第二范式 2NF：2NF 在 1NF 的基础上，消除了非主属性对于码的部分函数依赖。2NF 要求，如果依赖于主键，则需要依赖于所有主键，不能存在依赖部分主键的情况。通俗说，就是不要把不相关的东西放到一个表中。不相关的东西不要放在一起，用多个小表连接来代替大表，减少修改时候的负担。</p>
<ul>
<li>函数依赖：若在一张表中，在属性（或属性组）X 的值确定的情况下，必定能确定属性 Y 的值，那就可以说 Y 函数依赖于 X，写作 $X\toY$。函数依赖包括三种依赖：完全函数依赖、部分函数依赖、传递函数依赖。</li>
<li>码：假设 K 为某表中的一个属性或属性组，若除 K 之外的所有属性都<strong>完全函数依赖</strong>于 K，那么我们称 K 为候选码，简称为码。换句话说，假如当 K 确定的情况下，该表除 K 之外的所有属性的值也就随之确定，那么 K 就是码。一张表中可以有超过一个码。实际应用中为了方便，通常选择其中的一个码作为主码。</li>
<li>非主属性：包含在任何一个码中的属性称为主属性。</li>
</ul>
<p>判断是否符合 2NF 就是看数据表中是否存在非主属性对于码的部分函数依赖。若存在，则数据表最高只符合 1NF 的要求，若不存在，则符合 2NF 的要求。判断方法为：</p>
<ul>
<li>第一步：找出数据表中所有的码。</li>
<li>第二步：根据第一步得到的码，找出所有的主属性。</li>
<li>第三步：数据表中，除去所有的主属性，剩下的就都是非主属性了。</li>
<li>第四步：查看是否存在非主属性对码的部分函数依赖。</li>
</ul>
<p>如何消除部分函数依赖，从而让表符合 2NF 的要求？</p>
<ul>
<li>将大数据表拆分成两个或者更多个更小的数据表，在拆分过程中，要达到更高一级范式的要求，这个过程叫做<strong>模式分解</strong>。模式分解方法不是唯一的。<strong>如何进行模式分解呢？</strong></li>
</ul>
<p>仅仅符合 2NF 的要求，仍然存在非主属性对于码的传递函数依赖。为了进一步解决问题，还需将数据表改进为符合 3NF 的要求。</p>
<p>第三范式 3NF：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖。如果存在非主属性对于码的传递函数依赖，则不符合 3NF 的要求。3NF 避免了查询路径过长而导致询问时间过长或者更新异常，提高查询效率。然而，在某些特殊情况下，即使关系模式符合 3NF 的要求，仍然存在这插入、修改、删除异常。造成问题的原因在于，存在着主属性对于码的部分函数依赖和传递函数依赖。解决办法是在 3NF 的基础上消除主属性对于码的部分与传递函数依赖。此时的设计为 BCNF 范式。BC 范式的每个表中只有一个候选键。</p>
<p><strong>所谓的范式，是用来学习参考的，设计的时候根据情况，未必一定要遵守。</strong></p>
<p>参考：</p>
<ul>
<li><a href="https://www.zhihu.com/question/24696366" target="_blank" rel="external">解释一下关系数据库的第一第二第三范式？刘慰、Lyken的回答</a></li>
</ul>
<p>拓展阅读：</p>
<ul>
<li><a href="http://www.cnblogs.com/CareySon/archive/2010/02/16/1668803.html" target="_blank" rel="external">数据库范式那些事</a></li>
</ul>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/23713529" target="_blank" rel="external">知乎专栏-学习编程：常见面试题整理–数据库篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      看到一篇不错的关于数据库面试问题的解答的知乎专栏文章，拿过来咀嚼一番，记录在此，以便后面查阅和扩充相关内容。
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="Database" scheme="http://lix90.github.io/tags/Database/"/>
    
      <category term="SQL" scheme="http://lix90.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-19</title>
    <link href="http://lix90.github.io/2016/11/19/2016-11-19-daily/"/>
    <id>http://lix90.github.io/2016/11/19/2016-11-19-daily/</id>
    <published>2016-11-18T16:00:00.000Z</published>
    <updated>2016-11-22T07:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Python</h1>
<h2 id="日期时间处理">日期时间处理</h2>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/23679915" target="_blank" rel="external">知乎专栏-撸代码，学知识：你真的了解Python中的日期时间处理吗？</a></p>
<p>时间日期处理的三个库：time, datetime, Calender<br>
datetime 的三个类：datetime.date, datatime.time, datetime.datetime<br>
时间模式：时间戳、本地时间、UTC 时间（世界标准时间）</p>
<p>三种时间表现形式：</p>
<ul>
<li>时间戳，一般指 Unix 时间戳，从1970年开始到现在的秒数。<code>time.time()</code></li>
<li>本地时间的 struct_time 形式：长度为11的命名元组，第一位为年，第二位为月 … <code>time.localtime()</code></li>
<li>UTC 时间的 struct_time 形式：与本地时间类似，只不过为 UTC 时间。<code>time.gmtime()</code></li>
</ul>
<h1>JavaScript</h1>
<h2 id="2016-javascript-发展现状">2016 JavaScript 发展现状</h2>
<ul>
<li>代码风格
<ul>
<li>ES6 成为了新标准：虽然 ES6 还未正式被路栏其兼容，但是大多数开发者都已经尝试过它的语法了。</li>
<li>CoffeeScript 正过时</li>
</ul>
</li>
<li>前端框架
<ul>
<li>React 强势</li>
<li>Vue 崛起</li>
<li>Angular 2 &gt; Angular 1</li>
</ul>
</li>
<li>状态管理
<ul>
<li>Redux 最火，但不是所有应用都需要使用 Redux。</li>
</ul>
</li>
<li>API 层
<ul>
<li>GraphQL 有前途？</li>
<li>REST APIs 广泛适用</li>
</ul>
</li>
<li>全栈框架
<ul>
<li><a href="http://meteor.com/" target="_blank" rel="external">Meteor</a> 和 MEAN 为主流</li>
<li>“一体化”框架并没有期待的那么受欢迎</li>
</ul>
</li>
<li>测试框架
<ul>
<li>Mocha 和 Jasmine 较主流</li>
<li>开发者总体对 JS 的测试不太满意</li>
</ul>
</li>
<li>CSS 构建工具/预处理器
<ul>
<li>SASS/SCSS 主导</li>
<li>CSS Modules</li>
</ul>
</li>
<li>构建工具
<ul>
<li>Webpack 和 Gulp 最受欢迎</li>
<li>Grunt 已过气</li>
</ul>
</li>
<li>移动端框架
<ul>
<li>原生应用最主流</li>
<li>React Native 较为受欢迎</li>
</ul>
</li>
<li>新特性
<ul>
<li>服务器端渲染：通过服务器端渲染可以直接把生成好的页面内容发送给客户端，由此提高应用性能，改善交互，并且还解决了 SEO 和可访问性的问题。大多数开发者只觉得服务器端渲染只能算一个 Nice-to-have 的特性。</li>
<li>Code splitting 代码拆分/按需加载：通过代码拆分，只在客户端加载真正需要使用的代码，由此提高性能。</li>
<li>Optimistic updates 即时更新：客户端可以无需等待服务器的相应，直接显示出交互的结果，之后再处理服务器与客户端直接不同步的数据。</li>
<li>Hot module relading 模块热重载：在开发过程中，开发者修改代码之后无需刷新浏览器页面，就能看到修改之后的效果。</li>
<li>Time-travel debugging：在调试使用 Redux 一类状态管理的应用时，模拟应用在各个不同状态的改变。</li>
<li>Real-time operations 实时交互</li>
<li>Dead code elimination 冗余代码消除</li>
<li>Progressive enhancement 渐进式增强：先加载应用最基本最主要的功能，然后再逐步加载完毕。</li>
</ul>
</li>
</ul>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/23773662" target="_blank" rel="external">知乎专栏-从零学习前端开发：2016 JavaScript 发展现状大调查</a></p>
<h2 id="前端自学内容">前端自学内容</h2>
<ul>
<li>扎实的 HTML5/CSS3/JavaScript 基础</li>
<li>了解 Web 相关标准：W3C 标准，ES 规范，Web 语义化</li>
<li>熟练掌握盒模型、常用布局</li>
<li>能够处理好浏览器和移动设备兼容性问题</li>
<li>熟悉 Angular/React 等框架，并开发成型项目</li>
<li>熟悉调试、抓包工具</li>
<li>熟悉 Python/PHP/Node.js 服务器语言之一，并能独立搭建起 Web 应用的运行环境</li>
<li>具有性能优化经验：了解客户端/服务器端缓存，CSS/JS 代码优化一类的性能方面的知识</li>
<li>熟悉常用设计模式和常用 MV* 框架</li>
</ul>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/23629993" target="_blank" rel="external">知乎专栏-从零学习前端开发：自学前端开发，代码之外需要关注的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Python&lt;/h1&gt;
&lt;h2 id=&quot;日期时间处理&quot;&gt;日期时间处理&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/23679915&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎专栏-撸代码，学知
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="前端开发" scheme="http://lix90.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="How-to-learn" scheme="http://lix90.github.io/tags/How-to-learn/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-18</title>
    <link href="http://lix90.github.io/2016/11/18/2016-11-18-daily/"/>
    <id>http://lix90.github.io/2016/11/18/2016-11-18-daily/</id>
    <published>2016-11-17T16:00:00.000Z</published>
    <updated>2016-11-19T03:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>云计算</h1>
<p>中国开源云联盟发布国内首个容器白皮书《容器技术及其应用白皮书1.0》</p>
<blockquote>
<p>容器的技术生态主要分为<strong>核心容器技术</strong>、<strong>分布式容器技术</strong>、<strong>容器平台技术</strong>，以及<strong>容器原生辅助支持技术</strong>四部分。</p>
</blockquote>
<p>容器技术应用面临多个问题：</p>
<ul>
<li>技术多样化多平台，缺乏统一标准；</li>
<li>传统服务较难与容器平台整合；</li>
<li>容器技术快速传播，但尚未形成较好的盈利模式；</li>
<li>容器技术本身在稳定性、安全性、监控成熟度、管理平台、网络和存储方面的成熟度还需提高。</li>
</ul>
<p>来源：<a href="http://blog.dataman-inc.com/shurenyun-news-1110/" target="_blank" rel="external">数人云博客</a></p>
<hr>
<p>云计算目前分为：IaaS、SaaS、PaaS<br>
IaaS 和 PaaS 的区别：</p>
<ul>
<li>IaaS 层指用户无需购置存储、网络设备等，例如云主机，使用者为运维/研发等。</li>
<li>PaaS 层主要提供 SDK、API，用户不必自己购买专用的开发软件、测试软件、服务器等，实现软件的轻松快速发布，多为软件开发商。</li>
</ul>
<p>来源：<a href="http://blog.qiniu.com/archives/7442" target="_blank" rel="external">七牛云博客</a></p>
<hr>
<p>云能解决哪些问题？</p>
<ul>
<li>降低采购周期，提高资源利用率</li>
<li>降低研发、运维难度
<blockquote>
<ul>
<li>购买技术和对应的一些服务来降低开发难度，提高开发效率，让你的产品能够更快的出来，能让你在互联网时代更敏捷一些。</li>
<li>引入这个层面的服务，最大的好处是什么呢？是能够把你的最好的研发人员从底层系统挪到你的业务层系统，让你最有价值的业务层能够比较快速的发展。</li>
<li>将控制流和数据流分开，使用不同的云服务来解决不同的问题</li>
</ul>
</blockquote>
</li>
<li>改善服务治理</li>
</ul>
<p>来源：<a href="http://blog.qiniu.com/archives/7403" target="_blank" rel="external">七牛云博客</a></p>
<h1>CSS</h1>
<h2 id="静态-ui-组件重构">静态 UI 组件重构</h2>
<p>CSS color 属性驱动的静态 UI 组件实现策略</p>
<ul>
<li>提取专门的颜色类名 <code>.dark { color: #33373d; }</code></li>
<li>静态 UI 组件所有动态颜色全部走原生变量（即颜色值直接缺省）</li>
<li>颜色类名既扮演状态类名角色又扮演颜色控制角色</li>
<li>构建基础类名和基础样式
<ul>
<li>currentColor 变量</li>
<li><code>.btn-normal::first-line { color: #fff}</code></li>
</ul>
</li>
</ul>
<p>兼容性限制：currentColor 只在IE9+浏览器下支持，目前适用于移动端开发，以及一些不需考虑低版本 IE 的项目。<br>
不适用于开源项目</p>
<p>代码结构：基本按钮 &gt;&gt;&gt; 特殊按钮 &gt;&gt;&gt; 基础颜色</p>
<p>来源：<a href="http://www.zhangxinxu.com/wordpress/2016/11/development-ui-component-based-on-css-color/" target="_blank" rel="external">张鑫旭博客</a></p>
<h2 id="css-原生变量">CSS 原生变量</h2>
<p>CSS 变量即 CSS 自定义属性。以前原生 CSS 没有变量，只能借助 SASS 或者 LESS 预编译器。新草案发布，包含了在 CSS 中定义和使用变量。</p>
<p>拓展阅读：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="external">MDN–使用CSS变量</a></li>
<li><a href="https://philipwalton.com/articles/why-im-excited-about-native-css-variables/" target="_blank" rel="external">Why I’m Excited About Native CSS Variables</a></li>
</ul>
<h1>Git</h1>
<h2 id="git-commit">git-commit</h2>
<p><code>git commit -a | --all</code> 把所有被修改的文件（不包括新创建的文件）都添加到索引中，并且同时提交。<br>
<code>git commit -m &lt;msg&gt; | --message=&lt;msg&gt;</code> 使用给定的注释提交。</p>
<p><strong>git 跟踪的是内容不是文件</strong></p>
<h1>交互设计</h1>
<p><strong>应该使用 Yes/No 或者 Ok/Cancel 在消息框中吗？</strong><br>
一定不要使用 Yes 或者 OK，一定要用动词。使用与上下文相关联的动词，能够给用户以提示，即当前操作会发生什么，并且与用户的期待相一致。苹果公司的用户界面指南甚至建议使用多个词来清晰定义当前对话框的行为。</p>
<p>参考：<a href="http://ux.stackexchange.com/questions/9946/should-i-use-yes-no-or-ok-cancel-on-my-message-box?newsletter=1&amp;nlcode=678926%7caee7" target="_blank" rel="external">stackexchange: user experience</a></p>
<h1>杂项</h1>
<h2 id="问题解决">问题解决</h2>
<ol>
<li>在使用 <code>zsh</code> 时，ruby 环境配置会出现问题，必须切换到 <code>bash</code> 下才能正常使用 <code>rvm</code>。切换到 <code>bash</code> 时，使用 <code>bash --login</code>。</li>
<li>新创刊期刊影响因子多久出来？3-5年，第4年出第三年的影响因子。所以第一年和第二年没有影响因子。</li>
</ol>
<h2 id="概念">概念</h2>
<ul>
<li>IaaS - Infrastructure as a Service <a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%A4%8E%E8%A8%AD%E6%96%BD%E5%8D%B3%E6%9C%8D%E5%8B%99" target="_blank" rel="external">基础设施即服务</a>，是消费者使用处理、储存、网络以及各种基础运算资源，部署与执行操作系统或应用程序等各种软件。</li>
<li>PaaS - Platform as a Service <a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E5%8F%B0%E5%8D%B3%E6%9C%8D%E5%8A%A1" target="_blank" rel="external">平台即服务</a>，提供运算平台与解决方案堆栈，介于软件即服务与基础设施即服务之间。</li>
<li>SaaS - Software as a Service <a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1" target="_blank" rel="external">软件即服务</a>，通俗可以称为“即需即用软件”，是一种软件交互模式。在这种交互模式中云端集中式托管软件及相关的数据，软件仅需透过互联网，而不须透过安装即可使用。用户通常使用精简客户端经由一个网页浏览器来访问软件即服务。</li>
<li>IoT - Internet of Things <a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E8%81%94%E7%BD%91" target="_blank" rel="external">物联网</a>，让所有能行使独立功能的普通物体实现互联互通的网络。</li>
<li>SOA - Service-oriented architecture <a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84" target="_blank" rel="external">面向服务的体系结构</a>，是构造分布式计算的应用程序的方法，它将应用程序功能作为服务发送给最终用户或者其他服务。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;云计算&lt;/h1&gt;
&lt;p&gt;中国开源云联盟发布国内首个容器白皮书《容器技术及其应用白皮书1.0》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;容器的技术生态主要分为&lt;strong&gt;核心容器技术&lt;/strong&gt;、&lt;strong&gt;分布式容器技术&lt;/strong&gt;、&lt;strong&gt;容
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Git" scheme="http://lix90.github.io/tags/Git/"/>
    
      <category term="交互设计" scheme="http://lix90.github.io/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Cloud" scheme="http://lix90.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>R：使用 tidyr 进行数据操作</title>
    <link href="http://lix90.github.io/2016/11/17/2016-11-17-r-tidyr/"/>
    <id>http://lix90.github.io/2016/11/17/2016-11-17-r-tidyr/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2016-11-19T03:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1>宽转长 Wide2Long</h1>
<p><code>tidyr::gather(data, key, value, ..., na.rm = FALSE, convert = FALSE, factor_key = FALSE)</code></p>
<p>参数：</p>
<ul>
<li><code>data</code> 数据框</li>
<li><code>key</code> 键，新生成的因子列名（不需要加引号）</li>
<li><code>value</code> 值，新生成的数值列名（不需要加引号）</li>
<li><code>...</code> 所指定的需要转换的列，使用变量名，即原来数据框的列名。变量名将构成合并的键的因子。有以下几种表示方式：
<ul>
<li><code>x:z</code> 选择所有的 x 与 z 之间的变量（包括 x 和 z）</li>
<li><code>-z</code> 排除 z 变量</li>
<li><code>x,y,z</code> 选择 x y z 三个变量</li>
<li><code>2:4</code> 选择第2到4列</li>
</ul>
</li>
<li><code>na.rm</code> 是否去除缺失值</li>
<li><code>convert</code> 自动转换键列的值的数据类型，当需合并的列名为数值，整数，或逻辑值时非常有用</li>
<li><code>factor_key</code> 是否将键的内容转换为因子，默认为 <code>FALSE</code> 即存储为字符向量</li>
</ul>
<h1>长转宽 Long2Wide</h1>
<p><code>tidyr::spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE, sep = NULL)</code></p>
<p>参数：</p>
<ul>
<li><code>key</code> 该列的因子转换为多个列的列名</li>
<li><code>value</code> 该列的内容将分配到多个列中</li>
<li><code>fill</code> 指定填充缺失值的值</li>
<li><code>convert</code> 数据类型转换</li>
<li><code>drop</code> 是否丢弃数据中不存在的因子水平，如果为 <code>FALSE</code>，那么将把没有数据的因子的值使用 <code>fill</code> 的参数值填充。</li>
<li><code>sep</code> 如果为 <code>NULL</code>，新列名为键所在的列的值；如果不为 <code>NULL</code>，列名将为 <code>&lt;key_name&gt;&lt;sep&gt;&lt;key_value&gt;</code>，即键所在的列名加上分隔字符加键所在的列的值。例如：如果 <code>key</code> 为 <code>A</code>，A 有两个因子水平，<code>A1,A2</code>，<code>sep=&quot;-&quot;</code>，那么列名将为 <code>A-A1,A-A2</code>。</li>
</ul>
<h1>分割单列为多列</h1>
<p><code>tidyr::separate(data, col, into, sep = &quot;[^[:alnum:]]+&quot;, remove = TRUE, convert = FALSE, extra = &quot;warn&quot;, fill = &quot;warn&quot;, ...)</code></p>
<p>参数：</p>
<ul>
<li><code>col</code> 列名（不需要引号）</li>
<li><code>into</code> 字符串向量，例如 <code>c(&quot;x&quot;, &quot;y&quot;)</code>，分隔的列的列名就是 x 和 y。</li>
<li><code>sep</code> 分隔符，取值可以为正则表达式，也可以为数值。分隔符的长度必须比 <code>into</code> 少1。
<ul>
<li>如果为字符串，那么被当作正则表达式处理。默认值为匹配任意非字母和数字的符号。</li>
<li>如果为数值，被当作分隔的位置。正数表示从第1个字符开始数，负数表示从右边第1个字符开始数。</li>
</ul>
</li>
<li><code>remove</code> 是否剔除输入列，默认为 <code>TRUE</code>，表示将 <code>col</code> 和 <code>into</code> 剔除。</li>
<li><code>convert</code> 数据类型转换。</li>
<li><code>extra</code> 如果 <code>sep</code> 为字符向量，且值太多，使用该参数控制结果
<ul>
<li><code>&quot;warn&quot;</code> 默认值，发出警告，并丢弃多余的值</li>
<li><code>&quot;drop&quot;</code> 丢弃多余的值，不发出警告</li>
<li><code>&quot;merge&quot;</code> 分割的次数为 <code>into</code> 长度数目</li>
</ul>
</li>
<li><code>fill</code> 如果 <code>sep</code> 为字符向量，且值不足，使用该参数控制结果
<ul>
<li><code>&quot;warn&quot;</code> 默认值，发出警告，从右往左填充</li>
<li><code>&quot;right&quot;</code> 在右侧填充</li>
<li><code>&quot;left&quot;</code> 在左侧填充</li>
</ul>
</li>
</ul>
<p>对于 <code>extra</code> 和 <code>fill</code> 参数不熟悉。</p>
<h1>合并多列为单列</h1>
<p><code>tidyr::unite(data, col, ..., sep = &quot;_&quot;, remove = TRUE)</code></p>
<p>参数：</p>
<ul>
<li><code>col</code> 将要合并得到的列名</li>
<li><code>...</code> 指定要被合并的列名，表示方式和 <code>tidyr::gather</code> 一样</li>
<li><code>sep</code> 分隔符</li>
<li><code>remove</code> 默认为 <code>TRUE</code>，删除输入列，即 <code>...</code> 中的列</li>
</ul>
<h1>实例</h1>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(tidyr)</div><div class="line">data.long &lt;- data.frame(</div><div class="line">  id = rep.int(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), <span class="number">2</span>),</div><div class="line">  key = rep(c(<span class="string">"f1"</span>,<span class="string">"f2"</span>), each = <span class="number">3</span>),</div><div class="line">  value = sample(<span class="number">6</span>, <span class="number">6</span>, replace = <span class="literal">TRUE</span>)</div><div class="line">)</div><div class="line">&gt;&gt;&gt; data.long</div><div class="line">id key value</div><div class="line"><span class="number">1</span>  <span class="number">1</span>  f1     <span class="number">4</span></div><div class="line"><span class="number">2</span>  <span class="number">2</span>  f1     <span class="number">6</span></div><div class="line"><span class="number">3</span>  <span class="number">3</span>  f1     <span class="number">5</span></div><div class="line"><span class="number">4</span>  <span class="number">1</span>  f2     <span class="number">3</span></div><div class="line"><span class="number">5</span>  <span class="number">2</span>  f2     <span class="number">6</span></div><div class="line"><span class="number">6</span>  <span class="number">3</span>  f2     <span class="number">5</span></div></pre></td></tr></table></figure>
<p>长转宽</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data.wide &lt;- spread(data.long, key = key, value = value)</div><div class="line">&gt;&gt;&gt; data.wide</div><div class="line">id f1 f2</div><div class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">3</span></div><div class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">6</span>  <span class="number">6</span></div><div class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">5</span></div></pre></td></tr></table></figure>
<p>宽转长</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data.long &lt;- gather(data.wide, key = key, value = value, f1, f2)</div><div class="line"><span class="comment">## data.long &lt;- gather(data.wide, key = key, value = value, f1:f2)</span></div><div class="line"><span class="comment">## data.long &lt;- gather(data.wide, key = key, value = value, 2:3)</span></div></pre></td></tr></table></figure>
<p>合并列与分割列</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 新加一列</span></div><div class="line">data.long$g &lt;- rep(c(<span class="string">"g1"</span>,<span class="string">"g2"</span>), each = <span class="number">3</span>)</div><div class="line">&gt;&gt;&gt; data.long</div><div class="line">id key value  g</div><div class="line"><span class="number">1</span>  <span class="number">1</span>  f1     <span class="number">4</span> g1</div><div class="line"><span class="number">2</span>  <span class="number">2</span>  f1     <span class="number">6</span> g1</div><div class="line"><span class="number">3</span>  <span class="number">3</span>  f1     <span class="number">5</span> g1</div><div class="line"><span class="number">4</span>  <span class="number">1</span>  f2     <span class="number">3</span> g2</div><div class="line"><span class="number">5</span>  <span class="number">2</span>  f2     <span class="number">6</span> g2</div><div class="line"><span class="number">6</span>  <span class="number">3</span>  f2     <span class="number">5</span> g2</div><div class="line"></div><div class="line"><span class="comment">#### 合并 key 和 g</span></div><div class="line">data.long.unite &lt;- unite(data.long, col = grp_key, key, g, sep = <span class="string">"-"</span>)</div><div class="line">&gt;&gt;&gt; data.long.unite</div><div class="line">id grp_key value</div><div class="line"><span class="number">1</span>  <span class="number">1</span>   f1-g1     <span class="number">4</span></div><div class="line"><span class="number">2</span>  <span class="number">2</span>   f1-g1     <span class="number">6</span></div><div class="line"><span class="number">3</span>  <span class="number">3</span>   f1-g1     <span class="number">5</span></div><div class="line"><span class="number">4</span>  <span class="number">1</span>   f2-g2     <span class="number">3</span></div><div class="line"><span class="number">5</span>  <span class="number">2</span>   f2-g2     <span class="number">6</span></div><div class="line"><span class="number">6</span>  <span class="number">3</span>   f2-g2     <span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment">#### 分割列为多列</span></div><div class="line">data.long.sep &lt;- separate(data.long.unite, col = grp_key, into = c(<span class="string">"key"</span>, <span class="string">"grp"</span>), sep = <span class="string">"-"</span>)</div><div class="line">&gt;&gt;&gt; data.long.sep</div><div class="line">id key grp value</div><div class="line"><span class="number">1</span>  <span class="number">1</span>  f1  g1     <span class="number">4</span></div><div class="line"><span class="number">2</span>  <span class="number">2</span>  f1  g1     <span class="number">6</span></div><div class="line"><span class="number">3</span>  <span class="number">3</span>  f1  g1     <span class="number">5</span></div><div class="line"><span class="number">4</span>  <span class="number">1</span>  f2  g2     <span class="number">3</span></div><div class="line"><span class="number">5</span>  <span class="number">2</span>  f2  g2     <span class="number">6</span></div><div class="line"><span class="number">6</span>  <span class="number">3</span>  f2  g2     <span class="number">5</span></div></pre></td></tr></table></figure>
<p>拓展阅读：</p>
<ul>
<li><a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html" target="_blank" rel="external">Hadley Wickham: Tidy data</a></li>
<li><a href="https://rpubs.com/bradleyboehmke/data_wrangling" target="_blank" rel="external">Brad Boehmke: Data Processing with dplyr &amp; tidyr</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;宽转长 Wide2Long&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;tidyr::gather(data, key, value, ..., na.rm = FALSE, convert = FALSE, factor_key = FALSE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="tidyr" scheme="http://lix90.github.io/tags/tidyr/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-17</title>
    <link href="http://lix90.github.io/2016/11/17/2016-11-17-daily/"/>
    <id>http://lix90.github.io/2016/11/17/2016-11-17-daily/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2016-11-19T03:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Git</h1>
<h2 id="git-branch-分支操作">Git branch 分支操作</h2>
<p><code>git branch</code> 列出，新建，或者删除分支</p>
<ul>
<li><code>git branch --list</code> 列出存在的分支，带 <code>*</code> 号的为当前分支</li>
<li><code>git branch -r</code> 列出远程跟踪的分支</li>
<li><code>git branch -a</code> 列出本地和远程分支</li>
<li><code>git branch -d|-D</code> 删除分支</li>
<li><code>git branch -rd</code> 删除远程分析</li>
<li><code>git branch -m|-M</code> 重命名分支</li>
</ul>
<h2 id="git-checkout-切换分支">Git checkout 切换分支</h2>
<p><code>git checkout</code> 切换分支或者修复工作树文件</p>
<ul>
<li><code>git checkout &lt;branch&gt;</code> 切换分支</li>
<li><code>git checkout -b|-B &lt;new_branch&gt;</code> 新建并切换到分支</li>
</ul>
<h2 id="head">HEAD</h2>
<blockquote>
<p>The HEAD in Git is the pointer to the current branch reference, which is in turn a pointer to the last commit you made or the last commit that was checked out into your working directory. That also means it will be the parent of the next commit you do. It’s generally simplest to think of it as HEAD is the snapshot of your last commit.</p>
</blockquote>
<p><strong>HEAD</strong> 可以被看作是“当前分支”，HEAD 像指针一样指向当前分支（本地分支）。当切换分支时，HEAD 修改指向新的分支的顶端。HEAD 可以指向任意提交，它并不需要指向最后一次提交。当 HEAD 指向的提交并不是一个分支的最后一次的提交，此时 HEAD 出于分离状态。</p>
<p><strong>detached HEAD</strong> HEAD 处于分离状态，即不依附任一分支，此时提交操作可以正常进行，但是不会更新任何已命名的分支。此时，可以认为这是在更新一个匿名分支。在这种情况下，如果切换到别的分支，那么这个提交节点可能再也不会被引用到，然后就被丢弃了。如果想保存这个状态，可以新建分支（<code>git checkout -b &lt;new_branch&gt;</code>）。</p>
<p><code>HEAD</code> 指代最近一次提交，<code>HEAD~</code> 指代前一次提交，<code>HEAD~~</code> 或 <code>HEAD~2</code> 指代更前一次提交。</p>
<p>拓展阅读：</p>
<ul>
<li><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">图解Git</a></li>
<li><a href="https://git-scm.com/blog" target="_blank" rel="external">Reset Demystified</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Git&lt;/h1&gt;
&lt;h2 id=&quot;git-branch-分支操作&quot;&gt;Git branch 分支操作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; 列出，新建，或者删除分支&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch --list&lt;/cod
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Git" scheme="http://lix90.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-16</title>
    <link href="http://lix90.github.io/2016/11/16/2016-11-16-daily/"/>
    <id>http://lix90.github.io/2016/11/16/2016-11-16-daily/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-12-01T06:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1>杂项</h1>
<h2 id="shell">Shell</h2>
<p><code>ps</code> 返回正在运行的进程的信息<br>
<code>ps aux</code> 列出所有运行进程<br>
<code>ps aux | grep string</code> 列出匹配字符串的进程</p>
<p>使用 <code>$HOME</code> 替代 <code>~</code><br>
使用 <code>type -p</code> 替代 <code>which</code></p>
<h2 id="统计学">统计学</h2>
<h3 id="标准差">标准差</h3>
<p>从一组数中新添加一个数，数多大能够让<strong>标准差</strong>增加或不变或降低？<br>
当新添加的数和原来的均值的差值的绝对值小于、等于、或大于 $s\sqrt{1+1/n}$ 时，数组的标准差会降低，不变或增加。</p>
<blockquote>
<p>If the old sample size is $n$, the old mean is $m$, the old standard deviation is $s$, and a new point $x$ is added to the data, then the new standard deviation will be less than, equal to, or greater than $s$ according as $|x−m|$ is less than, equal to, or greater than $s\sqrt{1+1/n}$.</p>
</blockquote>
<p>来源: <a href="http://stats.stackexchange.com/questions/73498/value-that-increases-the-standard-deviation?rq=1" target="_blank" rel="external">Cross Validated: Value that increases the Standard Deviation</a></p>
<h3 id="循环变量">循环变量</h3>
<p>小时和风向均为循环变量，在模型中作为预测变量时，需要将其映射到正弦和余弦函数上，将角度使用弧度测量。</p>
<p>来源：<a href="http://stats.stackexchange.com/questions/148380/use-of-circular-predictors-in-linear-regression" target="_blank" rel="external">Cross Validated: Use of circular predictors in linear regression</a></p>
<h2 id="css：利用偏移垂直居中">CSS：利用偏移垂直居中</h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况下，元素顶端会沿着父容器的顶端内边缘绘制，这时 <code>top = 0;</code>。当设置 <code>top = 50%;</code>，元素顶端会沿着父容器的垂直方向的水平中线绘制，这时元素并未相对父容器垂直居中对齐。利用 <code>transform: translateY(-50%);</code>，将元素沿着 Y 轴，向上（负方向）平移元素自身高度的50%。最后，元素便垂直居中于父容器。</p>
<p>来源：<a href="http://stackoverflow.com/questions/40530101/why-is-translatey-50-needed-to-center-an-element-which-is-at-top-50" target="_blank" rel="external">stackoverflow: Why is translateY(-50%) needed to center an element which is at top: 50%?</a></p>
<h2 id="todo">TODO</h2>
<p>翻译答案 <a href="http://stats.stackexchange.com/questions/2691/making-sense-of-principal-component-analysis-eigenvectors-eigenvalues" target="_blank" rel="external">Making sense of principal component analysis, eigenvectors &amp; eigenvalues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;杂项&lt;/h1&gt;
&lt;h2 id=&quot;shell&quot;&gt;Shell&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; 返回正在运行的进程的信息&lt;br&gt;
&lt;code&gt;ps aux&lt;/code&gt; 列出所有运行进程&lt;br&gt;
&lt;code&gt;ps aux | grep string&lt;/code&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="Shell" scheme="http://lix90.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>R：使用基本包进行多图布局</title>
    <link href="http://lix90.github.io/2016/11/16/2016-11-16-r-vis-layout/"/>
    <id>http://lix90.github.io/2016/11/16/2016-11-16-r-vis-layout/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-12-03T13:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Layout 布局</h1>
<p><code>layout</code> 函数可以指定复杂的绘图布局。该函数可以将设备的面板根据第一个参数 <code>mat</code> 矩阵分割为多个行和列，列宽和行高在对应的参数中指定。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout(mat, widths = rep.int(<span class="number">1</span>, ncol(mat)),</div><div class="line">    heights = rep.int(<span class="number">1</span>, nrow(mat)),</div><div class="line">    respect = <span class="literal">FALSE</span>)</div></pre></td></tr></table></figure>
<p><code>layout.show(n)</code> 显示当前布局。<code>n</code> 为显示的图形的个数。<code>n=1</code> 则显示第一个图形的布局，<code>n=2</code> 则显示前两个图形的布局。<br>
<code>layout</code> 返回的值为图形的个数。</p>
<p>参数：</p>
<ul>
<li><code>mat</code>：矩阵对象，指定接下来的 N 个图形的位置。矩阵中的值必须为 0 或者正整数。</li>
<li><code>widths</code>：向量对象，指定列宽。可以通过数值指定相对宽度。而绝对宽度通过 <code>lcm()</code> 指定。</li>
<li><code>heights</code>：向量对象，指定列高。高度设置跟 <code>widths</code> 一样。</li>
<li><code>respect</code>：要么逻辑值要么矩阵对象。如果为矩阵对象，那么必须与 <code>mat</code> 具有同样的维度，而且每个值为 0 或者 1。该参数控制列宽的单位是否与行高的单位在设备物理测量上相同，控制设备的纵横比。纵横比为列数比上行数。如果 <code>respect = TRUE</code> 那么列宽和行高单位相同，不受页面纵横比的影响。如果 <code>respect = FALSE</code>，那么一行的高和一列的宽不一样，会受到页面的影响。</li>
<li><code>n</code>：绘制的图形个数。</li>
</ul>
<p>需要注意的是，<code>layout</code> 布局与 <code>par(mfrow)</code> <code>par(mfcol)</code> <code>split.screen</code> 完全不兼容。</p>
<h1>Par 的 mfrow 和 mfcol 参数布局</h1>
<p><code>par</code> 用于设置或查询绘图参数。<code>par</code> 的合法参数都能在高阶绘图函数中使用。<br>
在 <code>par</code> 的众多参数中，有两个参数可以用于多图的布局，即 <code>mfrow</code> 和 <code>mfcol</code>。</p>
<h2 id="par-关于布局的参数">par 关于布局的参数</h2>
<p><strong>Outer margin</strong> 外边缘</p>
<p>默认没有外边缘。可以通过 <code>oma</code> 增加外边缘，其单位为线宽，即一行文字的空间。还有 <code>omi</code> 和 <code>omd</code> 设置外边缘宽度，单位分别为英寸和 NDC 归一化坐标。</p>
<ul>
<li><code>oma</code> 向量 <code>c(bottom, left, top, right)</code>，外边缘尺寸，行高</li>
<li><code>omd</code> 向量 <code>c(x1,x2,y1,y2)</code> 外边缘定位，单位为 NDC，即<code>c(left,right,bottom,top)</code></li>
<li><code>omi</code> 向量 <code>c(bottm, left, top, right)</code> 外边缘尺寸，英寸</li>
</ul>
<p><strong>Inner region</strong> 内区域</p>
<p>为除去外边缘之外剩余的区域。如果只有一个图，那么就等于 figure region。如果有多个图，那就是多个图合并的区域。</p>
<p><strong>Figure region</strong> 图形区域</p>
<p>受到外边缘和图的个数的影响。绘图区域通过 <code>fig</code> 和 <code>fin</code> 参数设定。<code>fig</code> 用来定位，<code>c(left, right, bottom, top)</code>，其中的值为内区域的大小（除去外边缘之后的区域）。<code>fin</code> 用于设定绘图区域大小，<code>c(width,height)</code>，单位为英寸，最后绘图区域将在内区域中居中。</p>
<p><strong>Figure margin</strong> 图形边缘</p>
<p>图形边缘，通过 <code>mar</code> 和 <code>mai</code> 参数设定。</p>
<ul>
<li><code>mai</code> 数值向量 <code>c(bottom, left, top, right)</code> 绘图边缘的尺寸，英寸</li>
<li><code>mar</code> 数值向量 <code>c(bottom, left, top, right)</code> 指定绘图边缘尺寸，行高，默认为 <code>c(5,4,4,2)+0.1</code></li>
<li><code>mex</code> 行尺寸扩展因子，用于描述绘图边缘上的坐标。并不改变字体大小，而是指定用来转换 <code>mar</code> 和 <code>mai</code> 以及 <code>oma</code> 和 <code>omi</code> 的文本行尺寸。</li>
<li><code>mgp</code> 边缘行（<code>mex</code> 单位），用于轴标题、标签和线。<code>mgp[1]</code> 影响 <code>title</code>,<code>mgp[2:3]</code> 影响坐标轴。默认为 <code>c(3,1,0)</code>。</li>
</ul>
<p><strong>Plot region</strong> 绘制区域</p>
<ul>
<li><code>plt</code> 向量 <code>c(x1,x2,y1,y2)</code> 图形区域的坐标 (left, right, bottom, top)</li>
<li><code>ply</code> 字符，指定图形区域类型，<code>&quot;s&quot;</code> 为正方形绘图区域，<code>&quot;m&quot;</code> 为最大绘图区域。</li>
<li><code>pin</code> 尺寸，<code>c(width, height)</code></li>
</ul>
<p>子图或多图绘制</p>
<ul>
<li><code>mfcol, mfrow</code> 向量 <code>c(nr, nc)</code>，绘制 nr*nc 子图矩阵。</li>
<li><code>mfg</code> 向量 <code>c(i,j)</code> 表示接下来图形绘制的位置。必须实现定义好 <code>mfcol</code> 或者 <code>mfow</code>。另外，为了兼容 <code>S</code> 语言，还可以以 <code>c(i,j,nr,nc)</code> 的形式指定位置。</li>
</ul>
<h1>Split.screen 布局</h1>
<p><code>split.screen</code> 定义在当前设备上一定数量的区域，可以在一定程度上当作独立/分离的图形设备。<br>
<code>screen</code> 用于选择哪一个 screen 绘制图形。<br>
<code>erase.screen</code> 用于清除一个 screen，通过填充背景颜色。<br>
<code>close.screen</code> 移除指定的 screen。</p>
<p><code>split.screen</code> 参数：</p>
<ul>
<li><code>figs</code> 两个元素的向量，描述了在一个屏幕矩阵中的行和列的数目，或者一个4列矩阵。如果是矩阵，那么每一行描述了一个屏幕的左、右、下和上端的值，为 NDC 单位，即0为最左下角，1为最右上角。</li>
<li><code>screen</code> 用于分割的屏幕编号。默认为当前屏幕，否则为整个设备区域。</li>
<li><code>erase</code> 逻辑值，是否清空选中的屏幕。</li>
<li><code>n</code> 代表将准备用于绘制、擦除、或者关闭的屏幕编号。</li>
<li><code>new</code> 逻辑值，代表着是否擦除当前屏幕用于新图的绘制。</li>
<li><code>all.screens</code> 逻辑值，是否关闭所有屏幕。</li>
</ul>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">split.screen(c(<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 构建两行两列的 screen</span></div><div class="line">screen(<span class="number">2</span>) <span class="comment"># 选中第2个 screen</span></div><div class="line">split.screen(c(<span class="number">2</span>,<span class="number">1</span>)) <span class="comment"># 将第2个 screen 再次分割为两行</span></div><div class="line">screen(<span class="number">4</span>) <span class="comment"># 选中第4个 screen</span></div><div class="line">plot(<span class="number">10</span>:<span class="number">1</span>)</div><div class="line">erase.screen() <span class="comment"># 擦除当前 screen</span></div><div class="line">plot(<span class="number">15</span>:<span class="number">1</span>) <span class="comment"># 继续在当前 screen 上绘制</span></div></pre></td></tr></table></figure>
<p>NDC：normalized device coordinates</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Layout 布局&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;layout&lt;/code&gt; 函数可以指定复杂的绘图布局。该函数可以将设备的面板根据第一个参数 &lt;code&gt;mat&lt;/code&gt; 矩阵分割为多个行和列，列宽和行高在对应的参数中指定。&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Data viz" scheme="http://lix90.github.io/tags/Data-viz/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-15</title>
    <link href="http://lix90.github.io/2016/11/15/2016-11-15-daily/"/>
    <id>http://lix90.github.io/2016/11/15/2016-11-15-daily/</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2016-11-19T03:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1>CSS 和 JS 加载顺序和位置问题</h1>
<h2 id="为什么要把-css-样式表放在头部-head">为什么要把 CSS 样式表放在头部（Head）</h2>
<p>如果 CSS 放置在头部，页面会渐进渲染。前端工程师需要让页面和样式渐进的显示出来。对于具有大量内容的页面和网络连接效率较低的用户，这是非常重要的。这样可以给用户视觉反馈，来提示页面的渲染进度。这能够整体上提升用户体验。</p>
<p>如果 CSS 防止在页面文档的底端，这会阻止浏览器渐进的渲染页面。浏览器会阻止渲染，为了避免对页面元素进行重绘。这样会出现一段时间的白屏。影响用户体验。</p>
<h2 id="为什么要把-js-脚本放在底端-the-bottom-of-body">为什么要把 JS 脚本放在底端（the Bottom of Body）</h2>
<p>脚本文件的加载会阻塞并行下载。HTTP/1.1 规定浏览器对于同一个主机的并行下载请求不能超过两个。如果网站图片资源放在多个主机上，那么可以同时超过两个下载请求。但是脚本文件会使浏览器停止其他数据的下载，不同主机的下载都会停止。</p>
<p>但是在某些情况下，并不能将 JS 脚本放在底端。例如，脚本中包含有使用 <code>document.write</code> 插入部分页面内容，这就不能放在后面加载。</p>
<p>替代的做法是，使用 <code>defer</code> 加载脚本，这样就可以放在头部了。<code>defer</code> 属性表明了脚本并不包含 <code>document.write</code>，在加载脚本的同时，页面也一同渲染。Firefox 并不支持 <code>defer</code> 属性。</p>
<h2 id="如果-script-和-link-都在头部-谁在前-谁在后？">如果 script 和 link 都在头部，谁在前，谁在后？</h2>
<p>对于现代<strong>桌面</strong>浏览器来说，CSS 在 JS 前声明对性能并没有显著提高。甚至，CSS 在 JS 之后，不但不影响性能，反而在特定情况下还能提升性能。不过，这仅限于现代桌面浏览器。对于老式浏览器，仍然需要在 JS 之前声明 CSS 的外部链接。这归功于现代桌面浏览器使用了“推测渲染技术”（speculative parsing），这种技术能够让浏览器往前一步看，总是在脚本下载和执行之前下载其他资源。老式浏览器并不支持该技术，所以把脚本放在前面会影响性能。</p>
<p>目前，85% 的桌面浏览器均支持推测渲染技术。把脚本放在样式表之前仍然可能会影响 15% 的用户。对于移动端的浏览器，无法获得一个明确的支持该技术的比例。WebKit 内核的移动浏览器已支持该技术。但是即便是最新的 WebKit 内核浏览器，<a href="http://stackoverflow.com/users/201952/josh3736" target="_blank" rel="external">josh3736</a>仍然发现 JS 在 CSS 之前会影响性能，这可能与移动设备在 CPU，内存以及网络上的限制而关闭了限制了该功能。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/6625773/where-should-i-put-the-css-and-javascript-code-in-an-html-webpage" target="_blank" rel="external">stackoverflow: Where should I put the CSS and Javascript code in an HTML webpage?</a></li>
<li><a href="http://stackoverflow.com/questions/9271276/is-the-recommendation-to-include-css-before-javascript-invalid" target="_blank" rel="external">stackoverflow: Is the recommendation to include CSS before JavaScript invalid?</a></li>
<li><a href="http://stackoverflow.com/questions/7120801/group-of-css-and-js-files-import-at-html" target="_blank" rel="external">stackoverflow: Group of CSS and JS files import at HTML?</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Yahoo! Best Practices for Speeding Up Your Web Site</a></li>
</ul>
<hr>
<h1>CSS：@import vs Link</h1>
<blockquote>
<p>The bottomline is: use LINK instead of @import if you want stylesheets to download in parallel resulting in a faster page.</p>
<ul>
<li>Using @import within a stylesheet adds one more roundtrip to the overall download time of the page.</li>
<li>Using @import in IE causes the download order to be altered. This may cause stylesheets to take longer to download, which hinders progress rendering making the page feel slower.</li>
</ul>
</blockquote>
<p>避免使用 <code>@import</code> 能够提升性能。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://www.stevesouders.com/blog/2009/04/09/dont-use-import/" target="_blank" rel="external">SteveSounders: don’t use @import</a></li>
</ul>
<hr>
<h1>杂项</h1>
<blockquote>
<p><a href="https://github.com/rushter/MLAlgorithms" target="_blank" rel="external">rushter/MLAlgorithms</a><br>
A collection of minimal and clean implementations of machine learning algorithms.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CSS 和 JS 加载顺序和位置问题&lt;/h1&gt;
&lt;h2 id=&quot;为什么要把-css-样式表放在头部-head&quot;&gt;为什么要把 CSS 样式表放在头部（Head）&lt;/h2&gt;
&lt;p&gt;如果 CSS 放置在头部，页面会渐进渲染。前端工程师需要让页面和样式渐进的显示出来。对于具有大量
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="HTML" scheme="http://lix90.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>实验室内部分享一：绘制和编辑可发表的图形</title>
    <link href="http://lix90.github.io/2016/11/14/2016-11-14-img-output/"/>
    <id>http://lix90.github.io/2016/11/14/2016-11-14-img-output/</id>
    <published>2016-11-13T16:00:00.000Z</published>
    <updated>2016-11-19T03:32:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为实验室内部分享内容提纲。<br>
分享目的：做到在不求人的情况下无痛高效地输出符合论文投稿要求的图形。</p>
<h1>准备知识</h1>
<h2 id="颜色模式">颜色模式</h2>
<ul>
<li>印刷：CMYK，印刷三原色（青品黄），叠加变暗 —&gt; 打印出版</li>
<li>显示：RGB，光影三原色（黄绿蓝），叠加变亮 —&gt; 在线出版</li>
<li>其他：HSB, Lab, 位图模式，灰度模式，索引颜色模式，双色模式，多通道模式等</li>
</ul>
<h2 id="图形格式">图形格式</h2>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">定义</th>
<th style="text-align:left">特点</th>
<th style="text-align:left">常见格式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">矢量图</td>
<td style="text-align:left">使用点、线、面（多边形）等基于数学方程的几何图元表示的图像</td>
<td style="text-align:left">放大缩小图形质量不变</td>
<td style="text-align:left">eps, svg, pdf, …</td>
</tr>
<tr>
<td style="text-align:left">位图</td>
<td style="text-align:left">使用像素阵列表示的图像</td>
<td style="text-align:left">尺寸放大会影响质量</td>
<td style="text-align:left">jpg, png, tiff, …</td>
</tr>
</tbody>
</table>
<h2 id="图形分辨率">图形分辨率</h2>
<p>分辨率：两侧或者显示系统对细节的分辨能力。<br>
PPI/DPI 单位：表示打印图像或显示器单位面积上像素/点数量的指数。</p>
<p>PPI</p>
<ul>
<li>每英寸像素数</li>
<li>用于电脑显示领域</li>
<li>人类肉眼能够分辨的最高像素点密度为 300ppi</li>
</ul>
<p>DPI</p>
<ul>
<li>每英寸点数</li>
<li>用于打印或印刷领域</li>
</ul>
<h1>图形编辑软件使用</h1>
<ul>
<li>Adobe Illustrator 商业矢量图编辑软件：<strong>主要内容</strong></li>
<li>Adobe Photoshop 商业位图编辑软件</li>
<li>Inkscape 免费开源矢量图编辑软件</li>
</ul>
<h2 id="基本界面">基本界面</h2>
<ul>
<li>菜单栏</li>
<li>工具栏</li>
<li>控制面板</li>
<li>图形窗口</li>
</ul>
<h2 id="快捷键">快捷键</h2>
<ul>
<li>工具选择快捷键：快速切换当前工具</li>
<li>组合快捷键：快速操作对象，选择功能等</li>
</ul>
<h2 id="常用工具与概念">常用工具与概念</h2>
<h3 id="对象">对象</h3>
<ul>
<li>对象：具有一定属性的点，线，面（填充）等</li>
<li>对象的基本操作：移动，旋转，镜像，拷贝 …</li>
<li>建立组与取消组：建立组方便对整体进行操作。</li>
</ul>
<h3 id="选择">选择</h3>
<ul>
<li>一般选择与直接选择（组选择）</li>
<li>相似对象选择：选择文本对象，选择单独的点，…</li>
<li>相似属性选择：选择具有相同描边的对象，选择具有相同填充的对象，…</li>
</ul>
<h3 id="图层">图层</h3>
<ul>
<li>操作图层：删除，新建，隐藏，锁定</li>
<li>管理图层：移动，合并，重命名</li>
</ul>
<h3 id="其他重要操作">其他重要操作</h3>
<ul>
<li>路径查找：Window &gt;&gt;&gt; Pathfinder</li>
<li>排列对齐：Window &gt;&gt;&gt; Align</li>
<li>字体描边：Type &gt;&gt;&gt; Create Outline</li>
<li>取色：工具栏 &gt;&gt;&gt; Eye droper tool</li>
<li>属性修改（线）：Window &gt;&gt;&gt; Appearance</li>
</ul>
<h1>实例</h1>
<ol>
<li>实验流程图</li>
<li>单图编辑</li>
<li>多图合并</li>
<li>ERP 线图编辑</li>
<li>…</li>
</ol>
<h1>绘制图表</h1>
<ul>
<li>编程语言：R, Python, Matlab, … &gt;&gt;&gt; 推荐学习</li>
<li>界面操作：Excel, SPSS, JASP, …</li>
<li>在线绘制：<a href="http://plot.ly" target="_blank" rel="external">plot.ly</a>, …</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为实验室内部分享内容提纲。&lt;br&gt;
分享目的：做到在不求人的情况下无痛高效地输出符合论文投稿要求的图形。&lt;/p&gt;
&lt;h1&gt;准备知识&lt;/h1&gt;
&lt;h2 id=&quot;颜色模式&quot;&gt;颜色模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;印刷：CMYK，印刷三原色（青品黄），叠加变暗 —&amp;gt; 打
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="学术出版" scheme="http://lix90.github.io/tags/%E5%AD%A6%E6%9C%AF%E5%87%BA%E7%89%88/"/>
    
      <category term="统计图表" scheme="http://lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8/"/>
    
      <category term="Illustrator" scheme="http://lix90.github.io/tags/Illustrator/"/>
    
      <category term="Photoshop" scheme="http://lix90.github.io/tags/Photoshop/"/>
    
      <category term="Inkscape" scheme="http://lix90.github.io/tags/Inkscape/"/>
    
      <category term="矢量图" scheme="http://lix90.github.io/tags/%E7%9F%A2%E9%87%8F%E5%9B%BE/"/>
    
      <category term="位图" scheme="http://lix90.github.io/tags/%E4%BD%8D%E5%9B%BE/"/>
    
      <category term="Lab" scheme="http://lix90.github.io/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-14</title>
    <link href="http://lix90.github.io/2016/11/14/2016-11-14-daily/"/>
    <id>http://lix90.github.io/2016/11/14/2016-11-14-daily/</id>
    <published>2016-11-13T16:00:00.000Z</published>
    <updated>2016-11-19T03:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1>R</h1>
<p>Mode &amp; Type</p>
<p>Mode 由 <code>mode</code> 获得<br>
Type 由 <code>typeof</code> 获得</p>
<p>在 R 中，模式（Mode）与类型（Type）具有相同的名称集，除了以下例外：</p>
<ul>
<li>类型 <code>integer</code> 和 <code>double</code> 的模式均为 <code>numeric</code></li>
<li>类型 <code>special</code> <code>builtin</code> 的模式均为 <code>function</code></li>
<li>类型 <code>symbol</code> 返回模式 <code>name</code></li>
<li>类型 <code>language</code> 返回为 <code>(</code> 或 <code>call</code></li>
</ul>
<hr>
<h1>鸟哥 Linux 私房菜学习记录</h1>
<h2 id="计算机概论">计算机概论</h2>
<p>三大部分：输入单元、主机、输出单元。<br>
五大部分：输入、输出、CPU 控制单元、CPU 算数逻辑单元与内存。</p>
<p>中央处理器（Central Processing Unit, CPU），含有微指令集。主机的功能与 CPU 是否具有相关内置的微指令集。<br>
CPU 内分为两个主要单元：</p>
<ul>
<li>算数逻辑单元：负责程序运算与逻辑判断</li>
<li>控制单元：协调各周边元件与各单元间的工作</li>
</ul>
<p>CPU 从内存中读取数据，内存中的数据从输入单元传入。CPU 处理完毕的数据必须先写回内存，然后才从内存传输到输出单元。</p>
<p>五大单元：输入单元+{系统单元：[CPU：(控制单元+算数逻辑单元)]+内存}+输出单元+外部储存装置</p>
<p>以上所有单元均由 CPU 内部的控制单元负责协调。</p>
<p>两种 CPU 架构：</p>
<ul>
<li>精简指令集（Reduced Instruction Set Computer, RISC）</li>
<li>复杂指令集（Complex Instruction Set Computer, CISC）</li>
</ul>
<p>RISC：较为精简，每个指令的执行时间都很短，完成动作很单纯，执行性能较佳。若要做复杂的事情，则需多个指令来完成。<br>
CISC：每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度不相同。由于指令执行较为复杂，所以每条指令花费时间较长，但每条指令可以处理的工作较为丰富。大量使用于个人电脑中。</p>
<p>位：CPU 一次数据读取的最大量。64位 CPU 表示一次读写 64bits 的数据，32位则读取 32bits。一般32位 CPU 能读写的最大数据量为 4GB 左右。</p>
<hr>
<h1>Git 学习记录</h1>
<h2 id="sha">SHA</h2>
<p>表示项目历史信息的文件由40个字符的“对象名（SHA）”来索引。不同内容的两个对象不可能有相同的对象名。</p>
<ul>
<li>快速判断两个对象是否相同；</li>
<li>不同仓库的同样内容存在相同的对象名下；</li>
<li>通过检查对象内容的哈希值和对象名来判断对象内容是否正确。</li>
</ul>
<h2 id="四种类型的对象">四种类型的对象</h2>
<ul>
<li>blob：存储文件数据</li>
<li>tree：类似文件目录，管理 tree 或 blob</li>
<li>commit：标记项目某一个特定时间点的状态，包括一些关于时间点的元数据</li>
<li>tag：标记某一次提交的方法</li>
</ul>
<h2 id="git-与-svn-的区别">Git 与 SVN 的区别</h2>
<p>SVN 使用增量文件系统（Delta storage systems），它们存储每次提交的差异。Git 把每次提交的文件的全部内容（snapshot）都会记录下来。</p>
<hr>
<h1>Emacs</h1>
<h2 id="快捷键设置">快捷键设置</h2>
<p>四种类型的快捷键设置：</p>
<ul>
<li>全局快捷键：<code>(global-set-key (kbd &quot;A&quot;) 'your-command')</code></li>
<li>全局映射键：<code>(define-key key-translation-map (kbd &quot;A&quot;) (kbd &quot;B&quot;))</code></li>
<li>基于 Major-Mode 的局部快捷键：<code>(local-set-key (kbd &quot;A&quot;) 'your-command)</code></li>
<li>基于 Minor-Mode 的局部快捷键：<code>(define-key your-minor-mode-map (kbd &quot;A&quot;) 'your-command)</code></li>
</ul>
<p>删除或禁用键：<code>(global/local-unset-key (kbd &quot;A&quot;))</code> <code>(global/local-set-key (kbd &quot;A&quot;) 'ignore/nil)</code></p>
<p>解决键冲突</p>
<ul>
<li>暴力映射：<code>define-key key-translation-map</code></li>
<li>映射到新的 prefix 键上，再全局或者局部设置键。</li>
</ul>
<p>宏与函数的区别：函数的参数是在传入时 eval，而宏则是传入并展开后再 eval。<br>
快捷键的优先级：<code>key-translation-map &gt; minor-mode-map &gt; local-set-key &gt; global-set-key</code><br>
在设置局部键时，需写出相应的代理映射键（prefix）。</p>
<p>说明：整理自Emacs（微信公众号）文章《那就从妖艳酷炫的快捷键开始吧！（一）》</p>
<h2 id="符号">: &amp; 符号</h2>
<ul>
<li><code>:foo</code> 在 Emacs Lisp 中是 <code>keyword symbol</code></li>
<li>在 <code>use-package</code> 中被用作 <code>keyword arguments</code></li>
<li><code>&amp;optional</code> 指定的形参是可选的，如果没有指定，则当作 <code>nil</code></li>
<li><code>&amp;rest</code> 指定的形参是可变</li>
</ul>
<blockquote>
<p>宏的实参不会在宏被求值的时候立刻求值，而是会被当做数据直接传递给宏。因此宏可以自己决定那些代码在什么时候被求值。</p>
</blockquote>
<p>参考 emacs-china 社区<a href="https://emacs-china.org/t/emacslisp/1566" target="_blank" rel="external">问答</a></p>
<hr>
<h1>数据挖掘</h1>
<p>在数据挖掘中，理解数据、检查数据，对数据进行预处理至关重要。</p>
<h2 id="数据理解">数据理解</h2>
<ul>
<li>明确数据记录的详细程度</li>
<li>确定研究群体：用户群，受众；“群体”可以是事物，如电影。</li>
<li>理解每个变量的含义：与业务目标无关的变量可直接剔除（冗余变量）。</li>
</ul>
<h2 id="变量类型">变量类型</h2>
<ul>
<li>分类变量：名义变量和定序变量。</li>
<li>数值变量：只有在代数运算下有意义的变量才是数值型变量。</li>
</ul>
<p>许多数据挖掘模型不能直接处理分类自变量，此时需要将分类变量转换成数值变量。对于名义自变量，常用的转换方法是构造0-1型哑变量。当名义变量有 K 个类别取值时，需要构造 K-1 个哑变量。<strong>名义变量取值过多会生成太多的哑变量，此时可能造成模型的过度拟合。</strong></p>
<p>在有些情况下，数值变量需要转换成分类变量，此时需要用到“数据分箱”的方法。</p>
<p><strong>数据分箱</strong></p>
<ul>
<li>通过取值范围转换成不同类别可以有效平滑数据，降低误差；</li>
<li>对于某些算法（如决策树），数据分箱可以提高算法效率；</li>
<li>有些模型算法（如关联规则）只能处理分类型自变量。</li>
</ul>
<p>数据分箱可以使用每个分箱内的均值、中位数、临界值等作为这个类别的代表值，也可以直接将不同取值范围定义成不同的类别。</p>
<p><strong>常见的数据分箱方法</strong></p>
<ul>
<li>等宽分箱：将变量取值范围划分成等宽的几个区间。</li>
<li>等频分箱：按变量取值的分位数进行划分。</li>
<li>基于k均值聚类的分箱：将所有数据进行k均值聚类，所得类别即为不同的分箱。</li>
<li>其他分箱：如使分箱后的结果达到最小熵或最小描述长度等。</li>
</ul>
<h2 id="质量检查">质量检查</h2>
<p>一般来说，质量检查包括检查每个变量的缺失程度和取值范围的合理性。</p>
<h3 id="缺失检查">缺失检查</h3>
<ul>
<li><strong>有些缺失是合理的</strong>，但是对于这种缺失值，很难判断缺失的原因。</li>
<li>**对于不允许缺失的变量，必须进行相应处理。**如果缺失率过高，例如达到70%，可以考虑剔除。如果比例可以接受，可以尝试插补。</li>
<li><strong>插补的目的是使插补值最大可能接近真实的取值</strong>，如果能从其他途径得到真实值，那么优先选择这种方法。</li>
</ul>
<p>插补方法</p>
<ul>
<li>数值变量可用已观测值的均值、中位数、众数等。</li>
<li>分类变量可用已观测值中比例最高的类别取值进行插补。</li>
<li>还可以选择更复杂的模型插补方法：对被插补变量和其他自变量之间的关系建立统计模型，将模型预测值作为插补值。</li>
</ul>
<h3 id="变量取值合理性检查">变量取值合理性检查</h3>
<ul>
<li>通过判断变量的取值是否超出它应有的取值范围，可以简单的对异常值进行甄别。</li>
<li>根据变量之间的相互关系进行判断。</li>
</ul>
<p>说明：整理自狗熊会（微信公众号）文章《灰常数据挖掘|数据理解和预处理》</p>
<hr>
<h1>交互设计：按钮</h1>
<h2 id="让按钮看起来像按钮">让按钮看起来像按钮</h2>
<p>视觉线索让人确定部件的可点击特性。在可点击的元素上使用合适的视觉线索使得它们看起来想按钮。</p>
<h3 id="形状">形状</h3>
<ul>
<li>比较保险的是使用方形，圆角方形。</li>
<li>在使用其他特别的形状，例如圆形、三角形，或者其他图形时，得确保用户能将其当作按钮。</li>
<li>无论使用什么形状，<strong>确保界面控件的一致性</strong>，这样用户才能识别处所有的元素为按钮。</li>
</ul>
<h3 id="阴影和高光">阴影和高光</h3>
<p>阴影可以让元素从背景中凸显出来，更容易识别为可点击的元素，看起来像真实的可以被按下去的按钮。</p>
<h2 id="清晰地标记按钮">清晰地标记按钮</h2>
<p>用户容易忽视没有清晰的含义的界面元素。所以，界面中的按钮应该有合适的标签或者图标。但是，需遵循最小装饰原则。</p>
<h3 id="清晰的标签">清晰的标签</h3>
<p>按钮上的标签应该与用户将要执行的动作有关联，告知用户点击按钮所要执行的行为。<br>
动作按钮应该向用户声明当前任务是什么，这样用户在点击按钮时知道会发生什么。</p>
<h2 id="将按钮放置到用户容易找到的地方">将按钮放置到用户容易找到的地方</h2>
<h3 id="位置和顺序">位置和顺序</h3>
<ul>
<li>如果开发原生 app，则需遵循开发平台的图形界面指南。</li>
<li>如果是基于网页的 app，应该思考哪个位置对用户使用起来最有效。</li>
<li>如果设计移动导航栏，有必要关注下按钮位置的最佳实践。&gt;&gt;&gt; <a href="https://www.smashingmagazine.com/2016/11/the-golden-rules-of-mobile-navigation-design/" target="_blank" rel="external">The Golden Rules Of Bottom Navigation Design</a></li>
</ul>
<h2 id="让用户轻而易举地点击按钮">让用户轻而易举地点击按钮</h2>
<h3 id="尺寸和内边距">尺寸和内边距</h3>
<p>需要考虑相对页面上其他元素来确定按钮的尺寸。</p>
<blockquote>
<p>When a tap is used as a primary input method for your app or site, you can rely on the <a href="http://touchlab.mit.edu/publications/2003_009.pdf" target="_blank" rel="external">MIT Touch Lab</a> study to choose a proper size for your buttons. This study found that the average size of finger pads are between 10–14mm and fingertips are 8–10mm, making 10mm x 10mm a good minimum touch target size. When a mouse and keyboard are the primary input methods, button measurements can be slightly reduced to accommodate dense UIs.</p>
</blockquote>
<h3 id="提供视觉反馈">提供视觉反馈</h3>
<p>按钮具有多个状态，通过提供视觉反馈来提示用户按钮的当前状态。<a href="">Material Design</a> 清晰展示了不同的按钮状态：Normal, Focused, Pressed, Disabled。</p>
<h2 id="在视觉上强调最重要的按钮">在视觉上强调最重要的按钮</h2>
<p>确保在设计中，对主要的或者最重要的动作进行了强调。使用颜色和对比度可以让用户聚焦于动作之上，并且将按钮放置于最显眼的位置。</p>
<h3 id="call-to-action-button">Call-to-Action Button</h3>
<p>Call-to-Action Button：吸引用户注意力并且引诱用户去点击的按钮。创建一个有效的 call-to-action 按钮，需要使用与背景有高对比度的颜色，并且将按钮放置于用户使用路径上。</p>
<h3 id="让首要的和次要的按钮具有视觉区分度">让首要的和次要的按钮具有视觉区分度</h3>
<ul>
<li>首要的与积极事件/动作关联的按钮应该有较强的视觉权重。</li>
<li>次要的事件/动作，例如“取消”或“退回”，应该具有较弱的视觉权重。</li>
</ul>
<h2 id="按钮设计清单">按钮设计清单</h2>
<ul>
<li>用户将元素识别为按钮了吗？</li>
<li>按钮的标签传递了清晰的含义了吗？</li>
<li>用户能容易地找到按钮吗？</li>
<li>如果在界面中有两个或多个按钮，最重要的是否具有最强的视觉权重？</li>
</ul>
<p>说明：笔记整理来自<a href="https://www.smashingmagazine.com/2016/11/a-quick-guide-for-designing-better-buttons/?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=rss" target="_blank" rel="external">Smashing Magazine: A Quick Guide For Designing Better Buttons</a></p>
<hr>
<h1>杂项</h1>
<ul>
<li><a href="http://webpro.github.io/programming-principles/" target="_blank" rel="external">Programming Principles</a> 编程原则</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;R&lt;/h1&gt;
&lt;p&gt;Mode &amp;amp; Type&lt;/p&gt;
&lt;p&gt;Mode 由 &lt;code&gt;mode&lt;/code&gt; 获得&lt;br&gt;
Type 由 &lt;code&gt;typeof&lt;/code&gt; 获得&lt;/p&gt;
&lt;p&gt;在 R 中，模式（Mode）与类型（Type）具有相同的名称集，除了
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Data science" scheme="http://lix90.github.io/tags/Data-science/"/>
    
      <category term="Git" scheme="http://lix90.github.io/tags/Git/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="计算机概论" scheme="http://lix90.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/"/>
    
      <category term="Data mining" scheme="http://lix90.github.io/tags/Data-mining/"/>
    
      <category term="数据预处理" scheme="http://lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
      <category term="交互设计" scheme="http://lix90.github.io/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="UI" scheme="http://lix90.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>R：加载包</title>
    <link href="http://lix90.github.io/2016/11/13/2016-11-13-daily/"/>
    <id>http://lix90.github.io/2016/11/13/2016-11-13-daily/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1>R: library &amp; require</h1>
<p>谢一辉有<a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">一篇博文</a>讨论了 <code>library</code> 和 <code>require</code> 两个函数的区别和误用。其实在文档中已经说明了两者的差别。虽然都可以载入 R 包，但是 <code>require</code> 等于是<strong>尝试</strong>加载包，并返回一个逻辑值，以反映是否加载成功。也就是说，无论是否以安装需要加载的包，<code>require</code> 都能正常执行。只不过 <code>require</code> 会出现警告“不存某个包”。而 <code>library</code> 是直接加载包，如果包不存在，那么就报错，停止执行后面的代码。所以，如果需要加载包，直接使用 <code>library</code> 即可，不需要 <code>require</code> 来画蛇添足。不过 <code>require</code> 有个好处，可以用来检测是否存在某个包，如果不存在，那么就安装。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pkg &lt;- <span class="string">"lix"</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">require</span>(pkg)) &#123;</div><div class="line">  print(paste0(<span class="string">"Cool! You load "</span>, pkg, <span class="string">"."</span>))</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  print(paste0(<span class="string">"Trying to install "</span>, pkg, <span class="string">"."</span>))</div><div class="line">  install.packages(pkg)</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">require</span>(pkg)) &#123;</div><div class="line">    print(paste0(pkg, <span class="string">" installed and loaded."</span>))</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">stop</span>(paste0(<span class="string">"Could not install "</span>, pkg, <span class="string">"."</span>))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，同样地，<code>library</code> 也可以返回逻辑值，通过参数 <code>logical.return = TRUE</code> 实现。但是仍然会给出警告 <code>Warning message</code>。嫌烦可以使用 <code>suppressWarnings</code> 来阻止警告的出现。事实上，看 <code>require</code> 的源码发现 <code>require</code> 本身就是调用的 <code>library</code>。所以说在加载包时，选择 <code>library</code> 肯定是更恰当的。<code>require</code> 只不过加了一层检测机制。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">value &lt;- <span class="keyword">tryCatch</span>(<span class="keyword">library</span>(package, lib.loc = lib.loc, </div><div class="line">                          character.only = <span class="literal">TRUE</span>, logical.return = <span class="literal">TRUE</span>, warn.conflicts = warn.conflicts, </div><div class="line">                          quietly = quietly), error = <span class="keyword">function</span>(e) e)</div></pre></td></tr></table></figure>
<p>对于加载函数，谢老大在<a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">那篇博文</a>中的评论中提到了一点经验，对于仅仅使用一个包中的一两个函数适合于使用 <code>pkg::func</code> 的形式调用函数。因为加载太多包会“污染”命名空间。</p>
<p>参考</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5595512/what-is-the-difference-between-require-and-library" target="_blank" rel="external">StackOverflow: What is the difference between require() and library()?</a></li>
<li><a href="http://yihui.name/en/2014/07/library-vs-require/" target="_blank" rel="external">Yihui: library() vs require() in R</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;R: library &amp;amp; require&lt;/h1&gt;
&lt;p&gt;谢一辉有&lt;a href=&quot;http://yihui.name/en/2014/07/library-vs-require/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇博文&lt;/a&gt;讨
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
  </entry>
  
  <entry>
    <title>个人资源长期整理</title>
    <link href="http://lix90.github.io/2016/11/13/wiki/"/>
    <id>http://lix90.github.io/2016/11/13/wiki/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-12-10T16:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>活在一个信息社会，信息越来越繁杂，必须不断整理和精简。这个页面仅用于整理个人在学习和娱乐过程中所遇到的非常好的在线资源的整理。方便自己重新回顾和反复查阅。</p>
<h1>社区</h1>
<p>数据科学<br>
<a href="https://ropensci.org/" target="_blank" rel="external">rOpenSci</a> | <a href="https://rweekly.org" target="_blank" rel="external">Rweekly</a> | <a href="http://cos.name/" target="_blank" rel="external">统计之都</a></p>
<p>技术社区<br>
<a href="https://ruby-china.org/" target="_blank" rel="external">Ruby China</a> | <a href="http://python-china.org/" target="_blank" rel="external">Python China</a> | <a href="https://cnodejs.org/" target="_blank" rel="external">Node.js中文社区</a> | <a href="https://emacs-china.org/" target="_blank" rel="external">Emacs China</a> | <a href="http://gold.xitu.io/welcome" target="_blank" rel="external">掘金：高质量的技术社区</a></p>
<p>其他社区<br>
<a href="http://liqi.io/" target="_blank" rel="external">利器：创造者和他们的工具</a> | <a href="http://yizaoyiwan.com/" target="_blank" rel="external">一早一晚 | 自由工作社区</a></p>
<h1>播客</h1>
<p><a href="https://ipn.li/" target="_blank" rel="external">IPN</a> | <a href="https://codetimecn.com/" target="_blank" rel="external">代码时间</a> | <a href="http://teahour.fm/" target="_blank" rel="external">Teahour.fm</a><br>
<a href="http://podcast.uxcoffee.co/" target="_blank" rel="external">UX Coffee 设计咖</a> | <a href="http://nyshalong.com/" target="_blank" rel="external">纽约文化沙龙</a></p>
<h1>可视化</h1>
<p><a href="http://djchina.org/" target="_blank" rel="external">数据新闻网</a> | <a href="http://flowingdata.com/" target="_blank" rel="external">FlowingData</a><br>
<a href="http://www.visualisingdata.com/" target="_blank" rel="external">VisualisingData</a> | <a href="http://blogger.ghostweather.com/" target="_blank" rel="external">Ghostweather R&amp;D Blog</a><br>
<a href="http://infosthetics.com/information_aesthetics_about.html" target="_blank" rel="external">Information Aesthetics</a> | <a href="http://junkcharts.typepad.com/junk_charts/" target="_blank" rel="external">Junk Charts</a><br>
<a href="http://lisacharlotterost.github.io/" target="_blank" rel="external">Lisa Charlotte Rost</a> | <a href="http://vis4.net/blog/" target="_blank" rel="external">vis4.net</a><br>
<a href="http://blog.plot.ly/" target="_blank" rel="external">Plotly Blog</a> | <a href="http://vallandingham.me/" target="_blank" rel="external">Jim Vallandingham</a></p>
<h1>工具</h1>
<ul>
<li><a href="https://slides.com" target="_blank" rel="external">slides</a> 在线创建演示文档</li>
<li><a href="https://www.gitbook.com/" target="_blank" rel="external">Gitbook</a> &amp; <a href="https://readthedocs.org/" target="_blank" rel="external">Read the Docs</a> 创建在线电子书或文档</li>
<li><a href="https://feedly.com" target="_blank" rel="external">Feedly</a> + <a href="http://reederapp.com/" target="_blank" rel="external">Reeder</a>：Feed 订阅和阅读黄金搭档</li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a>: an API Documentation Browser and Code Snippet Manager</li>
<li><a href="https://github.com/1995eaton/chromium-vim" target="_blank" rel="external">cVim</a>：让 Chrome/Chromium 具有 <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a> 的高效工作模式</li>
</ul>
<!-- ## 心理与行为科学 -->
<!-- - [Babies Learning Language](http://babieslearninglanguage.blogspot.com/)：斯坦福大学发展心理学教授 [Michael Frank](http://langcog.stanford.edu/) 的个人博客。博客文章涵盖 `发展心理学`、`心理学研究方法`、`开放科学` 等主题。 -->
<h1>编程</h1>
<h2 id="python">Python</h2>
<p>环境管理 <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">virtualenv</a> <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="external">virtualenvwrapper</a></p>
<h2 id="clojure">Clojure</h2>
<p><a href="http://clojure-china.org/" target="_blank" rel="external">clojure-china</a></p>
<h1>学习</h1>
<h2 id="r">R</h2>
<p><a href="http://stat545.com/index.html" target="_blank" rel="external">STAT545</a> | <a href="http://socviz.github.io/soc880/" target="_blank" rel="external">Soc 880: Data Visualization with R</a> | <a href="http://grangermoch.com/text-mining-in-r/" target="_blank" rel="external">Text Mining in R</a> | <a href="http://www.ling.upenn.edu/~joseff/rstudy/" target="_blank" rel="external">R Study Group</a></p>
<p><a href="http://rcompanion.org/handbook/" target="_blank" rel="external">Summary and Analysis of Extension Program Evaluation in R</a><br>
<a href="http://rcompanion.org/rcompanion/" target="_blank" rel="external">An R Companion for the Handbook of Biological Statistics</a><br>
<a href="http://www.biostathandbook.com/" target="_blank" rel="external">Handbook of Biological Statistics</a><br>
<a href="https://egret.psychol.cam.ac.uk/statistics/R/index.html" target="_blank" rel="external">Local tips for R</a><br>
<a href="http://gribblelab.org/stats/index.html" target="_blank" rel="external">Introduction to Statistics Using R</a><br>
<a href="http://www.unc.edu/courses/2006spring/ecol/145/001/index.html" target="_blank" rel="external">Ecology 145—Statistical Analysis</a><br>
<a href="http://genomicsclass.github.io/book/" target="_blank" rel="external">PH525x series - Biomedical Data Science</a><br>
<a href="http://www.unh.edu/halelab/BIOL933/schedule.htm" target="_blank" rel="external">BIOL 933: Design, Analysis, and Interpretation of Experiments</a><br>
<a href="http://socserv.socsci.mcmaster.ca/jfox/Courses/soc6z3/index.html" target="_blank" rel="external">Sociology 6Z03 Introduction to Social Statistics</a></p>
<p><a href="http://user2016.org/" target="_blank" rel="external">The R User Conference 2016</a><br>
<a href="http://user2015.math.aau.dk/" target="_blank" rel="external">The R User Conference 2015</a><br>
<a href="http://user2014.stat.ucla.edu/" target="_blank" rel="external">The R User Conference 2014</a><br>
<a href="http://www.edii.uclm.es/~useR-2013/" target="_blank" rel="external">The R User Conference 2013</a></p>
<p><a href="https://onlinecourses.science.psu.edu/stat505/" target="_blank" rel="external">STAT 505 - Applied Multivariate Statistical Analysis</a></p>
<h2 id="c">C</h2>
<p><a href="http://www.crasseux.com/books/ctutorial/" target="_blank" rel="external">The GNU C Programming Tutorial</a><br>
<a href="http://masters-of-the-void.com/" target="_blank" rel="external">Learn C Programming on the Mac</a><br>
<a href="http://www.gribblelab.org/CBootcamp/index.html" target="_blank" rel="external">C Programming Boot Camp</a></p>
<hr>
<h2 id="lisp-elisp">lisp/elisp</h2>
<ul>
<li><a href="http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html" target="_blank" rel="external">一个简短的 elisp (Emacs lisp) 入门教程</a></li>
<li><a href="http://www.newthinktank.com/2015/07/learn-lisp-one-video/" target="_blank" rel="external">一个简短的 lisp 教学视频</a></li>
<li><a href="http://book.emacs-china.org/" target="_blank" rel="external">子龙山人出品：Master Emacs in 21 Days</a></li>
<li><a href="http://smacs.github.io/elisp/" target="_blank" rel="external">水木社区：Emacs Lisp 简明教程</a></li>
<li><a href="https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ" target="_blank" rel="external">Sacha Chua</a> Emacs, Tutorial, Talks, Conversations</li>
<li><a href="https://www.youtube.com/channel/UCkRmQ_G_NbdbCQMpALg6UPg" target="_blank" rel="external">emacsrocks</a></li>
</ul>
<hr>
<p>YoutubeChannel<br>
<a href="https://www.youtube.com/channel/UCOjD18EJYcsBog4IozkF_7w" target="_blank" rel="external">PyData</a><br>
<a href="https://www.youtube.com/channel/UC98CzaYuFNAA_gOINFB0e4Q" target="_blank" rel="external">EuroPython Conference</a><br>
<a href="https://www.youtube.com/channel/UCkhm72fuzkS9fYGlGpEmj7A" target="_blank" rel="external">Enthought</a><br>
<a href="https://www.youtube.com/channel/UCBBd3JxQl455JkWBeulc-9w" target="_blank" rel="external">Berkeley Institute for Data Science</a><br>
<a href="https://www.youtube.com/channel/UCDUS80bdunpmvWVPyFRPqFQ" target="_blank" rel="external">UofU Data</a><br>
<a href="https://www.youtube.com/channel/UCcAtD_VYwcYwVbTdvArsm7w" target="_blank" rel="external">mathematicalmonk’s channel</a><br>
<a href="https://www.youtube.com/channel/UC3xfbCMLCw1Hh4dWop3XtHg" target="_blank" rel="external">RStudio</a><br>
<a href="https://www.youtube.com/channel/UC8xNPQ-3a5t9uMU7Vah-jWA" target="_blank" rel="external">Jeff Leek</a><br>
<a href="https://www.youtube.com/channel/UCdjFpvS8lvT2MJVthOUvlyg" target="_blank" rel="external">Brian Caffo</a><br>
<a href="https://www.youtube.com/channel/UCZA0RbbSK1IXeeJysKYRWuQ" target="_blank" rel="external">Roger Peng</a><br>
<a href="https://www.youtube.com/channel/UCGwuewhdHD2q0BvuB2oWMRw" target="_blank" rel="external">berkeley-scf</a><br>
<a href="https://www.youtube.com/channel/UCpOIUW62tnJTtpWFABxWZ8g" target="_blank" rel="external">Codecourse</a><br>
<a href="https://www.youtube.com/user/learncodeacademy" target="_blank" rel="external">LearnCode.academy</a><br>
<a href="https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ" target="_blank" rel="external">sentdex</a><br>
<a href="https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg" target="_blank" rel="external">LevelUpTuts</a><br>
<a href="https://www.youtube.com/channel/UCFrjdcImgcQVyFbK04MBEhA" target="_blank" rel="external">Brandon Foltz</a><br>
<a href="https://www.youtube.com/user/noobtoprofessional" target="_blank" rel="external">Chris Hawkes</a><br>
<a href="https://www.youtube.com/channel/UCUR1pFG_3XoZn3JNKjulqZg" target="_blank" rel="external">thoughtbot</a></p>
<p>前端开发</p>
<ul>
<li><a href="https://www.youtube.com/channel/UCADyUOnhyEoQqrw_RrsGleA" target="_blank" rel="external">Chris Coyier: CSS-TRICKS</a></li>
<li><a href="https://www.youtube.com/channel/UCyIe-61Y8C4_o-zZCtO4ETQ" target="_blank" rel="external">DevTips</a></li>
<li><a href="https://www.youtube.com/user/QuentinWatt" target="_blank" rel="external">Quentin Watt Tutorials</a></li>
</ul>
<p><a href="https://www.youtube.com/channel/UCSk9gGdqmj-NdcYBQ4kt0jA" target="_blank" rel="external">Tristen Grant</a> Illustration<br>
<a href="https://www.youtube.com/channel/UC3TabHJUsa2BkEkN_xSpMvQ" target="_blank" rel="external">ATypI</a> Topography, Font design<br>
<a href="https://www.youtube.com/channel/UCRoLLb8MnLX-P_xg-Z-UxqQ" target="_blank" rel="external">Design Driven NYC</a> Talks<br>
<a href="https://www.youtube.com/channel/UCfWZwsP8trUy5uHJg8gcGIQ" target="_blank" rel="external">Mackenzie Child</a> Graphic Design<br>
<a href="https://www.youtube.com/channel/UCK_vX6MneWKCLtL0uJwYOxQ" target="_blank" rel="external">Carl Kwan</a> Presentation, Content</p>
<p><a href="https://www.youtube.com/channel/UClh-kVGih16yME0-jp3pzVg" target="_blank" rel="external">Sydney Opera House Talks &amp; Ideas</a> Talks, Ideas, and Whatever!<br>
<a href="https://www.youtube.com/channel/UCWE-aBusAC3UauYLQna7JNQ" target="_blank" rel="external">Shalong NY</a> Talks 纽约文化沙龙</p>
<p>Playlist<br>
<a href="https://www.youtube.com/user/dataschool/playlists?shelf_id=4&amp;view=50&amp;sort=dd" target="_blank" rel="external">Introduction to Statistical Learning</a></p>
<h1>工作流</h1>
<ul>
<li>Create a static presentation: R + Rstudio + Rmarkdown + Revealjs</li>
<li>Create a interactive presentation: R + Rstudio + Shiny</li>
</ul>
<h1>MacOS 使用记录</h1>
<p><strong>scutil 管理系统配置参数</strong>：包括获取和设置计算机名，主机名等，还可以返回 dns, proxy 等参数。详情 <code>man scutil</code>。</p>
]]></content>
    
    <summary type="html">
    
      个人文档整理页面。
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="Wiki" scheme="http://lix90.github.io/categories/Original/Wiki/"/>
    
    
      <category term="How-to-learn" scheme="http://lix90.github.io/tags/How-to-learn/"/>
    
      <category term="Wiki" scheme="http://lix90.github.io/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-12</title>
    <link href="http://lix90.github.io/2016/11/12/2016-11-12-daily/"/>
    <id>http://lix90.github.io/2016/11/12/2016-11-12-daily/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1>R</h1>
<h2 id="detach-attach"><code>detach</code> &amp; <code>attach</code></h2>
<p><code>attach</code></p>
<p>将数据或对象加载到 <code>search path</code> 中。这意味着数据库中可以查找到某对象，从而可以通过名称访问。当计算一个变量或者函数名时，R 需要从 <code>search</code> 列出的数据库名单中搜索。第一个匹配的对象将被使用。当 <code>attach</code> 一个 data frame 或者 list 到 search path，可以仅仅通过名称来访问 data frame 或 list 中的变量，而不需要被当作 data frame 或者 list 的成分。默认情况下，数据库会被 attach 到 search path 中的第二个位置，即 <code>pos = 2</code>，位于用户的 workspace（工作空间）之后，在所有前面 attach 过的包和数据库之前。但是 attach 的位置可以通过参数 <code>pos</code> 指定，但是无法指定到 <code>pos = 1</code>，因为被工作空间占用。事实上，数据库并没有被加载，而是在搜索路径创建了新的环境。list 中的元素或者 data frame 中的列，或者保存文件和环境中的对象被拷贝至新环境中。</p>
<p><code>attach</code> 在使用过程中存在副作用，即改变搜索路径，人们总是容易忘记 <code>detach</code>。在交互式使用中，<code>with</code> 相比 <code>attach/detach</code> 更可取。除非需要加载存储文件，用作 <code>load</code> 的一个封装。在编程中，函数不应该随意改变搜索路径。所以 <code>with</code> 经常被用在函数中。</p>
<p><code>detach</code></p>
<ul>
<li>将对象从 <code>search path</code> 中移除。对象包括 <code>attach</code> 过的 <code>data.frame</code> 和 package。</li>
<li>当没有给 <code>detach()</code> 输入参数将会移除 <code>search path</code> 中的第一个项目。</li>
<li>应该避免在函数中使用 <code>detach/attach</code>。</li>
<li>在控制台和脚本中使用时，应该用对象名称来 <code>detach</code>（而不是 <code>pos</code>）。</li>
</ul>
<h2 id="整数型数值">整数型数值</h2>
<p><code>1L</code> 为 <code>integer</code>；<code>1</code> 为 <code>numeric</code>。即 <code>L</code> 用于声明这个数值为整数型。因为在 R 中整数为 32-bit 的长整型，所以使用 <code>L</code> 指代这样的数据类型。</p>
<h1>杂项</h1>
<p>JavaScript：DOM &amp; BOM</p>
<blockquote>
<p>The BOM consists of the objects navigator, history, screen, location and document which are children of window. In the document node is the DOM, the document object model, which represents the contents of the page. You can manipulate it using javascript. （“node is in the DOM tree” or “node is the smallest unit in the DOM tree” or “nodes compose the DOM tree”）</p>
</blockquote>
<ul>
<li><a href="http://stackoverflow.com/questions/4416317/what-is-the-dom-and-bom-in-javascript" target="_blank" rel="external">Stackoverflow: What is the DOM and BOM in JavaScript?</a></li>
<li><a href="https://vkanakaraj.wordpress.com/2009/12/18/javascript-vs-dom-vs-bom-relationship-explained/" target="_blank" rel="external">JavaScript Vs DOM Vs BOM, relationship explained</a></li>
</ul>
<p>HTTP：HTTP 是 web 的核心，也是动态 web 应用的核心。理解 HTTP 是理解现代 web 应用如何工作和如何构建的核心。</p>
<p>数据库的五个基本单位：数据库服务器，数据库，数据表，数据字段（数据列），数据行。</p>
<p>三类 SQL 语句：</p>
<ul>
<li>数据定义语言：定义不同的数据段、数据库、表、列、索引等。常用关键字：<code>create</code> <code>drop</code> <code>alter</code>。</li>
<li>数据操作语言：用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用关键字：<code>insert</code> <code>delete</code> <code>update</code> <code>select</code>。</li>
<li>数据控制语言：用于控制不同数据段直接的许可和访问级别。常用关键字：<code>grant</code> <code>revoke</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;R&lt;/h1&gt;
&lt;h2 id=&quot;detach-attach&quot;&gt;&lt;code&gt;detach&lt;/code&gt; &amp;amp; &lt;code&gt;attach&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;attach&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将数据或对象加载到 &lt;code&gt;search pa
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="SQL" scheme="http://lix90.github.io/tags/SQL/"/>
    
      <category term="HTTP" scheme="http://lix90.github.io/tags/HTTP/"/>
    
      <category term="DOM" scheme="http://lix90.github.io/tags/DOM/"/>
    
      <category term="BOM" scheme="http://lix90.github.io/tags/BOM/"/>
    
      <category term="Data base" scheme="http://lix90.github.io/tags/Data-base/"/>
    
  </entry>
  
  <entry>
    <title>男士衬衫穿搭技巧</title>
    <link href="http://lix90.github.io/2016/11/11/2016-11-11-life-shirt/"/>
    <id>http://lix90.github.io/2016/11/11/2016-11-11-life-shirt/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>临近求职，即将从学生狗迈入“社会”，需要关注下着装和生活品味。个人喜欢将看起来不严肃的事情也当做很“正经”的事情学习研究一番，这篇笔记便是最好的见证。</p>
<h1>男士衬衫穿搭技巧</h1>
<h2 id="正装衬衫">正装衬衫</h2>
<h3 id="挑选技巧">挑选技巧</h3>
<ol>
<li>合身：首要条件务必合身。</li>
<li>版型：</li>
</ol>
<ul>
<li><strong>Slim</strong> 腰线挺拔</li>
<li><strong>Regular</strong> 严肃商务风</li>
<li><strong>Full</strong> 宽容，适合较胖的人</li>
</ul>
<ol start="3">
<li>颜色：白色严肃，适合最正式及重要场合；次重要场合可以选蓝色和灰色。</li>
</ol>
<h3 id="搭配技巧">搭配技巧</h3>
<ol>
<li>白衬衫谨慎单穿：对身材要求高；故可做正装内搭；单穿宜选择蓝灰。</li>
<li>搭配灰色或海军蓝的西装：黑色适合场合较少，比较沉闷和老气。</li>
<li>正装衬衫也可以在非正式场合穿：例如，搭配不沉闷的领带。也可以把休闲商务内搭换成正装衬衫。</li>
</ol>
<h2 id="牛津纺衬衫">牛津纺衬衫</h2>
<blockquote>
<p>牛津纺一般由白色和其他颜色的纱线交织而成。白色的加入，会在视觉上弱化了另一颜色的色度，形成的特殊“点状肌理”，使整体的色调更加柔和，这也是牛津纺最吸引人之处。<br>
牛津纺衬衫的适用性非常强，既可上班，亦可休闲，并往往能体现穿着者儒雅、斯文的一面。</p>
</blockquote>
<h3 id="搭配技巧-v2">搭配技巧</h3>
<ol>
<li>衬衫下摆处理：牛津纺适合单穿，在不同场合可以考虑是否将下摆包进裤子里。
<ul>
<li>日常工作场合，可以考虑穿着蓝色、灰色等明度低的牛津纺衬衫，下摆包进裤子。可搭配一条卡其裤/西裤，和一双与之搭配的鞋子。</li>
<li>工作之余下摆可以不用包进裤子，但这种情况下，下摆不宜过长。合适的下摆有利于调整身材比例。</li>
</ul>
</li>
<li>牛津纺色调较柔和，可以尝试多种颜色：白蓝为百搭；粉红色适合偏瘦的人；马卡龙绿、桃红适合沙滩、度假等休闲场合。</li>
<li>无敌内搭单品：虽百搭，但与之绝配的是针织衫/毛衣。还可以搭配外套或夹克。</li>
</ol>
<h2 id="格子衬衫">格子衬衫</h2>
<h3 id="挑选原则">挑选原则</h3>
<ol>
<li>小格子：大格子衬衫是屌丝感的罪魁祸首。</li>
<li>颜色鲜而柔和</li>
</ol>
<blockquote>
<p>小格子可以穿出文艺温柔的感觉，鲜亮而柔和的颜色避免了深色线条的粗硬感；另外小格子衬衫可把扣子全扣上穿出一种精致感。</p>
</blockquote>
<h3 id="搭配技巧-v3">搭配技巧</h3>
<p>格子衬衫单穿对衬衫及个人气质要求相对高，但内搭比较容易穿出彩。</p>
<p>格子衬衫搭配需要遵循2个原则：</p>
<ol>
<li>同色系：搭配的其他单品最好呼应其中的颜色，而不要给造型新增颜色。</li>
<li>简约（Simple）：搭配单品尽量保持 simple（纯色、无花纹）</li>
</ol>
<p>技巧：</p>
<ol>
<li>内搭纯白 Tee：选择跟格子颜色相关的裤子。</li>
<li>绑在腰上，作为造型装饰。</li>
<li>内搭：西装、马甲、皮衣都非常合适。
<ul>
<li>西装：可不需要格子衬衫与西装色系呼应，可以大胆撞色。</li>
<li>马甲：化解了单穿格子衬衫的难度。</li>
</ul>
</li>
<li>如何化解深色大格子衬衫的屌丝既视感：搭配牛仔外套，将衬衫内搭，其他单品遵循同色系、simple两个原则。</li>
</ol>
<h2 id="牛仔衬衫">牛仔衬衫</h2>
<p>牛仔衬衫包括两种风格：</p>
<ol>
<li>阳刚不羁：牛仔布厚实、织纹清晰，加上洗水工艺</li>
<li>优雅清新：牛仔布细密柔软，水洗致颜色柔和</li>
</ol>
<h3 id="搭配技巧-v4">搭配技巧</h3>
<ol>
<li>单穿、外穿牛仔衬衫：让牛仔衬衫成为主角！
<ul>
<li>下身可搭配深色牛仔裤、卡其裤、中长靴；</li>
<li>避免同牛仔衬衫颜色接近的牛仔裤；</li>
</ul>
</li>
<li>内搭：可搭配棒球外套、皮衣和针织衫。</li>
<li>搭配军绿色单品：军绿色风格与天然有着硬朗感的牛仔衬衫风格匹配。</li>
</ol>
<h2 id="个人总结">个人总结</h2>
<ul>
<li>正式场合颜色和面料宜淡雅</li>
<li>分清主配角</li>
<li>灵活运用加减法</li>
<li>一定要考虑身材和场合</li>
<li>正装衬衫可以和休闲单品搭配，但休闲款谨慎当正装穿</li>
<li>你柔我柔，你刚我刚</li>
<li>没有完美的单品，单穿还是内外搭，需具体分析</li>
</ul>
<hr>
<p>该博文总结浓缩于<a href="https://www.douban.com/note/513750015/" target="_blank" rel="external">这篇文章</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;临近求职，即将从学生狗迈入“社会”，需要关注下着装和生活品味。个人喜欢将看起来不严肃的事情也当做很“正经”的事情学习研究一番，这篇笔记便是最好的见证。&lt;/p&gt;
&lt;h1&gt;男士衬衫穿搭技巧&lt;/h1&gt;
&lt;h2 id=&quot;正装衬衫&quot;&gt;正装衬衫&lt;/h2&gt;
&lt;h3 id=&quot;挑选技巧&quot;&gt;挑
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="Life style" scheme="http://lix90.github.io/tags/Life-style/"/>
    
      <category term="Shirt" scheme="http://lix90.github.io/tags/Shirt/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-10</title>
    <link href="http://lix90.github.io/2016/11/10/2016-11-10-daily/"/>
    <id>http://lix90.github.io/2016/11/10/2016-11-10-daily/</id>
    <published>2016-11-09T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Ruby：修改 RubyGems 镜像</h1>
<p>在此使用较新的 RubyGems 版本，建议 2.6.X 以上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gem update --system # 需要翻墙</div><div class="line">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class="line">$ gem sources -l</div><div class="line">https: //gems.ruby-china.org</div><div class="line"># 确保只有以上一项</div></pre></td></tr></table></figure>
<p>如果使用 Gemfile 和 Bundle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org</div></pre></td></tr></table></figure>
<p>参考网址：<a href="https://gems.ruby-china.org/" target="_blank" rel="external">https://gems.ruby-china.org/</a></p>
<h1>杂项</h1>
<ul>
<li><a href="https://www.datacamp.com/community/blog/python-pandas-cheat-sheet" target="_blank" rel="external">Pandas Cheat Sheet for Data Science in Python</a></li>
</ul>
<p>几篇关于统计显著性和统计显著性水平 p 值的论文和讨论：</p>
<ul>
<li><a href="http://stats.stackexchange.com/questions/134890/is-p-value-essentially-useless-and-dangerous-to-use" target="_blank" rel="external">Cross Validated: Is p-value essentially useless and dangerous to use?</a></li>
<li>Wasserstein, R. L., &amp; Lazar, N. A. (2016). The ASA’s statement on p-values: context, process, and purpose. The American Statistician.</li>
<li>Nuzzo, R. (2014). Statistical errors. Nature, 506(7487), 150-152.</li>
<li>Greenland, S., Senn, S. J., Rothman, K. J., et al. (2016). Statistical tests, P values, confidence intervals, and power: a guide to misinterpretations. European journal of epidemiology, 1-14.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Ruby：修改 RubyGems 镜像&lt;/h1&gt;
&lt;p&gt;在此使用较新的 RubyGems 版本，建议 2.6.X 以上。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="P-value" scheme="http://lix90.github.io/tags/P-value/"/>
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="Configuration" scheme="http://lix90.github.io/tags/Configuration/"/>
    
      <category term="Ruby" scheme="http://lix90.github.io/tags/Ruby/"/>
    
      <category term="Pandas" scheme="http://lix90.github.io/tags/Pandas/"/>
    
      <category term="统计显著性" scheme="http://lix90.github.io/tags/%E7%BB%9F%E8%AE%A1%E6%98%BE%E8%91%97%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>R：处理缺失值</title>
    <link href="http://lix90.github.io/2016/11/09/2016-11-09-r-missing-value-outlier/"/>
    <id>http://lix90.github.io/2016/11/09/2016-11-09-r-missing-value-outlier/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近在分析毕业论文数据，顺便复习和学习新的数据分析方法，本文纯属搬运和整理他人的分享。</p>
<h1>缺失值处理</h1>
<p><code>mice</code> 包是专门用来处理缺失值的 R 语言包。可以通过 <code>mice::md.pattern()</code> 查看缺失值的“数据模式”。</p>
<h2 id="删除记录-样本">删除记录/样本</h2>
<p>在 R 中，通过 <code>na.action = na.omit</code> 删除包含有缺失值的观测行。但需要满足两个条件：</p>
<ul>
<li>有足够的样本点；</li>
<li>不会引入偏差。</li>
</ul>
<h2 id="删除变量-属性">删除变量/属性</h2>
<p>如果数据集中某个特定变量包含较多的缺失值，并且删除这个变量能够保留更多的观测值。如果该变量不太重要，那么可以删除它。该方法需要权衡变量的重要性和观测值数量。</p>
<h2 id="使用均值-中位数-众数进行插补">使用均值/中位数/众数进行插补</h2>
<p>这是一种比较简单粗暴的方法，如果该变量对因变量的影响较小，该方法是可以接受的。但是，很可能人为增加噪音。</p>
<h2 id="预测法">预测法</h2>
<p>可使用的方法包括：KNN差值，rpart包，mice包。</p>
<h3 id="knn-差值法">kNN 差值法</h3>
<p><code>DMwR::knnImputation()</code> 函数使用 k 近邻方法来填充缺失值。</p>
<blockquote>
<p>具体过程如下：对于需要插值的记录，基于欧氏距离计算k个和它最近的观测。接着将这k个近邻的数据利用距离逆加权算出填充值，最后用该值替代缺失值。</p>
</blockquote>
<h3 id="rpart">rpart</h3>
<p>kNN 插值法的缺点对因子类变量的插补效果不好。rpart 的优点是只需一个未缺失值就可以填充整个数据样本。</p>
<h3 id="mice">mice</h3>
<blockquote>
<p>mice 是链式方程多元插值的简写（Multivariate Imputation by Chained Equations）。mice包提供了多种先进的缺失值处理方法。它使用一种不同寻常的方法来进行两步插值：首先利用mice函数建模再用complete函数生成完整数据。mice(df)会返回df的多个完整副本，每个副本都对缺失的数据插补了不同的值。complete()函数则会返回这些数据集中的一个（默认）或多个。</p>
</blockquote>
<p>参考资料：</p>
<ul>
<li><a href="http://www.xueqing.tv/cms/article/185" target="_blank" rel="external">雪晴数据网：R语言处理缺失值的若干方法</a><a href="http://datascienceplus.com/missing-value-treatment/" target="_blank" rel="external">原文</a></li>
<li><a href="http://datascienceplus.com/imputing-missing-data-with-r-mice-package/" target="_blank" rel="external">datascience+: Imputing Missing Data with R; MICE package</a></li>
<li><a href="http://www.zhaokv.com/2016/01/missing-values.html" target="_blank" rel="external">如何处理数据中的缺失值</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近在分析毕业论文数据，顺便复习和学习新的数据分析方法，本文纯属搬运和整理他人的分享。&lt;/p&gt;
&lt;h1&gt;缺失值处理&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mice&lt;/code&gt; 包是专门用来处理缺失值的 R 语言包。可以通过 &lt;code&gt;mice::md.pattern()&lt;/c
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
      <category term="数据分析" scheme="http://lix90.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="缺失值" scheme="http://lix90.github.io/tags/%E7%BC%BA%E5%A4%B1%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>R：数据导入</title>
    <link href="http://lix90.github.io/2016/11/08/2016-11-08-r-import-data/"/>
    <id>http://lix90.github.io/2016/11/08/2016-11-08-r-import-data/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1>导入 CSV 数据</h1>
<p>使用基本包函数</p>
<p><code>read.csv()</code></p>
<p>使用 <code>readr</code> 包</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## wrapper function of data loading for reusing</span></div><div class="line">importdata &lt;- <span class="keyword">function</span>(d,f) &#123;</div><div class="line">  data &lt;- readr::read_csv(</div><div class="line">                   file = file.path(d, f),</div><div class="line">                   col_names = <span class="literal">TRUE</span>,</div><div class="line">                   na = <span class="string">"NULL"</span>,</div><div class="line">                   trim_ws = <span class="literal">TRUE</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">## load data</span></div><div class="line">data &lt;- importdata(input_dir, input_file)</div></pre></td></tr></table></figure>
<h1>导入 EXCEL 数据</h1>
<h1>导入 SPSS 数据</h1>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;导入 CSV 数据&lt;/h1&gt;
&lt;p&gt;使用基本包函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;readr&lt;/code&gt; 包&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
  </entry>
  
  <entry>
    <title>R：描述性统计</title>
    <link href="http://lix90.github.io/2016/11/08/2016-11-08-r-desc-stats/"/>
    <id>http://lix90.github.io/2016/11/08/2016-11-08-r-desc-stats/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-19T03:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取数据表的属性：</p>
<ul>
<li><code>str(data)</code> 数据构成</li>
<li>列数：<code>ncol(data)</code></li>
<li>行数：<code>nrow(data)</code></li>
<li>名称：<code>names(data)</code> 或者 <code>col.names(data)</code> <code>row.names(data)</code></li>
<li>长度：<code>length(data)</code> 或者查看某一列的唯一值个数 <code>length(unique(data[,&quot;col_name&quot;]))</code> 或者 <code>length(unique(data$col_name))</code></li>
</ul>
<p>描述性统计：</p>
<p>直接使用 <code>summary(data)</code> 就可以得到描述性统计值。<code>summary</code> 会根据输入对象的类型而返回不同的统计值。<br>
如果对象为 <code>charactor</code> 那么得到的是字符串总长度和 <code>Class</code> 和 <code>Mode</code>。如果对象为 <code>factor</code>，得到的是每个 <code>factor</code> 的数目。如果是 <code>integer</code>，得到的是最小值、中位数、平均数、四分位数、最大值。</p>
<p>如果用特定的计算统计量的函数呢？</p>
<ul>
<li>最小值 <code>min(data$col_name)</code></li>
<li>最大值 <code>max(data$col_name)</code></li>
<li>标准差 <code>sd(data$col_name)</code></li>
<li>方差 <code>var(data$col_name)</code></li>
<li>均值 <code>mean(data$col_name)</code></li>
<li>四分位数 <code>quantile(data$col_name, c(0.25, 0.75))</code></li>
<li>中位数 <code>median(data$col_name)</code></li>
<li>中位数绝对偏差 <code>mad(data$col_name)</code></li>
</ul>
<p>还有偏度和峰度两个描述性统计指标，但是 R 基本包里头没有提供直接算的函数。要么自己写一个函数，要么使用第三方开发包中的函数计算。</p>
<p>参考<a href="http://jackycode.github.io/blog/2014/03/12/rseries5/" target="_blank" rel="external">这篇博文</a>，作者给出了公式和代码：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">desc.stats &lt;- <span class="keyword">function</span>(x, na.omit=<span class="literal">FALSE</span> &#123;</div><div class="line">  <span class="keyword">if</span> (na.omit)</div><div class="line">    x &lt;- x[!is.na(x)]</div><div class="line">  n &lt;- length(x)</div><div class="line">  mean &lt;- mean(x)</div><div class="line">  var &lt;- var(x)</div><div class="line">  sd &lt;- sd(x)</div><div class="line">  skew &lt;- sum((x-mean)^<span class="number">3</span>/sd^<span class="number">3</span>)/n <span class="comment">#计算偏度</span></div><div class="line">  kurt &lt;- sum((x-mean)^<span class="number">4</span>/sd^<span class="number">4</span>)/n - <span class="number">3</span> <span class="comment">#计算峰度</span></div><div class="line">  <span class="keyword">return</span>(list(Mean=mean, Variance=var, skewness=skew, kurtosis=kurt))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有有哪些包提供了描述性统计的函数呢？</p>
<ul>
<li><code>Hmisc</code> 包中的 <code>Hmisc::describe()</code> 函数，可以返回变量数目、缺失值数目、均值、分位数等；</li>
<li><code>fBasic</code> 包中有 <code>skewness()</code> 和 <code>kurtosis()</code> 函数分别计算偏度和峰度；该包还有一个 <code>fBasic::basicStats()</code> 可以得到大部分描述性统计量。</li>
<li><code>psych</code> 专门用于心理统计学的包，里头也有关于描述性统计的函数，<code>psych::describe()</code> <code>psych::describeData()</code> <code>psych::describeBy()</code></li>
</ul>
<p>如果按照组或者变量水平来进行描述性统计呢？</p>
<ul>
<li>可以使用基本包里头的向量化运算的 <code>apply()</code> 族，<code>by()</code> <code>aggregate()</code> 等。</li>
<li>Hackley 大神开发的 <code>plyr</code> 和加强版 <code>dplyr</code> 也是可以组的描述性统计的。</li>
<li>还有如 <code>psych::describeBy()</code> <code>doBy::summaryBy()</code></li>
</ul>
<p>参考: <a href="http://www.statmethods.net/stats/descriptives.html" target="_blank" rel="external">Quick-R: Descriptive Statistics</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取数据表的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str(data)&lt;/code&gt; 数据构成&lt;/li&gt;
&lt;li&gt;列数：&lt;code&gt;ncol(data)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;行数：&lt;code&gt;nrow(data)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;名称：&lt;c
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
      <category term="Statistics" scheme="http://lix90.github.io/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>R：基本数据可视化</title>
    <link href="http://lix90.github.io/2016/11/08/2016-11-08-r-basic-vis/"/>
    <id>http://lix90.github.io/2016/11/08/2016-11-08-r-basic-vis/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-19T03:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要分析毕业论文数据，借机温习一下常见的统计图形，并且熟悉下如何在 R 下进行数据可视化。</p>
<h1>箱图 Boxplot</h1>
<h2 id="什么是箱图？">什么是箱图？</h2>
<p>箱形图，又叫箱须图（Box-Whisker Plot），是利用数据的五个特征值来描述数据的图形。这五个特征值为：最小值、第一四分位数、中位数、第三四分位数、最大值。</p>
<h2 id="箱形图的用处">箱形图的用处</h2>
<ul>
<li>粗略估计数据的<strong>对称性</strong>：由上下箱须和箱高度的长短差异表现出来</li>
<li>粗略观察数据的<strong>离散程度</strong>和<strong>集中程度</strong>：由上下箱须距离和箱的高度表现出来</li>
<li>粗略比较样本之间的特征</li>
</ul>
<h2 id="箱形图的不足">箱形图的不足</h2>
<ul>
<li>无法精确度量数据分布的偏态和尾重程度：可通过偏态值</li>
<li>对于较大的数据集，反映的信息较为模糊</li>
<li>中位数代表总体集中程度存在局限性</li>
</ul>
<h2 id="绘制过程">绘制过程</h2>
<p><img src="/img/boxplot.jpg" alt="箱形图"></p>
<ul>
<li>计算上四分位数，中位数，下四分位数。</li>
<li>计算上四分位数和下四分位数之间的差值，即四分位数差（IQR，interquantile range）。</li>
<li>绘制箱线图的上下范围，上限为上四分位数，下限为下四分位数。在箱子内部中位数的位置绘制横线。</li>
<li>大于上四分位数1.5倍四分位数差的值，或者小于下四分位数1.5倍四分位数差的值，划为异常值（outliers）。</li>
<li>异常值之外，最靠近上边缘和下边缘的两个值处，画横线，作为箱线图的触须。</li>
<li>极端异常值，即超出四分位数差3倍距离的异常值，用实心点表示；较为温和的异常值，即处于1.5倍-3倍四分位数差之间的异常值，用空心点表示。</li>
<li>为箱线图添加名称，数轴等。</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="http://blog.sciencenet.cn/blog-255662-239993.html" target="_blank" rel="external">科学网：什么是箱线图</a></li>
<li><a href="http://web.pdx.edu/~stipakb/download/PA551/boxplot.html" target="_blank" rel="external">http://web.pdx.edu/~stipakb/download/PA551/boxplot.html</a></li>
</ul>
<h2 id="使用-r-绘制箱图">使用 R 绘制箱图</h2>
<h3 id="基本包函数-boxplot">基本包函数 <code>boxplot</code></h3>
<p>基本用法：<code>boxplot(x)</code> 或者 <code>boxplot(x~y, data)</code></p>
<p>常用参数：</p>
<ul>
<li><code>formula</code> <code>y ~ grp</code> <code>y</code> 为数值型向量，<code>grp</code> 为组或者因素水平。</li>
<li><code>range</code> 设定箱须的长度，默认为 1.5 个箱高，即 1.5 倍四分位数差。</li>
<li><code>width</code></li>
<li><code>varwidth</code></li>
<li><code>notch</code></li>
<li><code>outline</code> 是否绘制异常值</li>
<li><code>names</code> 组标签</li>
<li><code>boxwex</code> 缩放参数</li>
<li><code>staplewex</code> 须顶端的横线的宽度（按盒宽比例）</li>
<li><code>outwex</code></li>
<li><code>border</code> 边框颜色</li>
<li><code>col</code> 箱体的颜色</li>
<li><code>log</code> 对数坐标</li>
<li><code>pars</code> 更多绘图参数列表</li>
<li><code>add</code> 添加到当前图中</li>
<li><code>at</code> 绘制的位置</li>
</ul>
<h3 id="ggplot2">ggplot2</h3>
<p><code>ggplot</code> 的绘图语法是以添加图层的形式绘制图形。虽然语法上与 <code>boxplot()</code> 存在差异，但是参数都几乎一样。</p>
<p>首先通过 <code>ggplot()</code> 创建图形（初始化一个 ggplot 的对象），声明输入数据和一般的图形视觉参数（aesthetic mapping，例如线形，颜色等）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box_plot &lt;- ggplot(data, aes(x, y, <span class="keyword">...</span>))</div></pre></td></tr></table></figure>
<p>然后添加 <code>geom_boxplot</code> 图层（layers）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box_plot &lt;- box_plot + geom_boxplot(<span class="keyword">...</span>)</div></pre></td></tr></table></figure>
<p><code>geom_boxplot()</code> 函数有以下一些参数：</p>
<ul>
<li><code>mapping</code> 和 <code>data</code> 跟 <code>ggplot()</code> 的一样，当没有声明时，直接继承 <code>ggplot</code>。</li>
<li>位置：<code>position</code></li>
<li>设置异常值的样式：<code>outlier.colour</code> <code>outlier.shape</code> <code>outlier.size</code> <code>outlier.stroke</code></li>
<li>槽的样式：<code>notch</code> <code>notchwidth</code></li>
<li><code>show.legend</code> 显示图例</li>
<li><code>coef</code> 等同于 <code>boxplot</code> 中的 <code>range</code></li>
</ul>
<h3 id="lattice">lattice</h3>
<blockquote>
<p>The lattice package, written by Deepayan Sarkar, attempts to improve on base R graphics by providing better defaults and the ability to easily display multivariate relationships. In particular, the package supports the creation of trellis graphs - graphs that display a variable or the relationship between variables, conditioned on one or more other variables.</p>
</blockquote>
<p><code>lattice</code> 的特长在于展示多变量关系。</p>
<p>变量的关系通过 <code>formula</code> 表示，例如：</p>
<ul>
<li><code>~x|A</code> 表示在因素 <code>A</code> 的所有水平下绘制相应的数值变量 <code>x</code> 的图形</li>
<li><code>y~x | A*B</code> <code>A</code> 和 <code>B</code> 两个因素混合条件下的 <code>y</code> 和 <code>x</code> 的关系</li>
</ul>
<p>参考 <a href="http://www.statmethods.net/advgraphs/trellis.html" target="_blank" rel="external">Quick-R: Lattice Graphs</a></p>
<p><code>lattice</code> 中绘制箱图的函数为 <code>bwplot()</code></p>
<h2 id="与箱图类似的图">与箱图类似的图</h2>
<ul>
<li>Violin Plots <code>vioplot</code> 包
<ul>
<li>呈现出了分布特征</li>
</ul>
</li>
<li>Tufte boxplot</li>
</ul>
<h1>散点图 Scatterplot</h1>
<h2 id="什么是散点图？">什么是散点图？</h2>
<blockquote>
<p>散点图对于绘制多变量数据非常有用。它们可帮助您确定各刻度变量之间的潜在关系。简单散点图使用二维坐标系绘制两个变量。三维散点图使用三维坐标系绘制三个变量。如果需要绘制更多的变量，则可以尝试重叠散点图和散点图矩阵 (SPLOM)。重叠散点图显示 x-y 变量的重叠对，其中每一对都以颜色或形状加以区分。SPLOM 创建一个二维散点图的矩阵，在 SPLOM 中每个变量都参照另外一个变量进行绘制。</p>
</blockquote>
<ul>
<li>保留了原始数据信息</li>
<li>展示多变量关系</li>
</ul>
<h2 id="在-r-中绘制基本的散点图">在 R 中绘制基本的散点图</h2>
<ul>
<li>基本包 <code>plot</code> 顶层绘图函数：<code>plot(x, type=&quot;p&quot;, pch=1)</code></li>
<li><code>ggplot2::geom_point()</code></li>
</ul>
<h2 id="散点图矩阵">散点图矩阵</h2>
<blockquote>
<p>散点图矩阵是散点图的高维扩展，它从一定程度上克服了在平面上展示高维数据的困难，在展示多维数据的两两关系时有着不可替代的作用。— <a href="http://cos.name/2009/03/scatterplot-matrix-visualization/" target="_blank" rel="external">统计之都</a></p>
</blockquote>
<ul>
<li><code>graphics::pairs()</code> 是 R 中绘制散点图矩阵的经典函数</li>
<li><code>car::scatterplot.matrix()</code> 或者简写 <code>car::spm()</code>：可以直接指定散点图中主对角线上的绘图元素（密度图、箱线图、直方图、QQ图等）。</li>
<li><code>YaleToolkit::gpairs()</code></li>
<li><code>lattice::splom()</code> 可以按类别绘制散点图矩阵。</li>
<li><code>GGally::ggpairs()</code> Hadley 推荐的绘制散点图矩阵的函数，用于替代 <code>ggplot2::plotmatrix()</code></li>
</ul>
<h2 id="散点图变式或类似的图形">散点图变式或类似的图形</h2>
<p>热图</p>
<ul>
<li><code>gplots::heatmap.2()</code></li>
<li><code>ggplot2::geom_raster()</code> <code>ggplot2::geom_tile()</code></li>
</ul>
<p>hexbin plot</p>
<blockquote>
<p>We can use the hexbin package in case we have multiple points in the same place (overplotting). Hexagon binning is a form of bivariate histogram useful for visualizing the structure in datasets with large n.</p>
</blockquote>
<ul>
<li>
<p><code>Hexbin::hexbinplot()</code></p>
</li>
<li>
<p><code>ggplot2</code>: <code>stat_binhex()</code> <code>geom_bin2d()</code></p>
</li>
<li>
<p>在散点图上添加等高线：<code>ggplot2::geom_density2d()</code></p>
</li>
<li>
<p>对散点图进行平滑 <code>graphics::smoothScatter()</code></p>
</li>
<li>
<p>在散点图上加上分布图或者直方图</p>
<ul>
<li>使用 <code>ggplot2</code> 分别绘制散点图和直方图，然后用 <code>gridExtra</code> 把图拼接在一起。</li>
<li>使用 <code>ggplot2</code> 中的 <code>geom_rug()</code> 图层（rug plots）</li>
<li>使用 <code>ggExtra::ggMarginal()</code> 添加直方图到 <code>ggplot</code> 图层上。</li>
<li>在这里可能需要对齐图，可以用到 <code>gtable</code> 包，可以将不同的 <code>ggplot</code> 图拼接时对齐。</li>
</ul>
</li>
</ul>
<p>参考: <a href="http://stackoverflow.com/questions/7714677/r-scatterplot-with-too-many-points" target="_blank" rel="external">StackOverflow: Scatterplot with too many points</a></p>
<h1>直方图 Histogram</h1>
<p>直方图用来展示数值型数据的分布，可以用来估计连续性数据的概率分布。直方图的纵轴为频率或者相对频率。</p>
<p>使用 R 绘制直方图：</p>
<p><code>graphics::hist()</code><br>
<code>graphics::plot.histogram()</code><br>
<code>lattice::histogram()</code><br>
<code>MASS::hist.scott()</code> 可以自动指派 bin 宽度。<br>
<code>MASS::truehist()</code><br>
<code>ggplot2::geom_histogram()</code><br>
<code>ggplot2::geom_freqpoly()</code><br>
<code>plotrix::histStack()</code><br>
<code>plotrix::multhist()</code><br>
<code>plotrix::plotH()</code><br>
<code>plotrix::weighted.hist()</code><br>
<code>psych::multi.hist()</code><br>
<code>psych::pairs.panels()</code><br>
<code>psych::scatter.hist()</code></p>
<p>等等</p>
<h1>其他统计图</h1>
<p>Mosaic Plot 类别数据，面积大小相对比例<br>
Heat Map 多变量关系，通过色彩深浅区分频率、密度和大小<br>
Pareto chart 条形图+累加线图，质量控制<br>
Sparkline 时间序列，气候，金融<br>
Radar chart 雷达图<br>
Line Chart 连续数据，趋势，时间序列数据<br>
Bar Chart 类别数据，大小比较<br>
Correlogram 相关图，展示相关矩阵</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/List_of_graphical_methods" target="_blank" rel="external">Wikipedia: List of graphical methods</a></p>
<h1>数据可视化的几点原则</h1>
<blockquote>
<p>Graphical displays should:</p>
<ul>
<li>show the data 显示原始数据</li>
<li>induce the viewer to think about the substance rather than about methodology, graphic design, the technology of graphic production or something else 引导观察者思考内容而非其他</li>
<li>avoid distorting what the data has to say 避免扭曲真实数据要展现的东西</li>
<li>present many numbers in a small space 在较小的空间展现大量的数据</li>
<li>make large data sets coherent 让大数据集具有一致性（清晰明了）？</li>
<li>encourage the eye to compare different pieces of data 鼓励用眼睛去比较数据之间的差异</li>
<li>reveal the data at several levels of detail, from a broad overview to the fine structure 从宏观到微观揭示数据表达的信息</li>
<li>serve a reasonably clear purpose: description, exploration, tabulation or decoration 服务于合理清晰的目标：描述，探索，制表或者装饰？</li>
<li>be closely integrated with the statistical and verbal descriptions of a data set. 紧密整合统计和言语上对数据集的描述</li>
</ul>
<p>— The Visual Display of Quantitative Information, Edward Tufte</p>
</blockquote>
<h1>统计图表所要展示的一些定量信息</h1>
<p>参考：<a href="https://en.wikipedia.org/wiki/Data_visualization" target="_blank" rel="external">Wikipedia: Data Visualization</a></p>
<blockquote>
<p>Quantitative messages</p>
<p>Author Stephen Few described eight types of quantitative messages that users may attempt to understand or communicate from a set of data and the associated graphs used to help communicate the message:</p>
<ul>
<li><strong>Time-series</strong>: A single variable is captured over a period of time. A line chart may be used to demonstrate the trend. 时序，随着时间发展而变化</li>
<li><strong>Ranking</strong>: Categorical subdivisions are ranked in ascending or descending order. A bar chart may be used to show the comparison across the sales persons. 顺序，类别之间的大小顺序</li>
<li><strong>Part-to-whole</strong>: Categorical subdivisions are measured as a ratio to the whole. A bar chart can show the comparison of ratios. 部分相对于整体的比例</li>
<li><strong>Deviation</strong>: Categorical subdivisions are compared against a reference. A bar chart can show comparison of the actual versus the reference amount. 变异，与参考对象进行比较</li>
<li><strong>Frequency distribution</strong>: Shows the number of observations of a particular variable for given interval. A histogram, a type of bar chart, may be used for this analysis. A boxplot helps visualize key statistics about the distribution, such as median, quartiles, outliers, etc. 频率分布</li>
<li><strong>Correlation</strong>: Comparison between observations represented by two variables (X,Y) to determine if they tend to move in the same or opposite directions. A scatter plot is typically used for this message. 相关性</li>
<li><strong>Nominal comparison</strong>: Comparing categorical subdivisions in no particular order. A bar chart may be used for this comparison. 类别比较，无特定顺序</li>
<li><strong>Geographic or geospatial</strong>: Comparison of a variable across a map or layout. A cartogram is a typical graphic used. 地理和空间信息</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要分析毕业论文数据，借机温习一下常见的统计图形，并且熟悉下如何在 R 下进行数据可视化。&lt;/p&gt;
&lt;h1&gt;箱图 Boxplot&lt;/h1&gt;
&lt;h2 id=&quot;什么是箱图？&quot;&gt;什么是箱图？&lt;/h2&gt;
&lt;p&gt;箱形图，又叫箱须图（Box-Whisker Plot），是利用数据的
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Data viz" scheme="http://lix90.github.io/tags/Data-viz/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-08</title>
    <link href="http://lix90.github.io/2016/11/08/2016-11-08-daily/"/>
    <id>http://lix90.github.io/2016/11/08/2016-11-08-daily/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-19T03:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Bash</h1>
<h2 id="环境">环境</h2>
<p>查看环境变量 <code>echo $VAR</code><br>
设置新的环境变量 <code>export VAR=&quot;fool!&quot;</code><br>
显示所有环境变量 <code>env</code><br>
显示所有本地定义的 Shell 变量 <code>set</code><br>
清除环境变量 <code>unset $VAR</code><br>
设置环境变量为只读 <code>readonly VAR</code></p>
<blockquote>
<p>The <code>export</code> and <code>declare -x</code> commands allow parameters and functions to be added to and deleted from the environment. If the value of a parameter in the environment is modified, the new value becomes part of the environment, replacing the old. The environment inherited by any executed command consists of the shell’s initial environment, whose values may be modified in the shell, less any pairs removed by the <code>unset</code> and <code>export -n</code> commands, plus any additions via the <code>export</code> and <code>declare -x</code> commands.</p>
</blockquote>
<h1>R: 如何一次性加载多个 package？</h1>
<p>参考：<a href="http://stackoverflow.com/questions/8175912/load-multiple-packages-at-once" target="_blank" rel="external">Stackoverflow: Load multiple packages at once</a></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x &lt;- c(<span class="string">"pkg1"</span>, <span class="string">"pkg2"</span>, <span class="string">"pkg3"</span>)</div></pre></td></tr></table></figure>
<h2 id="使用-lapply">使用 <code>lapply</code></h2>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">require</span>, character.only = <span class="literal">TRUE</span>)</div></pre></td></tr></table></figure>
<p>或者简写方式：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">require</span>, c = <span class="literal">T</span>)</div></pre></td></tr></table></figure>
<p>或者配上 <code>do.call()</code>：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, FUN = <span class="keyword">function</span>(X) &#123; do.call(<span class="string">"require"</span>, list(X)) &#125;)</div></pre></td></tr></table></figure>
<p>如果 package 没有安装呢？</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lapply(x, <span class="keyword">function</span>(x) &#123;<span class="keyword">if</span> (!<span class="keyword">require</span>(x, character.only=<span class="literal">T</span>)) &#123;install.packages(x);<span class="keyword">require</span>(x)&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="使用-package-pacman">使用 package <code>pacman</code></h2>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## install.packages("pacman")</span></div><div class="line">pacman::p_load(pkg1, pkg2, pkg3)</div></pre></td></tr></table></figure>
<p><a href="http://trinker.github.io/pacman_dev/" target="_blank" rel="external">pacman</a> 是一个包管理工具，除了可以同时加载多个包之外，还有以下一些方便的函数：</p>
<ul>
<li><code>p_install</code> 等同于 <code>install.packages</code> 从 CRAN 安装包</li>
<li><code>p_load_gh</code> 加载和安装 Github 上的包</li>
<li><code>p_install_gh</code> 从 Github 来源安装包</li>
<li><code>p_temp</code> 安装临时包</li>
<li><code>p_unload</code> 等于 <code>detach</code> 卸载包</li>
<li><code>p_update/p_up</code> 等于 <code>update.packages</code> 更新包</li>
<li><code>p_delete/p_del</code> 从库中永久删除包</li>
</ul>
<p>此外，该包还可以方便地获取包信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Bash&lt;/h1&gt;
&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;p&gt;查看环境变量 &lt;code&gt;echo $VAR&lt;/code&gt;&lt;br&gt;
设置新的环境变量 &lt;code&gt;export VAR=&amp;quot;fool!&amp;quot;&lt;/code&gt;&lt;br&gt;
显示所有环境变量 &lt;code
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="Bash" scheme="http://lix90.github.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-07</title>
    <link href="http://lix90.github.io/2016/11/07/2016-11-07-daily/"/>
    <id>http://lix90.github.io/2016/11/07/2016-11-07-daily/</id>
    <published>2016-11-06T16:00:00.000Z</published>
    <updated>2016-11-19T03:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天忙一些事情，没有积累多少东西，比较零碎。</p>
<h1>CSS</h1>
<p><code>:focus</code> 伪类</p>
<p>当元素获得“关注”，例如被用户通过键盘选中或者用鼠标激活（表单输入），该伪类就被触发。</p>
<p><code>:link</code> 未访问的链接<br>
<code>:visited</code> 已访问的链接<br>
<code>:hover</code> 鼠标移动到链接上方<br>
<code>:active</code> 链接激活</p>
<p><code>:active</code> 允许页面给予反馈，告诉用户浏览器检测到了点击或者 <code>tab</code> 键。该伪类的样式会被任何其他的链接有关的伪类覆盖，例如 <code>:hover</code> <code>:link</code> <code>visited</code>。如果要合适的链接样式，需要按照 <code>:link</code> - <code>:visited</code> - <code>:hover</code> - <code>:active</code> 顺序。</p>
<p><code>Outline</code> 与 <code>Border</code> 的差别：</p>
<ul>
<li><code>outline</code> 不影响布局，不影响盒大小，它是纯表现上的，对页面空间没有影响；<code>border</code> 会增加盒的尺寸，影响布局。</li>
<li><code>outline</code> 不一定是规则的矩形框；<code>border</code> 是规则的矩形框或者圆形，且可以根据四个边和角设置样式。</li>
</ul>
<h1>Emacs 中使用 Rmarkdown</h1>
<p>需要用到 ESS 和 polymode。先默认已经在 Emacs 中安装好了 ESS。然后进行如下配置（使用 <code>use-package</code>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(use-package polymode</div><div class="line">  :ensure t</div><div class="line">  :mode ((&quot;\\.[SR]nw\\&apos;&quot; . poly-noweb+r-mode)</div><div class="line">         (&quot;\\.Rmd\\&apos;&quot; . Rmd-mode))</div><div class="line">  :init</div><div class="line">  (progn</div><div class="line">    (defun Rmd-mode ()</div><div class="line">      &quot;ESS Markdown mode for Rmd files.&quot;</div><div class="line">      (interactive)</div><div class="line">      (require &apos;poly-R)</div><div class="line">      (require &apos;poly-markdown)</div><div class="line">      (R-mode)</div><div class="line">      (poly-markdown+r-mode))))</div><div class="line"></div><div class="line">(defun ess-rmarkdown-to-html ()</div><div class="line">  (interactive)</div><div class="line">  &quot;Run kintr::knit2html on the current file.&quot;</div><div class="line">  &quot;https://gist.github.com/kohske/9128031&quot;</div><div class="line">  (shell-command</div><div class="line">   (format &quot;Rscript -e \&quot;kintr::knit2html (&apos;%s&apos;)\&quot;&quot;</div><div class="line">           (shell-quote-argument (buffer-file-name)))))</div></pre></td></tr></table></figure>
<p>参考：<a href="http://futurismo.biz/archives/2982" target="_blank" rel="external">http://futurismo.biz/archives/2982</a></p>
<h1>杂项</h1>
<h2 id="在-terminal-中使用-socks5-代理">在 Terminal 中使用 socks5 代理</h2>
<p>前提当然是需要有 socks5 代理了。个人使用 <code>shodowsocks</code>。</p>
<p>在终端使用代理，可以通过 proxychains，MacOS 下叫 proxychains-ng。</p>
<p>修改配置：<code>/usr/local/Cellar/proxychains-ng/&lt;version&gt;/etc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ProxyList]</div><div class="line">socks5 127.0.0.1 1080</div></pre></td></tr></table></figure>
<p>然后绑定个别名啦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias fq=&quot;/usr/local/Cellar/proxychains-ng/4.11/bin/proxychains4&quot;</div></pre></td></tr></table></figure>
<h2 id="png-图片压缩">PNG 图片压缩</h2>
<p>一些常用压缩工具的对比：<a href="http://jamiemason.github.io/ImageOptim-CLI/" target="_blank" rel="external">http://jamiemason.github.io/ImageOptim-CLI/</a></p>
<ul>
<li><a href="https://github.com/ImageOptim/ImageOptim" target="_blank" rel="external">ImageOptim</a></li>
<li><a href="https://github.com/JohnWong/imageoptim" target="_blank" rel="external">ImageOptim with pngquant</a></li>
<li><a href="https://tinypng.com/" target="_blank" rel="external">TinyPNG</a></li>
<li><a href="http://www.smushit.com/ysmush.it/" target="_blank" rel="external">Smush.it</a></li>
</ul>
<p>参考：<a href="http://johnwong.github.io/showcase/2015/02/19/png-compress.html" target="_blank" rel="external">PNG图片极限压缩</a></p>
<h2 id="命令行直接调用-chrome-进行谷歌检索">命令行直接调用 Chrome 进行谷歌检索</h2>
<p>在 bash_profile 里头添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function gg() &#123; open /Applications/Google\ Chrome.app/ &quot;http://www.google.com/search?q= $1&quot;; &#125;</div></pre></td></tr></table></figure>
<p>在 zshrc 里头添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gg() &#123; open -a &quot;Google Chrome&quot; &quot;http://www.google.com/search?q=$1&quot;; &#125;</div></pre></td></tr></table></figure>
<h2 id="windows-下包管理器神器：chocolatey">Windows 下包管理器神器：<a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a></h2>
<p>参考：<a href="http://ju.outofmemory.cn/entry/141470" target="_blank" rel="external">Chocolatey, 我爱你</a></p>
<h2 id="macos-访问-windows-中的共享文件夹">MacOS 访问 Windows 中的共享文件夹</h2>
<ol>
<li>进入 Finder</li>
<li>前往 &gt;&gt;&gt; 连接服务器（Command + K）</li>
<li>服务器地址输入：<code>smb://Computer-Name</code> 或者 <code>smb://IP-Address</code></li>
</ol>
<blockquote>
<p>SMB：服务器信息块协议（Server Message Block protocol）</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天忙一些事情，没有积累多少东西，比较零碎。&lt;/p&gt;
&lt;h1&gt;CSS&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;:focus&lt;/code&gt; 伪类&lt;/p&gt;
&lt;p&gt;当元素获得“关注”，例如被用户通过键盘选中或者用鼠标激活（表单输入），该伪类就被触发。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:link
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="ESS" scheme="http://lix90.github.io/tags/ESS/"/>
    
      <category term="Rmarkdown" scheme="http://lix90.github.io/tags/Rmarkdown/"/>
    
      <category term="Terminal" scheme="http://lix90.github.io/tags/Terminal/"/>
    
      <category term="MacOS" scheme="http://lix90.github.io/tags/MacOS/"/>
    
      <category term="Tools" scheme="http://lix90.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-11-01</title>
    <link href="http://lix90.github.io/2016/11/02/2016-11-01-daily/"/>
    <id>http://lix90.github.io/2016/11/02/2016-11-01-daily/</id>
    <published>2016-11-01T16:23:13.000Z</published>
    <updated>2016-11-19T03:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript</h1>
<h2 id="js-对象">JS 对象</h2>
<p>JS 的对象是一种<strong>无序的集合数据类型</strong>，由若干个键值组成。实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
<p>对象属性的访问：</p>
<ul>
<li><code>object.property</code> 通过 <code>.</code> 号</li>
<li><code>object['property']</code></li>
</ul>
<p>检测是否拥有某一属性：</p>
<ul>
<li><code>in</code>： 但是继承所得到的属性 <code>in</code> 也会返回真的结果</li>
<li><code>hasOwnProperty</code> 判断自身具有的属性</li>
</ul>
<h2 id="map-与-set">Map 与 Set</h2>
<p><code>Map</code> 和 <code>Set</code> 为 ES6 规范引入的新数据类型。</p>
<p><code>Map</code> 是一组<strong>键值对</strong>的结构，具有极快的查找速度。一个 <code>key</code> 只能对应一个 <code>value</code>。初始化 <code>Map</code> 需要一个二维数组。初始化空 <code>Map</code>：<code>var m = new Map()</code>。<code>Map</code> 类型有以下方法：</p>
<ul>
<li><code>set(key, value)</code> 添加新的键值对</li>
<li><code>has(key)</code> 是否存在键</li>
<li><code>get(key)</code> 获取键所对应的值</li>
<li><code>delete(key)</code> 删除键</li>
</ul>
<p><code>Set</code> 和 <code>Map</code> 类似，也是一组 Key 的集合，但是并不存储 Value。而且，Key 不能重复。创建新的 <code>Set</code> 需要提供一个 <code>Array</code> 作为输入。初始化新 <code>Set</code>：<code>var s = new Set()</code>。<code>Set</code> 包含以下常见方法：</p>
<ul>
<li><code>add</code> 增加键</li>
<li><code>delete</code> 删除键</li>
<li><code>has</code> 是否存在键</li>
<li><code>clear</code> 清除所有键</li>
</ul>
<h2 id="iterable-类型">iterable 类型</h2>
<p>遍历 <code>Array</code> 可以采用下标循环，遍历 <code>Map</code> 和 <code>Set</code> 就无法使用下标。为了统一集合类型，ES6 标准引入了新的 <code>iterable</code> 类型，<code>Array</code>、<code>Map</code> 和 <code>Set</code> 都属于 <code>iterable</code> 类型。</p>
<p>具有 <code>iterable</code> 类型的集合可以通过新的 <code>for ... of</code> 循环来遍历。</p>
<p><code>for ... in</code> 和 <code>for ... of</code> 有什么差别？</p>
<ul>
<li><code>for ... in</code> 遍历对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</li>
<li><code>for ... of</code> 只遍历集合本身的元素。</li>
</ul>
<p>遍历集合更好的方式是直接使用 <code>iterable</code> 内置的 <code>forEach</code> 方法，它接收一个函数，每次迭代就自动回调该函数。<code>arr.forEach(function(element, index, array) {});</code></p>
<p><code>Set</code> 与 <code>Array</code> 类似，但 <code>Set</code> 没有索引，因此回调函数的前两个参数都是元素本身。</p>
<p><code>Map</code> 的回调函数参数依次为 <code>value</code>、<code>key</code> 和 <code>map</code> 本身。</p>
<h2 id="函数">函数</h2>
<p>在 JavaScript 里，函数是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>
<p>抽象：借助抽象，可以不用关心底层的具体计算过程，而直接在更高的层次上思考问题。写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>
<p>函数体内部的语句在执行时，一旦执行到 <code>return</code> 时，函数就执行完毕，并将结果返回。如果没有 <code>return</code> 语句，函数执行完毕后也会返回结果，只是结果为 <code>undefined</code>。</p>
<p>两种等价的函数定义方式：</p>
<ul>
<li><code>function funName() {}</code></li>
<li><code>var funName = function() {};</code></li>
</ul>
<p>注意第二种需要用 <code>;</code> 结尾，表示赋值结束。</p>
<p>JavaScript 允许传入任意个参数。</p>
<p><code>arguments</code> 在函数内部起作用，永远指向当前函数的调用者传入的所有参数。</p>
<p>ES6 标准引入了 <code>rest</code> 参数。<code>rest</code> 参数只能写在最后，前面用 <code>...</code> 标识。<code>function foo(a, b, ...rest) {}</code>。用来表示参数中多余的参数，当没有多余的参数时，<code>rest</code> 就为空。</p>
<p>变量作用域</p>
<ul>
<li>一个变量在函数内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量；</li>
<li>不同函数内部的同名变量相互独立，互不影响；</li>
<li>在函数嵌套时，内部函数可以访问外部函数定义的变量，反过来则不行；</li>
<li>函数在查找变量时，从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</li>
</ul>
<p>变量提升</p>
<p>JS 函数会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。由于 JavaScript 的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。</p>
<p>全局作用域</p>
<p><strong>不在任何函数内定义的变量就具有全局作用域</strong>。实际上，JavaScript 默认有一个全局对象 <code>window</code>，全局作用域的变量实际上被绑定到 <code>window</code> 的一个属性。JavaScript 实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报 <code>ReferenceError</code> 错误。</p>
<p>命名空间</p>
<p>全局变量会绑定到 window 上，不同的 JavaScript 文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。<strong>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中</strong>。</p>
<p>局部作用域</p>
<p>在 for 循环等语句块中无法定义具有局部作用域的变量。<br>
为了解决块级作用域，ES6 引入了新的关键字 <code>let</code>，用 <code>let</code> 替代 <code>var</code> 可以申明一个块级作用域的变量。</p>
<p>常量</p>
<p>由于 <code>var</code> 和 <code>let</code> 申明的是变量，如果要申明一个常量，在 ES6 之前是不行的，我们通常用<strong>全部大写的变量</strong>来表示常量。<br>
ES6 标准引入了新的关键字 <code>const</code> 来定义常量，<code>const</code> 与 <code>let</code> 都具有块级作用域。</p>
<p>方法</p>
<p>在一个对象中绑定的函数就是这个对象的方法。<br>
在一个方法内部，<code>this</code> 是一个特殊变量，它始终指向当前对象。</p>
<p>JavaScript 的函数内部如果调用了 <code>this</code>，那么这个 <code>this</code> 到底指向谁？视情况而定。</p>
<ul>
<li>如果以对象的方法形式调用，该函数的 <code>this</code> 指向被调用的对象；</li>
<li>如果单独调用函数，此时，该函数的 <code>this</code> 指向全局对象，也就是 <code>window</code>。</li>
</ul>
<p>要保证 <code>this</code> 指向正确，必须用 <code>obj.xxx()</code> 的形式调用！<br>
ECMA 决定，在 <code>strict</code> 模式下让函数的 <code>this</code> 指向 <code>undefined</code>。<br>
用 <code>var that = this;</code>，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。</p>
<p><code>apply</code> 方法：它接收两个参数，第一个参数就是需要绑定的 <code>this</code> 变量，第二个参数是 <code>Array</code>，表示函数本身的参数。<br>
<code>apply</code>和<code>call</code>方法：</p>
<ul>
<li><code>apply()</code> 把参数打包成 <code>Array</code> 再传入；</li>
<li><code>call()</code> 把参数按顺序传入；</li>
</ul>
<p>对普通函数调用，通常把 <code>this</code> 绑定为 <code>null</code>。</p>
<p>装饰器：利用 <code>apply</code> 可以动态改变函数的行为。</p>
<p>高阶函数</p>
<p>一个函数接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
<ul>
<li><code>map</code></li>
<li><code>reduce</code></li>
<li><code>filter</code></li>
<li><code>sort</code>：<code>sort</code> 方法会直接对 <code>Array</code> 进行修改，它返回的结果仍是当前 <code>Array</code>。</li>
</ul>
<p>闭包</p>
<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。<br>
返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br>
闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p>
<p>箭头函数</p>
<p>箭头函数内部的 <code>this</code> 是词法作用域，由上下文确定。<br>
箭头函数完全修复了 <code>this</code> 的指向，<code>this</code> 总是指向词法作用域，也就是外层调用者 <code>obj</code>。</p>
<p>generator 生成器</p>
<p>ES6 标准引入的新的数据类型。一个 <code>generator</code> 看上去像一个函数，但可以返回多次。</p>
<p>小结：</p>
<p>看了廖雪峰的 JS 入门教程，发现 JS 有许多奇怪的特性，抽象的用法，难以理解。对于我个人来说有以下几个难点：</p>
<ul>
<li>作用域</li>
<li><code>this</code></li>
<li>闭包</li>
<li><code>generator</code></li>
</ul>
<p>有待后续掌握。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
</ul>
<h1>Python</h1>
<p>生成器</p>
<p>在 Python 中，这种一边循环一边计算的机制，称为生成器：<code>generator</code>。</p>
<ul>
<li><code>generator</code> 保存的是算法</li>
<li><code>generator</code> 可迭代</li>
<li>在调用时，局部变量和执行状态自动地保存</li>
<li>创建生成器时，使用 <code>yield</code> 语句返回数据</li>
<li>使用 <code>next</code> 调用生成器</li>
<li>生成器使用圆括号构建</li>
</ul>
<p>类 Classes</p>
<p>至少三级嵌套作用域：</p>
<ul>
<li>最内层的作用域，首先被检索，包含了局部命名</li>
<li>封装的函数的作用域（enclosing functions），包含非局部，但又非全局命名</li>
<li>包含当前模块的全局命名</li>
<li>最外层的作用域，也最后被检索，包含了内建命名（built-in names）</li>
</ul>
<blockquote>
<p>if no <code>global</code> statement is in effect – assignments to names always go into the innermost scope. Assignments do not copy data — they just bind names to objects. The same is true for deletions: the statement <code>del x</code> removes the binding of x from the namespace referenced by the local scope.</p>
</blockquote>
<p>将数据分派给变量时，并未复制数据，而仅仅是将变量名与对象绑定起来。</p>
<p>类对象支持两种运算：属性引用（attribute references）和实例化（instantiation）。</p>
<ul>
<li>属性引用：<code>obj.name</code>。</li>
<li>实例化使用函数符号，<code>varName = myClass()</code> 可以创建一个关于该类的新的实例，并指派给局部变量 <code>varName</code>。</li>
</ul>
<p><code>__init__()</code> 方法可以指定类的初始状态，在新的类的实例中自动的初始化。</p>
<p>实例对象具有唯一的运算，属性引用，数据属性和方法。</p>
<blockquote>
<p>If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.</p>
</blockquote>
<p>—&gt; 未完</p>
<h2 id="bash">Bash</h2>
<p>关于引号：单引号内变量名会被当作字符串，双引号则会被当作变量处理。</p>
<p>算术运算：<code>expr</code> <code>$(())</code> <code>$[]</code> <code>+</code> <code>-</code> <code>/</code> <code>%</code> <code>**</code></p>
<p>条件控制:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if 命令为真</div><div class="line">then</div><div class="line">    命令</div><div class="line">fi</div><div class="line"># 或者</div><div class="line">if 命令为真; then</div><div class="line">    命令</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>测试比较符：</p>
<ul>
<li><code>-gt</code> 大于</li>
<li><code>-eq</code> <code>=</code> 等于</li>
<li><code>-ne</code> <code>!=</code> 不等于</li>
<li><code>-lt</code> 小于</li>
<li><code>-ge</code> 大于或等于</li>
<li><code>-le</code> 小于或等于</li>
<li><code>-n</code> 非零长度</li>
<li><code>-z</code> 零长度</li>
<li><code>-d</code> 存在路径</li>
<li><code>-f</code> 存在文件</li>
</ul>
<p>循环语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for ((i=1; i&lt;=10; i++))</div><div class="line">do</div><div class="line">    echo &quot;$i&quot;</div><div class="line">done</div><div class="line"></div><div class="line"># 或者</div><div class="line"></div><div class="line">for var in &#123;1..10&#125;</div><div class="line">do</div><div class="line">    echo &quot;$var&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<hr>
<h1>杂项</h1>
<h1>Hackerrank 笔记</h1>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for i in &#123;1..100..2&#125;</div><div class="line">do</div><div class="line">    echo $i</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq 1 2 99</div></pre></td></tr></table></figure>
<h2 id="来自于纪录片-helvetica">来自于纪录片《Helvetica》</h2>
<blockquote>
<ul>
<li>别把易读性和信息传达混为一谈。某样东西清晰易读，并不说明它能传达信息。更重要的是，并不意味着它传达了正确的信息。反过来说，某个东西或许开始的时候很难辨识，但它传达了一种全然不同的信息。同时又切合主题。那么，或许它就是需要读者多花点时间和心思的。这种方式表达的效果往往要更为强烈。如果有条非常重要的信息用一种平凡无聊的方式排出来。这条消息很可能就被忽略了。</li>
<li>“简洁有力” 和 “空洞乏味” 之间的界限其实很模糊。</li>
<li>用设计的语言来说，我觉得最重要的是，于细微处获得情感上的回馈。我觉得这是最棒的设计。</li>
<li>你越是接近它，对它看得越多，就越能够欣赏它的优秀。</li>
</ul>
</blockquote>
<h1>词汇</h1>
<p>recursive invocation 递归调用<br>
unqualified reference 没有资格的引用 or 无授权的引用？<br>
wrapper 封装</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;h2 id=&quot;js-对象&quot;&gt;JS 对象&lt;/h2&gt;
&lt;p&gt;JS 的对象是一种&lt;strong&gt;无序的集合数据类型&lt;/strong&gt;，由若干个键值组成。实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。&lt;/
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="Bash" scheme="http://lix90.github.io/tags/Bash/"/>
    
      <category term="Helvetica" scheme="http://lix90.github.io/tags/Helvetica/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-31</title>
    <link href="http://lix90.github.io/2016/10/31/2016-10-31-daily/"/>
    <id>http://lix90.github.io/2016/10/31/2016-10-31-daily/</id>
    <published>2016-10-31T15:36:55.000Z</published>
    <updated>2016-11-19T03:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Python</h1>
<h2 id="with-语句">with 语句</h2>
<p><code>with expression as target:</code></p>
<h2 id="open-函数">open 函数</h2>
<p><code>open(name[, mode[, buffering]])</code></p>
<p>打开文件，并返回 <code>file</code> 类型的对象。如果无法打开，将抛出 <code>IOError</code> 错误。</p>
<ul>
<li><code>name</code> 参数为文件名；</li>
<li><code>mode</code> 为字符串，指定文件如何打开
<ul>
<li><code>r</code> 读取（默认）</li>
<li><code>w</code> 写入，如果文件存在，则删掉文件</li>
<li><code>a</code> 添加到文件末尾</li>
<li><code>b</code> 二进制</li>
<li><code>r+</code> <code>w+</code> <code>a+</code> 更新打开的文件</li>
</ul>
</li>
<li><code>buffering</code> 缓存大小
<ul>
<li>0，不进行缓存</li>
<li>1，按行缓存</li>
<li>其他正值表示按相应的大小（bytes）进行缓存</li>
<li>负值意味着使用系统默认的缓存方式</li>
</ul>
</li>
</ul>
<p>具有相似功能的模块：</p>
<ul>
<li><code>fileinput</code> 提供辅助类和函数来快速对标准输入或文件列表进行迭代。</li>
<li><code>os</code> 提供一些与操作系统有关功能：进程参数、创建文件对象、文件描述符操作、文件和路径操作、进程管理等</li>
<li><code>os.path</code> 对路径名进行操作</li>
<li><code>tempfile</code> 创建临时文件和路径</li>
<li><code>shutil</code> high-level 文件和路径的操作</li>
</ul>
<h2 id="csv-模块">csv 模块</h2>
<p>csv 文件的读写（2.3版不支持 Unicode 的输入）。</p>
<ul>
<li><code>csv.reader(csvfile, dialect='excel', **fmtparams)</code> 返回 reader 对象，按行迭代</li>
<li><code>csv.writer(csvfile, dialect='excel', **fmtparams)</code> 返回 writer 对象</li>
<li><code>csv.DictReader(csvfile, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)</code> 返回与 reader 类似的对象，但是将信息读取为词典形式</li>
<li><code>csv.DictWriter(csvfile, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)</code> 返回与 writer 类似的对象，但是将词典数据写入到行</li>
</ul>
<h2 id="datetime-模块">datetime 模块</h2>
<p>提供基本的用于操作日期和时间的类和函数。</p>
<p>在此有两类日期和时间对象：</p>
<ul>
<li>
<p>aware object: 包含丰富的信息，如时区，夏时令，可以用于和其他 aware 对象进行定位。</p>
</li>
<li>
<p>naive object: naive object 缺少 aware object 所包含的那些信息，仅仅包含时间。</p>
</li>
<li>
<p><code>date</code> 对象</p>
</li>
<li>
<p><code>datetime</code> 对象</p>
</li>
<li>
<p><code>time</code> 对象</p>
</li>
<li>
<p><code>tzinfo</code> 对象</p>
</li>
</ul>
<p>其他与时间和日期有关的模块</p>
<ul>
<li><code>time</code> 模块：提供了许多时间相关的函数，可以访问和转换时间对象。
<ul>
<li><code>time.strftime</code> 将元组或 <code>struct_time</code> 按照时间格式转换为字符串。</li>
</ul>
</li>
<li><code>calendar</code> 模块</li>
<li><code>locale</code> 模块</li>
</ul>
<h1>Emacs</h1>
<h2 id="谷歌翻译插件-google-translate">谷歌翻译插件 <a href="https://github.com/atykhonov/google-translate" target="_blank" rel="external">google-translate</a></h2>
<p>感谢强大的 emacers，在 emacs 里头实现了<a href="https://github.com/xuchunyang/youdao-dictionary.el" target="_blank" rel="external">有道词典</a>、<a href="https://github.com/cute-jumper/bing-dict.el" target="_blank" rel="external">Bing词典</a>等功能，也想直接在 emacs 里使用谷歌翻译。以下是配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(use-package google-translate</div><div class="line">  :ensure t</div><div class="line">  :defer t</div><div class="line">  :bind ((&quot;C-c C-d g&quot; . google-translate-at-point)</div><div class="line">         (&quot;C-c C-d G&quot; . google-translate-smooth-translate)</div><div class="line">         (&quot;C-c C-d r&quot; . google-translate-at-point-reverse)</div><div class="line">         (&quot;C-c C-d R&quot; . google-translate-query-translate-reverse))</div><div class="line">  :config</div><div class="line">  (progn</div><div class="line">  (require &apos;google-translate-smooth-ui)</div><div class="line">  (setq google-translate-default-source-language &quot;en&quot;</div><div class="line">        google-translate-default-target-language &quot;zh&quot;</div><div class="line">        max-mini-window-height 0.5)</div><div class="line">  (setq google-translate-translation-directions-alist</div><div class="line">        &apos;((&quot;en&quot; . &quot;zh&quot;) (&quot;zh&quot; . &quot;zh&quot;))))</div><div class="line">  )</div></pre></td></tr></table></figure>
<h1>杂项</h1>
<p><a href="https://github.com/hallvors/postcss-flexboxfixer" target="_blank" rel="external">flexboxfixer</a>: flexbox 兼容处理</p>
<p><a href="http://www.browsersync.cn/" target="_blank" rel="external">Browsersync</a></p>
<blockquote>
<p>Browsersync 能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync 可以同时在 PC、平板、手机等设备下进项调试。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Python&lt;/h1&gt;
&lt;h2 id=&quot;with-语句&quot;&gt;with 语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;with expression as target:&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;open-函数&quot;&gt;open 函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;open(nam
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="Flexbox" scheme="http://lix90.github.io/tags/Flexbox/"/>
    
      <category term="Browsersync" scheme="http://lix90.github.io/tags/Browsersync/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-30</title>
    <link href="http://lix90.github.io/2016/10/30/2016-10-30-daily/"/>
    <id>http://lix90.github.io/2016/10/30/2016-10-30-daily/</id>
    <published>2016-10-30T05:57:32.000Z</published>
    <updated>2016-11-19T03:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1>搞不懂的 callback</h1>
<p>JS 单线程 :—&gt; 性能 :—&gt; 异步思维（不仅限于针对用户输入时）</p>
<p>JS 三个异步支持阶段：callback —&gt; promise —&gt; generator</p>
<blockquote>
<p>Generators by themselves do not provide any sort of asynchronous support: they rely on either promises or a special type of callback to provide asynchronous behavior. 事实上，generator 本身并未提供异步支持，它依赖于 promise 或特殊类型的 callback 来提供异步行为。</p>
</blockquote>
<p>使用异步技术的三种情况：</p>
<ul>
<li>网络请求 Network requests</li>
<li>文件系统的操作（读写等） Filesystem operations</li>
<li>有目的的延迟功能 Intentionally time-delayed functionality</li>
</ul>
<blockquote>
<p>A <strong>callback</strong> is simply a function that you write that will be <strong>invoked at some point in the future</strong>. There’s nothing special about the function itself: it’s just a regular JavaScript function. Typically, you provide these callback functions to other functions, or set them as properties on objects (or, rarely, provide them in an array). Callbacks are very often (but not always) anonymous functions.</p>
</blockquote>
<p>Callback, 回调，就是一般的函数，并无特殊性。只不过因为某个未来的事件或时间点被诱发。回调往往是匿名函数。</p>
<p><code>回调函数</code> <code>登记回调函数</code> <code>触发回调关联事件</code> <code>调用回调函数</code> <code>响应回调事件</code> <code>回调地狱</code></p>
<blockquote>
<p>在js里函数都是对象，这表示它们可以作为参数传递给其他的函数。举例：当函数b()作为参数传递给函数a()，那么在某一时刻函数a()可能会执行或者调用函数b()。这种情况下，函数b()就被称为回调函数，也可以简称叫做回调。</p>
</blockquote>
<blockquote>
<p>you have to be mindful of the scope your callbacks are declared in: they will have access to everything in that scope (closure). And because of that, the value may be different when the callback actually executes. This principle applies to all asynchronous techniques, not just callbacks. 需要特别注意回调函数的作用域。</p>
</blockquote>
<blockquote>
<p>在传入一个回调函数之前，中间函数是不完整的。换句话说，程序可以在运行时，通过登记不同的回调函数，来决定、改变中间函数的行为。这就比简单的函数调用要灵活太多了。</p>
</blockquote>
<blockquote>
<p>回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。</p>
</blockquote>
<p>关于回调等 JS 学到一定地步再来总结吧。</p>
<ul>
<li><a href="http://callbackhell.com/" target="_blank" rel="external">Callback Hell</a></li>
<li><a href="http://www.75team.com/post/%E8%AF%91%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.html" target="_blank" rel="external">360奇舞团：回调地狱（译）</a></li>
<li><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="external">知乎：回调函数（callback）是什么？</a></li>
<li><a href="http://www.alloyteam.com/2015/04/solve-callback-hell-with-generator/" target="_blank" rel="external">腾讯全端 AlloyTeam 团队：使用Generator解决回调地狱</a></li>
<li><a href="http://web.jobbole.com/85909/" target="_blank" rel="external">伯乐在线：后端程序员的 Js 之旅 : 回调地狱终结者</a></li>
<li><a href="https://codefalling.com/2016/08/14/get-out-of-callback-hell-with-generator/" target="_blank" rel="external">Codefalling：利用 generator 解决回调地狱</a></li>
</ul>
<hr>
<h1><a href="http://sass.bootcss.com/" target="_blank" rel="external">SCSS &amp; SASS</a></h1>
<p>SCSS 源自 SASS。</p>
<ul>
<li>SASS 具有严格的缩进，而没有花括号和分号，变量的标志用 <code>!</code>，分配符为 <code>=</code>。缩进语法更短并且更易于书写。使用 SASS 甚至不需要 <code>@mixin</code> 或者 <code>@include</code>, 一个字符就足够了：<code>=</code> 和 <code>+</code>。但是严格缩进有时会带来麻烦，一处错，处处错。</li>
<li>SCSS 与原生 CSS 很相似，使用花括号和分号，变量标志用 <code>$</code>，分配符用 <code>:</code>。SCSS 相当于是只是加了一些功能的 CSS。虽然 SCSS 没有 SASS 简洁，但是保证了良好的易读性，易于理解。</li>
</ul>
<hr>
<h1>杂项</h1>
<h2 id="语义化版本控制规范-semver"><a href="http://semver.org/lang/zh-CN/#spec-item-1" target="_blank" rel="external">语义化版本控制规范（SemVer）</a></h2>
<p>为了避免软件开发陷入“依赖地狱”的困境，可以使用语义化版本的命令方式。在这套命名方式的约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>
<blockquote>
<p>版本格式为：主板本号.次版本号.修订号，版本号递增规则如下：</p>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ol>
<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>
</blockquote>
<h2 id="notes-out-of-youtube">Notes out of youtube</h2>
<p><a href="https://www.youtube.com/watch?v=lfiopzfE5-0" target="_blank" rel="external">The Three Most Important Skills Of A Web Designer</a></p>
<p><code>empathy</code> <code>awareness</code> <code>grit</code></p>
<p><a href="https://www.youtube.com/watch?v=t14MwuWH_ts" target="_blank" rel="external">How to desing a killer home page</a></p>
<ul>
<li>engagement media</li>
<li>content silos {what?}</li>
<li>scrollable</li>
<li>connects to your main offer</li>
<li>define your role</li>
<li>footer: information in general</li>
<li>no flash</li>
</ul>
<h2 id="d3-js">D3.js</h2>
<p>数据标准：</p>
<ul>
<li>表格数据（Tabular data）：D3 提供了三种抓取数据的方法 <code>d3.dsv</code> <code>d3.tsv</code> <code>d3.csv</code></li>
<li>嵌套数据（Nested data）</li>
<li>网络数据（Network data）</li>
<li>地理数据（Geographic data）：常见如 <code>GeoJSON</code> <code>TopoJSON</code></li>
<li>原始数据（Raw data）：文本、图片、视频</li>
<li>JS 对象（JavaScripit Object Notation，JSON），<code>d3.json</code></li>
</ul>
<h2 id="专业术语">专业术语</h2>
<p><code>Geometric primitives</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;搞不懂的 callback&lt;/h1&gt;
&lt;p&gt;JS 单线程 :—&amp;gt; 性能 :—&amp;gt; 异步思维（不仅限于针对用户输入时）&lt;/p&gt;
&lt;p&gt;JS 三个异步支持阶段：callback —&amp;gt; promise —&amp;gt; generator&lt;/p&gt;
&lt;blockquot
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="Callback" scheme="http://lix90.github.io/tags/Callback/"/>
    
      <category term="SCSS" scheme="http://lix90.github.io/tags/SCSS/"/>
    
      <category term="SASS" scheme="http://lix90.github.io/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-29</title>
    <link href="http://lix90.github.io/2016/10/29/2016-10-29-daily/"/>
    <id>http://lix90.github.io/2016/10/29/2016-10-29-daily/</id>
    <published>2016-10-29T06:03:30.000Z</published>
    <updated>2016-11-19T03:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天修改了下博客模板，顺便了解了下相关的工具和模块。</p>
<h1>HEXO</h1>
<p>辅助函数</p>
<p><code>url_for()</code> 在路径前加根目录 <code>&lt;% url_for(path) %&gt;</code><br>
<code>relative_url(from, to)</code> 获得一个从 <code>from</code> 到 <code>to</code> 的路径<br>
<code>css(path, ...)</code> 载入 css 文件<br>
<code>js(path, ...)</code> 载入 js 文件<br>
<code>link_to(path, [text], [options])</code> 插入链接<br>
<code>mail_to(path, [text], [options])</code> 插入电子邮件<br>
<code>image_tag(path, [options])</code> 插入图片<br>
<code>favicon_tag(path)</code> 插入 favicon<br>
<code>feed_tag(path, [options])</code> 插入 feed 链接<br>
<code>is_*()</code> 系列条件函数，<code>current</code> <code>home</code> <code>post</code> <code>archive</code> <code>year</code> <code>month</code> <code>category</code> <code>tag</code></p>
<p><code>partial(layout, [locals], [options])</code> 载入其他模板文件，您可在 locals 设定区域变量。<br>
<code>paginator(options)</code> 插入分页链接<br>
<code>toc(str, [options])</code></p>
<p><code>__('next')</code> 多语言支持时，<code>__()</code> 用于转换语言。</p>
<blockquote>
<p>在模板中，透过 __ 或 _p 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。</p>
</blockquote>
<h1><a href="http://www.gruntjs.net/" target="_blank" rel="external">Grunt</a></h1>
<h2 id="构建自动化">构建自动化</h2>
<p>谈 Grunt，就要谈到“构建自动化”。</p>
<blockquote>
<p><strong>Build automation</strong> is the process of automating the creation of a software build and the associated processes including: compiling computer source code into binary code, packaging binary code, and running automated tests.</p>
</blockquote>
<p>构建自动化有以下一些好处：</p>
<blockquote>
<ul>
<li>A necessary pre-condition for continuous integration and continuous testing 在连续集成和测试中的必要的前置条件</li>
<li>Improve product quality 改善产品质量</li>
<li>Accelerate the compile and link processing 加速编译和链接处理</li>
<li>Eliminate redundant tasks 去除冗余的任务</li>
<li>Minimize “bad builds” 减少低质量的构建</li>
<li>Eliminate dependencies on key personnel 去除关键的人员依赖</li>
<li>Have history of builds and releases in order to investigate issues 具有可供查询的构建和发布历史</li>
<li>Save time and money - because of the reasons listed above 节省时间和财力</li>
</ul>
</blockquote>
<h2 id="使用-grunt">使用 Grunt</h2>
<p>使用 Grunt 可以加快开发和自动构建。可以帮助开发者将压缩、编译、单元测试、代码检查等工作自动化。</p>
<p>三步使用 grunt：</p>
<blockquote>
<ul>
<li>Change to the project’s root directory.</li>
<li>Install project dependencies with npm install.</li>
<li>Run Grunt with grunt.</li>
</ul>
</blockquote>
<p><code>package.json</code> 保存项目元数据；<br>
<code>Gruntfile.js</code> 配置或定义任务、加载 Grunt 插件。<br>
<code>npm install &lt;module&gt; --save-dev</code> 本地安装并将依赖写入 <code>package.json</code> 中 <code>devDependencies</code>。</p>
<h2 id="gruntfile-js-配置文件"><code>Gruntfile.js</code> 配置文件</h2>
<p>Gruntfile.js 包括下面四个部分：</p>
<blockquote>
<ul>
<li>The “wrapper” function</li>
<li>Project and task configuration</li>
<li>Loading Grunt plugins and tasks</li>
<li>Custom tasks</li>
</ul>
</blockquote>
<p>包装函数（wrapper function）：概括 grunt 的配置信息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在包装函数内，初始化配置对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将 <code>package.json</code> 的项目设置保存到 <code>pkg</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkg: grunt.file.readJSON(<span class="string">'package.json'</span>)</div></pre></td></tr></table></figure>
<p>插件配置（grunt-contrib-concat 为例）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">concat: &#123;</div><div class="line">    options: &#123;</div><div class="line">        seperator: <span class="string">';'</span></div><div class="line">    &#125;,</div><div class="line">    dist: &#123;</div><div class="line">    src: [],</div><div class="line">    dest: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加载用到的插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div></pre></td></tr></table></figure>
<p>创建任务：</p>
<p>直接输入 <code>grunt</code> 执行默认任务（default）；<br>
输入 <code>grunt test</code> 可以执行自定义的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>]);</div><div class="line">grunt.registerTask(<span class="string">'test'</span>, [<span class="string">'jshint'</span>]);</div></pre></td></tr></table></figure>
<p>Grunt 常见插件：</p>
<p><code>grunt-contrib-uglify</code> 压缩 js, css 文件<br>
<code>grunt-contrib-concat</code> 连接文件<br>
<code>grunt-contrib-jshint</code> js 代码检测<br>
<code>grunt-contrib-watch</code> 代码监视</p>
<h1><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp</a></h1>
<p>Gulp 和 Grunt 干差不多的活，目前还不知道优劣。Gulp 显得简单一些。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1>EJS</h1>
<blockquote>
<p>EJS 是一个简单的模板语言，可以让你使用原生 JavaScript 生成 HTML 标记。没有关于如何组织内容的语法规则，也没有循环和控制流的重载，只是使用原生的 JavaScript。</p>
</blockquote>
<p>EJS 一个在 HTML 中嵌入原生 JS 语言的模板语言。</p>
<p>有以下特点：</p>
<blockquote>
<p>快速的编写和解析<br>
简单的模板标签: &lt;% %&gt;<br>
自定义分隔符（例如使用 <? ?>替换&lt;% %&gt;）<br>
使用 include 引入其他模板<br>
同时支持服务器端和客户端使用<br>
JavaScript 的静态缓存<br>
模板的静态缓存<br>
与 Express 视图系统兼容</p>
</blockquote>
<p>一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>), <span class="comment">// 加载 ejs 模块</span></div><div class="line">    people = [<span class="string">'geddy'</span>, <span class="string">'neil'</span>, <span class="string">'alex'</span>], <span class="comment">// 数据</span></div><div class="line">    html = ejs.render(<span class="string">'&lt;%= people.join(", "); %&gt;'</span>, &#123;people: people&#125;); <span class="comment">// ejs 渲染</span></div></pre></td></tr></table></figure>
<p>熟悉这几个标签：</p>
<ul>
<li><code>&lt;%</code> ‘Scriptlet’ 标签, 用于控制流，没有输出</li>
<li><code>&lt;%=</code> 向模板输出值（带有转义）</li>
<li><code>&lt;%-</code> 向模板输出没有转义的值</li>
<li><code>&lt;%#</code> 注释标签，不执行，也没有输出</li>
<li><code>&lt;%%</code> 输出字面的 ‘&lt;%’</li>
<li><code>%&gt;</code> 普通的结束标签</li>
<li><code>-%&gt;</code> Trim-mode (‘newline slurp’) 标签, 移除随后的换行符</li>
</ul>
<p>使用 <code>include</code> 调用的模板时路径需要 filename 选项。</p>
<h1>JADE</h1>
<p>JADE（现在改名为 Pugjs） 是一个极度注重代码简洁性的模板语言。相比 EJS 来说，渲染性能较低一些。但因为其简单的语法（对其他人来说也许算是“复杂”了）受到欢迎。</p>
<p>下面记录一些容易忘记的特殊语法：</p>
<p><code>= '\n'</code> 换行<br>
<code>!=</code> 不转义的属性</p>
<blockquote>
<p>未经转义的缓存代码十分危险。您必须正确处理和过滤用户的输入来避免跨站脚本攻击。</p>
</blockquote>
<p><code>'${}'</code> 字符串中嵌入变量</p>
<p><code>&amp;attributes({'data-foo': 'bar'})</code> 语法可以将一个对象转化为一个元素的属性列表</p>
<p>分支条件（Case）：case 是 JavaScript 的 switch 指令的缩写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- var foo = 10</div><div class="line">case foo</div><div class="line">    when 0</div><div class="line">        p eee</div><div class="line">    when 1</div><div class="line">        p fff</div><div class="line">    default</div><div class="line">        p ggg #&#123;foo&#125;</div></pre></td></tr></table></figure>
<p>分支传递 (Case Fall Through) :在 Pug 中，传递会在遇到非空的语法块前一直进行下去。如果不想输出任何东西的话，可以明确地加上一个原生的 break 语句。也可以使用块展开的语法</p>
<p>由 <code>-</code> 开始的一段为不输出的代码。另起一行并缩进可以写成块的形式。<br>
用 <code>=</code> 开始一段带有输出的代码，它应该是可以被求值的一个 JavaScript 表达式。<br>
用 <code>!=</code> 开始一段不转义的，带有输出的代码。</p>
<p>用 <code>//-</code> 进行单行注释，使用 <code>//</code> 并另起一行缩进，可进行块注释。pug 的条件注释跟 html 一样，并没有特殊的写法。</p>
<p>条件判断形式可以省略开头的 <code>-</code>, <code>if !x</code> === <code>unless x</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if x</div><div class="line">else if y</div><div class="line">else</div><div class="line">    z</div></pre></td></tr></table></figure>
<p>模板继承：<code>extends</code> 关键字允许模板去扩展一个布局或父模板，这样它就可以覆盖某些预定义的内容。</p>
<p>包含 <code>include</code> 功能允许您把另外的文件内容插入进来。</p>
<p>Pug 支持使用 <code>block</code> 和 <code>extends</code> 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。</p>
<p>Pug 允许您去替换（默认的行为）、<code>prepend</code>（向头部添加内容），或者 <code>append</code>（向尾部添加内容）一个块。当使用 <code>block append</code> 或者 <code>block prepend</code> 时，<code>block</code> 关键字是可省略的</p>
<p>嵌入 Interpolation：Pug 提供了好几种方式满足不同的嵌入需求。</p>
<p>迭代 Iteration</p>
<p><code>each</code> <code>each ... in ...</code> <code>each val, index in arr</code></p>
<p><code>for</code> <code>while</code> 也可以创建迭代</p>
<p>混入 Mixin：混入是一种允许您在 Pug 中重复使用一整个代码块的方法。<code>mixin</code> 可以写成函数形式，传入参数。在使用 <code>mixin</code> 的函数形式时，在前面加上 <code>+</code> 号，即 <code>+foo(faz)</code>。还可以使用剩余参数（rest arguments）<code>...</code> 语法来表示参数列表传入若干长度不定的参数。</p>
<p>放置纯文本</p>
<ul>
<li>管道文本：在每行加一个 <code>|</code> 字符。</li>
<li>标签的行内：文本只需要和标签名隔开一个空格。</li>
<li>标签中的块：在标签后街上一个 <code>.</code> 点号（没有空格）。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天修改了下博客模板，顺便了解了下相关的工具和模块。&lt;/p&gt;
&lt;h1&gt;HEXO&lt;/h1&gt;
&lt;p&gt;辅助函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url_for()&lt;/code&gt; 在路径前加根目录 &lt;code&gt;&amp;lt;% url_for(path) %&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;c
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="Hexo" scheme="http://lix90.github.io/tags/Hexo/"/>
    
      <category term="Grunt" scheme="http://lix90.github.io/tags/Grunt/"/>
    
      <category term="Gulp" scheme="http://lix90.github.io/tags/Gulp/"/>
    
      <category term="Jade" scheme="http://lix90.github.io/tags/Jade/"/>
    
      <category term="Pug.js" scheme="http://lix90.github.io/tags/Pug-js/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-28</title>
    <link href="http://lix90.github.io/2016/10/28/2016-10-28-daily/"/>
    <id>http://lix90.github.io/2016/10/28/2016-10-28-daily/</id>
    <published>2016-10-28T06:10:36.000Z</published>
    <updated>2016-11-19T03:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript</h1>
<p>常见的 JS 的鼠标事件：</p>
<ul>
<li>mousedown：鼠标的键钮被按下。</li>
<li>mouseup：鼠标的键钮被释放弹起。</li>
<li>click：单击鼠标的键钮。</li>
<li>dblclick：鼠标的键钮被按下。</li>
<li>contextmenu ：弹出右键菜单。</li>
<li>mouseover：鼠标移到目标的上方。</li>
<li>mouseout：鼠标移出目标的上方。</li>
<li>mousemove：鼠标在目标的上方移动。</li>
<li>mouseleave：鼠标离开目标。</li>
</ul>
<p>jQuery 有与此对应的鼠标事件的方法</p>
<p><code>map</code> 方法</p>
<p><code>arr.map(callback[, thisArg])</code>: <code>callback(currentValue, index, array)</code></p>
<p>就是遍历 <code>arr</code> 里元素，将每个元素传入给 <code>callback</code>，然后生成新的 <code>arr</code>。</p>
<p><code>setInterval</code> 在固定的时间间隔，重复调用一个函数或代码块，返回 <code>timeoutID</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> intervalID = <span class="built_in">window</span>.setInterval(myCallback, <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Code here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>===&gt; WindowTimers</p>
<p><code>clearInterval()</code> <code>clearTimeout()</code> <code>setInterval()</code> <code>setTimeout()</code><br>
<code>start</code></p>
<hr>
<h1>前端代码规范</h1>
<p><a href="http://codeguide.bootcss.com/" target="_blank" rel="external">代码规范 by @mdo</a></p>
<blockquote>
<p>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p>
</blockquote>
<h2 id="html">HTML</h2>
<ul>
<li>强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言；</li>
<li>在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性；</li>
<li>尽量最少使用标签，并保持最小的复杂度；</li>
<li>HTML 属性顺序：<code>class</code> (<code>id</code> <code>name</code>) <code>data-*</code> (<code>src</code> <code>for</code> <code>type</code> <code>href</code>) (<code>title</code> <code>alt</code>) (<code>aria-*</code>, <code>role</code>)；</li>
<li>布尔型属性不用赋值；</li>
<li>尽量避免多余的父元素；</li>
<li>尽量避免 JS 生成的标签。</li>
</ul>
<h2 id="css">CSS</h2>
<ul>
<li>用两个空格来代替制表符；</li>
<li>为选择器分组时，将单独的选择器单独放在一行；</li>
<li>在每个声明块的左花括号前添加一个空格；</li>
<li>声明块的右花括号应当单独成行；</li>
<li>每条声明语句的 <code>:</code> 后应该插入一个空格；</li>
<li>为了获得更准确的错误报告，每条声明都应该独占一行；</li>
<li>所有声明语句都应当以分号结尾；</li>
<li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格；</li>
<li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格；</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0；</li>
<li>十六进制值应该全部小写；</li>
<li>尽量使用简写形式的十六进制值；</li>
<li>为选择器中的属性添加双引号；</li>
<li>避免为 0 值指定单位。</li>
</ul>
<h3 id="声明顺序">声明顺序</h3>
<p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p>
<ul>
<li>Positioning</li>
<li>Box model</li>
<li>Typographic</li>
<li>Visual</li>
</ul>
<blockquote>
<p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。</p>
</blockquote>
<h3 id="不要使用-import">不要使用 @import</h3>
<blockquote>
<p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p>
</blockquote>
<blockquote>
<ul>
<li>使用多个 <code>&lt;link&gt;</code> 元素</li>
<li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li>
<li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li>
</ul>
</blockquote>
<h3 id="媒体查询的位置">媒体查询的位置</h3>
<blockquote>
<p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。</p>
</blockquote>
<h3 id="单行规则声明">单行规则声明</h3>
<blockquote>
<p>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p>
</blockquote>
<h3 id="简写形式的属性声明">简写形式的属性声明</h3>
<blockquote>
<p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。</p>
</blockquote>
<h3 id="less-和-sass-中的嵌套">Less 和 Sass 中的嵌套</h3>
<p>避免非必要的嵌套。</p>
<h3 id="注释">注释</h3>
<blockquote>
<p>请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p>
</blockquote>
<h3 id="class-命名">class 命名</h3>
<ul>
<li>class 名称中只能出现小写字符和破折号（dashe）；</li>
<li>破折号应当用于相关 class 的命名（类似于命名空间）；</li>
<li>避免过度任意的简写；</li>
<li>class 名称应当尽可能短，并且意义明确；</li>
<li>使用有意义的名称；</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<h3 id="选择器">选择器</h3>
<ul>
<li>对于通用元素使用 class ，这样利于渲染性能的优化。</li>
<li>对于经常出现的组件，避免使用属性选择器（例如，[class^=&quot;…&quot;]）。浏览器的性能会受到这些因素的影响。</li>
<li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3；</li>
<li>只有在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）。</li>
</ul>
<p><code>合理使用标签</code> <code>降低选择器复杂度</code></p>
<h3 id="代码组织">代码组织</h3>
<ul>
<li>以组件为单位组织代码段。</li>
<li>制定一致的<strong>注释规范</strong>。</li>
<li><strong>使用一致的空白符将代码分隔成块</strong>，这样利于扫描较大的文档。</li>
<li>如果使用了多个 CSS 文件，将其<strong>按照组件而非页面的形式分拆</strong>，因为页面会被重组，而组件只会被移动。</li>
</ul>
<p><code>组件化</code> <code>块状</code></p>
<h3 id="编辑器配置">编辑器配置</h3>
<p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p>
<ul>
<li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li>
<li>保存文件时，删除尾部的空白符。</li>
<li>设置文件编码为 UTF-8。</li>
<li>在文件结尾添加一个空白行。</li>
</ul>
<p>在 Emacs 中配置两个空格缩进：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(defun my/web-mode-indent-style ()</div><div class="line">    &quot;Personal web mode indent style.&quot;</div><div class="line">    ;; 设置默认的缩进方式</div><div class="line">    (setq-default indent-tabs-mode nil)</div><div class="line"></div><div class="line">    ;; 设置 web-mode 的缩进</div><div class="line">    (setq web-mode-markup-indent-offset 2</div><div class="line">        web-mode-css-indent-offset 2</div><div class="line">        web-mode-code-indent-offset 2</div><div class="line">        web-mode-indent-style 2)</div><div class="line">)</div><div class="line">(add-hook &apos;web-mode-book &apos;my/web-mode-indent-style)</div><div class="line"></div><div class="line">;; 设置 CSS 缩进</div><div class="line">(setq css-indent-offset 2)</div></pre></td></tr></table></figure>
<hr>
<h1>Emacs</h1>
<h2 id="golden-ratio-mode">golden-ratio-mode</h2>
<p>当开启多个缓冲区（buffers）时，希望对不同的 buffer 高度和宽度进行调整。<a href="https://github.com/roman/golden-ratio.el" target="_blank" rel="external">golden-ratio-mode</a> 满足此要求，可用于自动调整 buffer 宽高。当切换到某个 buffer，会自动增加活动 buffer 的高度或宽度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(use-package golden-ratio</div><div class="line">  :ensure t</div><div class="line">  :diminish golden-ratio-mode</div><div class="line">  :init</div><div class="line">  (progn</div><div class="line">  (golden-ratio-mode t) ;; 开启 golden-ratio</div><div class="line">  (setq golden-ratio-adjust-factor .8 ;; 调整垂直比例</div><div class="line">    golden-ratio-wide-adjust-factor .8 ;; 调整水平宽度比例</div><div class="line">    golden-ratio-exclude-modes &apos;(list &quot;projectile-mode&quot; &quot;project-explorer-mode&quot;) ;; 指定不使用 golden-ratio 的 major-mode</div><div class="line">    )</div><div class="line">    (golden-ratio-toggle-widescreen) ;; 开启宽屏模式</div><div class="line">    ))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;p&gt;常见的 JS 的鼠标事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mousedown：鼠标的键钮被按下。&lt;/li&gt;
&lt;li&gt;mouseup：鼠标的键钮被释放弹起。&lt;/li&gt;
&lt;li&gt;click：单击鼠标的键钮。&lt;/li&gt;
&lt;li&gt;dblclick
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Coding style" scheme="http://lix90.github.io/tags/Coding-style/"/>
    
      <category term="HTML" scheme="http://lix90.github.io/tags/HTML/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-27</title>
    <link href="http://lix90.github.io/2016/10/27/2016-10-27-daily/"/>
    <id>http://lix90.github.io/2016/10/27/2016-10-27-daily/</id>
    <published>2016-10-27T15:11:30.000Z</published>
    <updated>2016-11-19T03:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Javascript</h1>
<h2 id="数组-array">数组 Array</h2>
<p>可包含任意数据类型，并通过索引来访问每个元素。<br>
Array 是可变的，很灵活，可通过索引或者赋新的值和长度值改变 Array 的大小和值。<br>
在写代码时，不建议直接修改 Array 的大小，访问索引时要确保索引不会越界。</p>
<p><code>length</code> 获取长度<br>
<code>indexOf()</code> 搜索指定元素的位置<br>
<code>slice</code> 截取 Array 的部分元素，返回新的 Array；注意 slice 的起始参数包括开始索引，不包括结束索引。<br>
<code>push</code> 向 Array 的末尾添加若干元素<br>
<code>pop</code> 删除 Array 的最后一个元素<br>
<code>unshift</code> 往 Array 头部添加若干元素<br>
<code>shift</code> 删除 Array 的第一个元素<br>
<code>sort</code> 对 Array 进行排序，并且修改 Array 的元素位置，默认排序标准为 <code>string Unicode code points</code>。<br>
<code>reverse</code> 反转 Array<br>
<code>splice</code> 从指定的索引开始删除若干元素，再从该位置添加若干元素。<br>
<code>concat</code> 连接 Array，并返回新的 Array；concat 方法可以接收任一个元素和 Array。<br>
<code>join</code> 将 Array 的每个元素都用指定的字符串连接起来，然后返回连接后的字符串。</p>
<h2 id="jquery">jQuery</h2>
<p>jQuery 可以做许多事情：</p>
<ul>
<li>selectors 选择器 <code>$('*').css('property', 'values');</code></li>
<li>animations 创建动画 <code>$('selector').animate(...);</code></li>
<li>filters 过滤机制:
<ul>
<li>index filters; <code>$('selector:eq(2)'.css(...));</code></li>
<li>relationship filters; <code>$('selector:parent'.css(...));</code></li>
<li>attribute filters; <code>$('tag[name^=&quot;foo&quot;]').css(...);</code></li>
</ul>
</li>
<li>image swap 图片的操作 <code>$('img').attr('src', '...');</code></li>
<li>methods 方法
<ul>
<li>attr methods; <code>.attr('attribute', '...');</code></li>
<li>class methods; <code>.hasClass()</code> <code>.addClass()</code></li>
<li>content methods; <code>.text()</code></li>
</ul>
</li>
<li>DOM traversal DOM 遍历</li>
<li>event binding 事件绑定 <code>.bind('event', ...)</code></li>
</ul>
<p>@ 2016-10-20 15:36:55</p>
<h2 id="optimizing-the-dom">Optimizing the DOM</h2>
<ol>
<li>minify 最小化</li>
<li>compress 压缩</li>
<li>cache 缓存</li>
</ol>
<h3 id="onblocking-css">onblocking css</h3>
<p>将不同媒体的样式分离为单独的样式表，然后根据媒体类型进行加载。</p>
<h3 id="optimization-js">Optimization JS</h3>
<p>JS 阻碍网页的解析</p>
<h3 id="async-js">Async JS</h3>
<ol>
<li>Does not block DOM construction</li>
<li>Does not block on CSSOM</li>
</ol>
<p>@ 2016-10-19 10:57:59</p>
<p>Q: What is <strong>callback</strong>?</p>
<hr>
<h1>Vuejs</h1>
<p>Vuejs 有哪些优点？</p>
<ul>
<li>Reactive</li>
<li>Component based</li>
<li>Modular</li>
<li>Simple to use animations right out of the box</li>
<li>Easy to learn</li>
</ul>
<hr>
<h1>CSS</h1>
<h2 id="zoom-属性">zoom 属性</h2>
<p><code>zoom: auto | &lt;number&gt; | &lt;percentage&gt;;</code></p>
<blockquote>
<p>The zoom property in CSS allows you to scale your content. It is non-standard, and was originally implemented only in Internet Explorer. Although several other browsers now support zoom, it isn’t recommended for production sites.</p>
</blockquote>
<p>用于内容的缩放。zoom 是一个老版 IE 属性，在实际的使用中，不建议使用。如果要缩放内容，可以使用 <code>CSS transforms</code>，也可以使用 filters，如果需要老版的 IE 支持。</p>
<p>兼容 IE6、IE7、IE8 浏览器，经常会遇到一些问题，可以使用 <code>zoom:1</code> 来解决，有如下作用：</p>
<ul>
<li>触发 IE 浏览器的 haslayout</li>
<li>解决 IE 下的浮动，margin 重叠等问题。</li>
</ul>
<p>zoom 的作用：</p>
<ul>
<li>检查页面的标签是否闭合</li>
<li>样式排除法</li>
<li>模块确认法</li>
<li>检查是否清除浮动</li>
<li>检查 IE 下是否触发 haslayout</li>
<li>边框背景调试法</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.jb51.net/css/40285.html" target="_blank" rel="external">CSS中不为人知Zoom属性的使用介绍(IE私有属性)</a></li>
<li><a href="https://css-tricks.com/almanac/properties/z/zoom/" target="_blank" rel="external">CSS-tricks: zoom</a></li>
<li><a href="http://www.useragentman.com/IETransformsTranslator/" target="_blank" rel="external">IE’s CSS3 Transforms Translator</a></li>
</ul>
<h2 id="bfc-块级格式化上下文">BFC 块级格式化上下文</h2>
<p>BFC 决定盒子的布局及浮动元素相互影响的一个因素。</p>
<p>下列情况可以创建一个块格式化上下文：</p>
<ul>
<li>根元素或其它包含它的元素（超级块级元素）</li>
<li>浮动（元素 float 不为 none）</li>
<li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li>
<li>行内块 inline-blocks（元素的 display: ineline-block;）</li>
<li>表格单元格（元素的 display: table-cell, HTML 表格单元格默认属性）</li>
<li>表格标题（元素的 display: table-caption, HTML表格标题默认属性）</li>
<li>overflow 的值不为 visible 的元素</li>
<li>弹性盒子 flexboxes（元素的 display: flex 或 inline-block）</li>
</ul>
<p>块格式化上下文包括了创建该上下文的元素的所有子元素，但不包括创建了新的块格式化上下文的子元素。<br>
块格式化上下文对定位与清除浮动很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除 同一块格式化上下文中 在它前面的元素的浮动。</p>
<p>参考资料：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">块级格式化上下文</a></p>
<h2 id="如何通过-css-动画提升用户体验？">如何通过 CSS 动画提升用户体验？</h2>
<p>什么时候使用动画？</p>
<ul>
<li>指明方向 orientation: where am i now</li>
<li>提示功能的变化 functional change: what does this element to now</li>
<li>提示新的元素 new element: what should i look at</li>
<li>强调 highlight: what is important here</li>
<li>视觉反馈 visual feedback: is the layout understanding what I am asking it to do</li>
<li>提示系统状态 system status: is this working? how long will it take</li>
</ul>
<hr>
<h1>HTML</h1>
<h2 id="html-语义化">HTML 语义化</h2>
<p>语义化：让机器读懂内容。</p>
<p>Web 规模扩大 —&gt; 机器处理内容 —&gt; 机器读懂内容？—&gt; 语义化</p>
<blockquote>
<p>内容的语义表达能力和 AI 的智能程度决定了机器分析处理 Web 内容能力的高低。</p>
<p><strong>内容与样式分离</strong>：将内容本身的语义合理地表述出来，再为不同的用户代理设计不同的样式描述。这样我们在提供内容的时候，首先要做的就是将内容本身进行合理的描述，暂时不用考虑它的最终呈现会是什么样子。</p>
<p>所谓语义本身就是对符号的一种共识，被认可的程度越高、范围越广，人们就越可以依赖它实现各种各样的功能。</p>
<p>大部分的语义网的表示规范都基于XML，因为它是一种完备的通用描述语言。</p>
<p>所谓 web 语义化，从广义上来说，不仅要使机器（搜索引擎等）易于理解，也要使人易于理解。</p>
<p>语义网的目标就是为了使得网络上的信息更加容易被机器理解和查找，从而提升人类使用网络获取信息的体验。</p>
<p>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和写出更优雅的代码的同时，让浏览器的爬虫和机器很好的解析。</p>
</blockquote>
<p>Why?</p>
<blockquote>
<ul>
<li>有利于 SEO，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重。</li>
<li>语义化的 HTML 在没有 CSS 的情况下也能呈现较好的内容结构与代码结构</li>
<li>方便其他设备的解析</li>
<li>便于团队开发和维护</li>
</ul>
</blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000005626375" target="_blank" rel="external">HTML语义化</a></li>
<li><a href="https://www.zhihu.com/question/20455165" target="_blank" rel="external">如何理解 Web 语义化？</a></li>
<li><a href="http://chenhaizhou.github.io/2015/12/09/html-sense.html" target="_blank" rel="external">谈谈对HTML语义化的理解</a></li>
</ul>
<h1>HTTP</h1>
<h2 id="get-与-post">GET 与 POST</h2>
<p>HTTP 协议中的两种发送请求的方法。</p>
<p>HTTP 是基于 TCP/IP 的关于数据如何在万维网中如何通信的协议。</p>
<blockquote>
<p>HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET/POST 都是TCP链接。GET 和 POST 能做的事情是一样一样的。你要给 GET 加上 request body，给 POST 带上 url 参数，技术上是完全行的通的。<br>
HTTP 只是个行为准则，而 TCP 才是 GET 和 POST 怎么实现的基本。<br>
GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。<br>
GET 和 POST 还有一个重大区别，简单的说：GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。<br>
对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</p>
</blockquote>
<hr>
<h1>Emacs</h1>
<p>将启动 Emacs 后默认的 <code>*scratch* buffer</code> 的 major mode 改为 markdown-mode</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(setq initial-major-mode &apos;markdown-mode)</div><div class="line">(setq initial-scratch-message &quot;\</div><div class="line"># This buffer is for notes you don&apos;t want to save, and for Markdown.)</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<ul>
<li><a href="http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/" target="_blank" rel="external">Configure the Scratch Buffer’s Mode</a></li>
</ul>
<h2 id="lisp-and-elisp-小记">lisp and elisp 小记</h2>
<p><code>when</code>: <code>(when COND BODY ...)</code> 当 COND 为真，eval BODY；按顺序 eval BODY 中的项，返回最后一项的值。<br>
<code>and</code>: <code>(and CONDITIONS ...)</code> 当 CONDITIONS 全部为 non-nil 时返回最后一个 arg 的值；如果一个为 nil，后面的都不用 eval，直接返回 nil。<br>
<code>listp</code>: <code>(listp OBJECT)</code> 当 OBJECT 为 list 返回 t，否则返回 nil。<br>
<code>cons</code>: <code>(cons CAR CDR)</code> 创建新的 cons。<br>
<code>not</code>: <code>(not OBJECT)</code> 如果 OBJECT 为 nil 范围 t，否则返回 nil。<br>
<code>car</code>: <code>(car LIST)</code> 返回 LIST 中的第一个值；如果 arg 为 nil，返回 nil；如果 arg non-nil 且不是 cons cell，那么报错。<br>
<code>cdr</code>: <code>(cdr LIST)</code> 返回 LIST 中除第一个值之外剩余的值；如果 arg 为 nil，返回 nil；如果 arg non-nil 且不是 cons cell，那么报错。<br>
<code>cadr</code>: <code>(cadr X)</code> 返回 X 的 cdr 的 car，即范围 X 的第二个元素。<br>
<code>nth</code>: <code>(nth N LIST)</code> 范围 LIST 中第 N 个元素。<br>
<code>progn</code>: <code>(progn BODY ...)</code> 按顺序 eval BODY，返回最后一项的值。<br>
<code>if</code>: <code>(if COND THEN ELSE)</code> 如果 COND 为 non-nil，执行 THEN，否则执行 ELSE；返回 THEN 的值，或者 ELSE 的最后一项的值；THEN 只能有一个表达式，但是 ELSE 可以有零到多个表达式；如果 COND 为 nil，且没有 ELSE，整个 IF 语句返回的值为 nil。<br>
<code>cond</code>: <code>(cond CLAUSES...)</code> 当一个 clause 执行完再执行下一个 clause. clause 的表达式为 <code>(CONDITION BODY...)</code>. CONDITION eval 的值为 non-nil，那么 eval BODY 表达式中的项目，并且返回最后一个项目的值。如果 clause 表达式仅仅只有一个元素，如 <code>(CONDITION)</code>，如果 CONDITION 为 non-nil，那么返回 CONDITION 的值。如果没有 clause 执行成功，那么 cond 返回 nil。<br>
<code>eq</code>: <code>(eq OBJ1 OBJ2)</code> 如果两个 args 为相同的 Lisp 对象，那么返回 t。<br>
<code>defvar</code>: <code>(defvar SYMBOL &amp;optional INITVALUE DOCSTRING)</code> 定义 SYMBOL 为一个变量，然后返回 SYMBOL 的值。</p>
<p><strong>Q: The differences between Macros and Functions?</strong><br>
在后面的每日总结有提到两者的差异（更新 @2016-11-19）</p>
<hr>
<h1>Python</h1>
<p><code>/</code> 与 <code>//</code> 的差别</p>
<p>在 python2 中，当除数和被除数有一个为浮点型，/ 为一般的除法，如果除数和被除数均为整数型，/ 为整除。而 // 在任何情况下都是整除。而在 python3 中，/ 为浮点除法，// 为整除除法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Javascript&lt;/h1&gt;
&lt;h2 id=&quot;数组-array&quot;&gt;数组 Array&lt;/h2&gt;
&lt;p&gt;可包含任意数据类型，并通过索引来访问每个元素。&lt;br&gt;
Array 是可变的，很灵活，可通过索引或者赋新的值和长度值改变 Array 的大小和值。&lt;br&gt;
在写代码时，不
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="JavaScript" scheme="http://lix90.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Python" scheme="http://lix90.github.io/tags/Python/"/>
    
      <category term="HTTP" scheme="http://lix90.github.io/tags/HTTP/"/>
    
      <category term="HTML" scheme="http://lix90.github.io/tags/HTML/"/>
    
      <category term="Emacs" scheme="http://lix90.github.io/tags/Emacs/"/>
    
      <category term="jQuery" scheme="http://lix90.github.io/tags/jQuery/"/>
    
      <category term="Vue.js" scheme="http://lix90.github.io/tags/Vue-js/"/>
    
      <category term="DOM" scheme="http://lix90.github.io/tags/DOM/"/>
    
      <category term="elisp" scheme="http://lix90.github.io/tags/elisp/"/>
    
  </entry>
  
  <entry>
    <title>每日总结 2016-10-26</title>
    <link href="http://lix90.github.io/2016/10/26/2016-10-26-daily/"/>
    <id>http://lix90.github.io/2016/10/26/2016-10-26-daily/</id>
    <published>2016-10-26T01:30:34.000Z</published>
    <updated>2016-11-19T03:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1>机器学习</h1>
<p>Basic premise of learning</p>
<blockquote>
<p>using a set of observations (samples) to uncover an underlying process (distributions)</p>
</blockquote>
<p>几种学习类型：</p>
<ul>
<li>Supervised learning: we get (input, correct output)</li>
<li>Unsupervised learning: instead of (input, correct output), we get (input, ?)</li>
<li>Reinforcement learning: instead of (input, correct output), we get (input, <em>some</em> output, <strong>grade for this output</strong>)</li>
</ul>
<p>什么是机器学习？</p>
<blockquote>
<p>Algorithms for inferring unknowns from knowns.<br>
算法，推论，未知，已知</p>
</blockquote>
<h2 id="机器学习应用">机器学习应用</h2>
<ul>
<li>识别垃圾邮件</li>
<li>识别手写字</li>
<li>谷歌街道</li>
<li>语音识别</li>
<li>Netflix 推荐系统</li>
<li>Navigation 导航</li>
<li>气候模型：解释和预测</li>
</ul>
<h2 id="什么时候使用机器学习？">什么时候使用机器学习？</h2>
<ul>
<li>人类能力不可及：火星探测</li>
<li>人类无法解释的问题：语音识别</li>
<li>解决方案随着时间而变化：温度控制</li>
<li>解决方案需要对个案进行调整</li>
<li>问题大小超出了人类的合理能力范围</li>
</ul>
<h2 id="监督学习">监督学习</h2>
<ul>
<li>分类问题</li>
<li>回归问题</li>
</ul>
<p>有训练集（包含数据及其分类）及测试集（有数据没分类）<br>
从二元分类到多元分类</p>
<h2 id="非监督学习">非监督学习</h2>
<ul>
<li>聚类（Clustering）：K-均值、混合高斯、层次聚类、最大期望算法</li>
<li>密度估计（Density estimation）</li>
<li>降维（Dimensionality reduction）：因子分析、主成分分析、独立成分分析、隐马尔科夫模型</li>
</ul>
<p>没有训练集也没有奖励与惩罚</p>
<h2 id="监督学习与非监督学习的变式">监督学习与非监督学习的变式</h2>
<p>Semi-supervised learning<br>
Active learning<br>
Decision theory<br>
Reinforcement learning 增强学习</p>
<ul>
<li>结果会有相应的奖励与惩罚（Rewards or losses）</li>
<li>目标：奖励最大化</li>
</ul>
<hr>
<h2 id="学习的成分">学习的成分</h2>
<ul>
<li>未知的目标函数 f: x —&gt; y；</li>
<li>X 的分布 P；</li>
<li>训练集 D；</li>
<li>学习算法 A；</li>
<li>假设集 H。</li>
</ul>
<h2 id="机器学习的本质">机器学习的本质</h2>
<ul>
<li>A pattern exists; 有规律存在（学习的对象）</li>
<li>We cannot pin it down mathematically; 无法在数学上进行确定（否则没有学习的必要）</li>
<li>We have data on it. 有足够的数据（学习的基础）</li>
</ul>
<hr>
<p>Hoeffding’s inequality<br>
PAC: probability approximately correct</p>
<p>通过概率论的方法来表示对未知的学习。<br>
什么为学习？当前数据集所告知我们数据集之外信息（推广度问题）。<br>
<strong>样本复杂度</strong>：随着问题规模的增长所带来的所需训练样本的增长。<br>
在实际问题中，限制学习器成功的最大因素是有限的可用的训练数据。<br>
<strong>学习的可行性</strong>：可以通过训练错误率估计真实错误率；存在数据集 D，使得可以在假设集 H 中自由的选择子假设 h。<br>
如果现有有限个假设且训练数据量够多的情况下，那么不管我们如何选择训练数据，训练错误率和真实错误率都会很接近；我们设计算法来找一个 Ein 最小的假设，PAC 理论就保证了 Eout 很小。这样机器学习算法是有可能学到有用的知识的。</p>
<h1>CSS</h1>
<h2 id="margin">Margin</h2>
<p>关于 Margin：</p>
<blockquote>
<p>The margin property defines <strong>the outermost portion of the box model</strong>, creating space around an element, outside of any defined borders. Margins are set using lengths, percentages, or the keyword auto and can have <strong>negative values</strong>.</p>
</blockquote>
<p>垂直 margin 合并的好处：</p>
<ul>
<li>First, they prevent empty elements from adding extra, usually undesirable, vertical margin space. 组织了空元素增加多余的垂直外边距空间。</li>
<li>Second, they allow for a more consistent approach to declaring universal margins across page elements. 让整个页面元素具有更一致的方式来声明外边距。</li>
<li>Third, margin collapse also applies to nested elements. 外边距合并对嵌入的元素也起作用。</li>
</ul>
<h2 id="css-浮动">CSS 浮动</h2>
<ul>
<li><strong>脱离</strong>文档的常规流（Normal flow）</li>
<li>不出现外边距合并</li>
<li>需要指明浮动元素宽度，否则元素的宽度为<strong>零</strong>（或者最小字符宽度）</li>
<li>浮动元素的容器块为最近的<strong>块级</strong>祖先元素</li>
<li>一般来说浮动元素会成为块级盒</li>
</ul>
<blockquote>
<p>Collapsing almost always needs to be dealt with to prevent strange layout and cross-browser problems. We fix it <strong>by clearing the float after the floated elements in the container but before the close of the container.</strong></p>
</blockquote>
<h2 id="常见清除浮动的办法">常见清除浮动的办法</h2>
<ol>
<li>clear 属性</li>
<li>空 DIV 法：不如何“结构与表现分离原则”</li>
<li>Overflow 法：可能有副作用</li>
<li>Clearfix 法</li>
</ol>
<blockquote>
<p>bear in mind that the overflow property isn’t specifically for clearing floats. <strong>Be careful not to hide content or trigger unwanted scrollbars.</strong></p>
</blockquote>
<h2 id="css3-提供了几种新的处理布局的方法">CSS3 提供了几种新的处理布局的方法</h2>
<ol>
<li>Flexbox 弹性盒子</li>
<li>Multi-column layout 多栏布局</li>
<li>Grid layout 格子布局</li>
</ol>
<h1>杂项</h1>
<p>解决 Git push 冲突</p>
<ul>
<li>当Git无法自动合并分支时，就必须首先解决冲突。Git用 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容。解决冲突后，再提交，合并完成。用git log --graph命令可以看到分支合并图。</li>
</ul>
<p>Helvetica 纪录片：字体设计<br>
Code Rush 纪录片：代码奔腾 Firefox 的诞生<br>
Just for Fun 书籍：Linus 讲述 Linux 如何发明</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;机器学习&lt;/h1&gt;
&lt;p&gt;Basic premise of learning&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;using a set of observations (samples) to uncover an underlying process (distr
    
    </summary>
    
      <category term="Daily" scheme="http://lix90.github.io/categories/Daily/"/>
    
    
      <category term="CSS" scheme="http://lix90.github.io/tags/CSS/"/>
    
      <category term="Git" scheme="http://lix90.github.io/tags/Git/"/>
    
      <category term="Machine Learning" scheme="http://lix90.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 学习记录</title>
    <link href="http://lix90.github.io/2016/10/22/2016-10-22-http/"/>
    <id>http://lix90.github.io/2016/10/22/2016-10-22-http/</id>
    <published>2016-10-22T11:45:33.000Z</published>
    <updated>2016-11-28T12:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP/0.9 —&gt; HTTP/1.0 —&gt; HTTP/1.1 —&gt; SPDY 协议 —&gt; HTTP/2</p>
<h1>HTTP/1.0</h1>
<p>主要缺点：每个 TCP 连接只能发送一个请求。TCP 连接的新建成本高，所以 HTTP/1.0 性能较差。为了避免这个问题，在浏览器请求时，使用一个非标准的 <code>Connection</code> 字段：<code>Connection: keep-alive</code>，要求服务器不要关闭 TCP 连接，以便其他请求复用。然而，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p>
<h1>HTTP/1.1</h1>
<p>目前是最流行的版本。该版本最大的变化是，引入了<strong>持久连接（persistent connection）</strong>，即 TCP 连接默认不关闭，可被多个请求复用，无须申明 <code>Connection: keep-alive</code>。当客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。更规范的做法是，在客户端最后一次请求时，发送 <code>Connection: close</code>，明确要求服务器关闭 TCP 连接。</p>
<p>引入管道机制：在同一个 TCP 连接里面，客户端可以同时发送多个请求。</p>
<p>缺点：虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这就会出现&quot;队头堵塞&quot;（Head-of-line blocking）。</p>
<h1>HTTP/2</h1>
<ul>
<li>二进制协议：头信息和数据体都是二进制，并且统称为&quot;帧&quot;（frame）：头信息帧和数据帧。<br>
多工：双向的、实时的通信。</li>
<li>数据流：HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流 ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID 一律为奇数，服务器发出的，ID 为偶数。</li>
<li>头信息压缩机制（header compression）</li>
<li>服务器推送</li>
</ul>
<p>问题：</p>
<ol>
<li>HTTP/1.0 相对于 HTTP/0.9 有哪些新标准？HTTP/1.0 有什么缺点？</li>
<li>HTTP/1.1 相对于 HTTP/1.0 有哪些新标准？HTTP/1.1 有什么缺点？</li>
<li>HTTP/2 相对于 HTTP/1.1 有哪些新标准？</li>
<li>HTTPS 是什么？与 HTTP/2 有什么差别？</li>
</ol>
<p>参考资料：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">阮一峰：HTTP 协议入门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP/0.9 —&amp;gt; HTTP/1.0 —&amp;gt; HTTP/1.1 —&amp;gt; SPDY 协议 —&amp;gt; HTTP/2&lt;/p&gt;
&lt;h1&gt;HTTP/1.0&lt;/h1&gt;
&lt;p&gt;主要缺点：每个 TCP 连接只能发送一个请求。TCP 连接的新建成本高，所以 HTTP/1.
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
      <category term="Web" scheme="http://lix90.github.io/categories/Notes/Web/"/>
    
    
      <category term="HTTP" scheme="http://lix90.github.io/tags/HTTP/"/>
    
      <category term="Web" scheme="http://lix90.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>D3.js 入门学习记录</title>
    <link href="http://lix90.github.io/2016/10/17/2016-10-17-d3js-intro/"/>
    <id>http://lix90.github.io/2016/10/17/2016-10-17-d3js-intro/</id>
    <published>2016-10-17T08:23:07.000Z</published>
    <updated>2016-11-19T03:29:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://Dashingd3js.com" target="_blank" rel="external">Dashingd3js.com</a> 上的 D3.js 教程学习笔记。</p>
<h1>基础</h1>
<p>使用 D3.js 进行数据可视化需要了解以下内容：</p>
<ul>
<li>现代浏览器</li>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
<li>DOM</li>
<li>SVG</li>
<li>网页元素审查器（Web Inspecter）</li>
</ul>
<h1>添加 DOM 元素</h1>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>).append(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
<p><code>D3.select()</code> 选择方法使用 CSS3 选择器来抓取 DOM 元素。当元素被选中，算子（operators）能够获取或设置属性、样式、文本内容等。</p>
<p><code>D3.append()</code> 添加元素为当前选中的父级元素的最后一个子元素。</p>
<h1>添加 SVG 元素</h1>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">  .append(<span class="string">"svg"</span>)</div><div class="line">  .attr(<span class="string">"width"</span>, <span class="number">50</span>)</div><div class="line">  .attr(<span class="string">"height"</span>, <span class="number">50</span>)</div><div class="line">  .append(<span class="string">"circle"</span>)</div><div class="line">  .attr(<span class="string">"cx"</span>, <span class="number">25</span>)</div><div class="line">  .attr(<span class="string">"cy"</span>, <span class="number">25</span>)</div><div class="line">  .attr(<span class="string">"r"</span>, <span class="number">25</span>)</div><div class="line">  .style(<span class="string">"fill"</span>, <span class="string">"purple"</span>)</div></pre></td></tr></table></figure>
<p><code>d3.style()</code> 样式算子对元素的样式进行操作。</p>
<p>与 jQuery 类似，D3js 通过点号 <code>.</code> 构成链式语法。在链式语法中，结果与算子和方法顺序有关。</p>
<h1>捆绑数据到 DOM 元素中</h1>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> theData = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</div><div class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>)</div><div class="line">    .data(theData)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="string">"Hello "</span>);</div></pre></td></tr></table></figure>
<p><code>d3.selectAll()</code> 全选方法选择所有与选择器字符串匹配的 DOM 元素。但是上面的代码里头，并并有实际选择元素，而是返回的空选择（虚拟选择）。后面通过 <code>.data()</code> 和 <code>.enter()</code> 将数据绑定到空选择中。</p>
<p><code>.enter()</code> 方法从数据算子中返回虚拟键入选择，返回占位符元素。该方法只在 <code>.data()</code> 上操作生效。</p>
<p><code>.append()</code> 在占位符上添加 DOM 元素。</p>
<p><code>.text()</code> 文本方法添加文本到对于 DOM 元素上。</p>
<p>其中，数据被保存在 <code>__data__</code> 属性中。</p>
<p>如何将捆绑的数据提取出来呢？</p>
<p><code>.text( function(d) { return d; } )</code> 其中，匿名函数会对遍历所有元素的数据，分别返回对于的值。<code>d</code> 变量在 D3.js 被用来指代当前元素的 <code>__data__</code> 属性。另外，D3.js 还提供了两个变量 <code>this</code> 和 <code>i</code>。<code>this</code> 指代当前 DOM 元素。<code>i</code> 指代当前选中的元素的下标，<code>i</code> 从0开始计数。所有数据是按顺序分别处理。</p>
<h1>根据数据创建 SVG 元素</h1>
<p>建立数组：<code>var newArray = [10, 20, 30];</code><br>
将数据指派给 SVG 元素的属性值 <code>.attr('r', function (d) { return d; }</code></p>
<h1>使用 SVG 坐标空间</h1>
<p>SVG 的坐标空间与数学中的坐标空间有两点差异：</p>
<ul>
<li>SVG 的坐标空间的零点位于左上角；</li>
<li>SVG 的坐标空间的 Y 轴由上至下延伸。</li>
</ul>
<h1>D3.js 支持的数据结构</h1>
<p>数组（Array）：<code>var newArray = [30, 70, 110];</code> 数组可以包含任何对象，包括数字，对象，字符串，数组，HTML元素，DOM元素等。</p>
<p><code>d3.select()</code> 所得到的也是数组。</p>
<p>D3.js 可以支持以下数据来源：</p>
<ul>
<li>XMLHttpRequest</li>
<li>文本文件</li>
<li>JSON blob</li>
<li>HTML 文档块</li>
<li>XML 文档块</li>
<li>CSV 文件</li>
<li>TSV 文件</li>
</ul>
<p>数组甚至可以包含 JSON 数据结构。</p>
<h1>使用 JSON 对象</h1>
<p>使用 JSON 数据结构可以简化代码，使用起来更方便。</p>
<h1>使用 D3.js 绘制 SVG 基本形状的图形</h1>
<p>只要知道相关图形元素的属性，那么就可以通过 D3.js 的算子进行操作了。</p>
<p>绘制一个圆</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"25"</span> <span class="attr">fill</span>=<span class="string">"purple"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonCircle = [ &#123; <span class="string">"x_axis"</span>: <span class="number">30</span>, <span class="string">"y_axis"</span>: <span class="number">30</span>, <span class="string">"radius"</span>: <span class="number">20</span>, <span class="string">"color"</span>: <span class="string">"green"</span>&#125; ];</div><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">    .attr(<span class="string">"height"</span>, <span class="number">200</span>)</div><div class="line"><span class="keyword">var</span> circles = svgContainer.selectAll(<span class="string">"circle"</span>)</div><div class="line">    .data(jsonCircles)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"circle"</span>)</div><div class="line"><span class="keyword">var</span> circleAttributes = circles</div><div class="line">    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.x_axis &#125;)</div><div class="line">    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.y_axis &#125;)</div><div class="line">    .attr(<span class="string">"r"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.radius&#125;)</div><div class="line">    .style(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.color &#125;);</div></pre></td></tr></table></figure>
<p>其他简单图形都差不多，只是属性不一样。以此类推。</p>
<h1>SVG 路径</h1>
<p>SVG 路径为一个图形的轮廓。可以使用 SVG 的路径绘制任意形状。路径可以比作钢笔落笔绘制轮廓的过程。路径由属性 <code>d</code> 表示，其语法包括一下几个部分：</p>
<ul>
<li>moveto：设置一个新的点</li>
<li>lineto：绘制一条直线</li>
<li>curveto：绘制一条曲线（贝塞尔曲线）</li>
<li>arc：椭圆或者圆弧</li>
<li>closepath：通过绘制线条封闭当前的图形</li>
</ul>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">" M 10 25</span></span></div><div class="line">              L 10 75</div><div class="line">              L 60 75</div><div class="line">              L 10 25"</div><div class="line">              <span class="attr">stroke</span>=<span class="string">"red"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"none"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，路径中的字母是大小写有区分的，大写为绝对定位，小写为相对定位。<br>
要绘制更复杂的图形，使用 SVG 是相当难的。所以 D3.js 可以拯救这部分需求的用户。</p>
<p>使用 D3.js 提供的绘制 SVG 路径的方法要方便许多。</p>
<p>绘制直线：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//The data for our line</span></div><div class="line"><span class="keyword">var</span> lineData = [ &#123; <span class="string">"x"</span>: <span class="number">1</span>,   <span class="string">"y"</span>: <span class="number">5</span>&#125;,  &#123; <span class="string">"x"</span>: <span class="number">20</span>,  <span class="string">"y"</span>: <span class="number">20</span>&#125;,</div><div class="line">                 &#123; <span class="string">"x"</span>: <span class="number">40</span>,  <span class="string">"y"</span>: <span class="number">10</span>&#125;, &#123; <span class="string">"x"</span>: <span class="number">60</span>,  <span class="string">"y"</span>: <span class="number">40</span>&#125;,</div><div class="line">                 &#123; <span class="string">"x"</span>: <span class="number">80</span>,  <span class="string">"y"</span>: <span class="number">5</span>&#125;,  &#123; <span class="string">"x"</span>: <span class="number">100</span>, <span class="string">"y"</span>: <span class="number">60</span>&#125;];</div><div class="line"></div><div class="line"><span class="comment">//This is the accessor function we talked about above</span></div><div class="line"><span class="keyword">var</span> lineFunction = d3.svg.line()</div><div class="line">                         .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.x; &#125;)</div><div class="line">                         .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.y; &#125;)</div><div class="line">                         .interpolate(<span class="string">"linear"</span>);</div><div class="line"></div><div class="line"><span class="comment">//The SVG Container</span></div><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">                                    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">                                    .attr(<span class="string">"height"</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//The line SVG Path we draw</span></div><div class="line"><span class="keyword">var</span> lineGraph = svgContainer.append(<span class="string">"path"</span>)</div><div class="line">                            .attr(<span class="string">"d"</span>, lineFunction(lineData))</div><div class="line">                            .attr(<span class="string">"stroke"</span>, <span class="string">"blue"</span>)</div><div class="line">                            .attr(<span class="string">"stroke-width"</span>, <span class="number">2</span>)</div><div class="line">                            .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>);</div></pre></td></tr></table></figure>
<p><code>.attr(&quot;d&quot;, lineFunction(lineData))</code> 将数据传递给数据寄存器，然后把数据返回给 SVG 路径命令。</p>
<p>D3.js 提供了 11 中不同的内插线形：</p>
<ul>
<li>linear</li>
<li>step-before</li>
<li>step-after</li>
<li>basis</li>
<li>basis-open</li>
<li>basis-closed</li>
<li>bundle</li>
<li>cardinal</li>
<li>cardinal-open</li>
<li>cardinal-closed</li>
<li>monotone</li>
</ul>
<p>D3.js 提供了多种路径数据产生器（Path data generators），它既是对象又是函数。</p>
<ul>
<li>d3.svg.line</li>
<li>d3.svg.line.radial</li>
<li>d3.svg.area</li>
<li>d3.svg.area.radial</li>
<li>d3.svg.arc</li>
<li>d3.svg.symbol</li>
<li>d3.svg.chord</li>
<li>d3.svg.diagonal</li>
<li>d3.svg.diagonal.radial</li>
</ul>
<h1>SVG 动态坐标空间</h1>
<p>如果使坐标根据数据进行调整？当 SVG 容器空间的大小比其中的图形元素坐标要小，那会出现容器空间上无法显式出图形的问题。这个时候需要动态的 SVG 坐标空间。这个时候需要做的是，让容器空间的宽高随着数据而进行伸缩。</p>
<h1>D3.js 标尺（scales）</h1>
<p>与其让 SVG 容器大小适应数据，不如让数据适应容器。因为有的时候，数据的大小尺寸远远大于浏览器显示尺度。这个时候需要对数据进行伸缩变换以便适应空间。</p>
<p>D3.js 提供了一些方法进行数据的变换。</p>
<p>例如 <code>d3.scale.linear()</code> 线性变换</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> linearScale = d3.scale.linear()</div><div class="line">                    .domain([<span class="number">0</span>, <span class="number">10000</span>])</div><div class="line">                    .range([<span class="number">0</span>, <span class="number">100</span>])</div></pre></td></tr></table></figure>
<p><code>.domain()</code> 里输入的范围为原始数据的范围。<br>
<code>.range()</code> 里输入的范围为变换后的范围。</p>
<p>提供了计算最大值和最小值的方法：<code>d3.max()</code> <code>d3.min()</code></p>
<p>D3.js 的标尺类型有以下几种：</p>
<ul>
<li>Identity 1:1 的变换，适用于像素值</li>
<li>Linear 线性的变换</li>
<li>Power 和 Logarithmic 指数和对数变换</li>
<li>Quantize 和 Quantile 针对离散数据</li>
<li>Ordinal 针对非量化的数据，如名称，类别</li>
</ul>
<h1>SVG 组元素</h1>
<p>SVG 组元素是一个包裹其他子元素的的容器，通过 <code>&lt;g&gt;...&lt;/g&gt;</code> 定义。组元素内可以包含任意组元素。任何对组元素的变换，都将影响其所包含的子元素。</p>
<p>组元素的作用：</p>
<ul>
<li>创建分组，可以使一组元素共享相同的属性</li>
<li>变换，对一组元素进行同样的变换</li>
</ul>
<p>在 D3.js 中构建组元素并增加变换属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svgContainer = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">                                    .attr(<span class="string">"width"</span>, <span class="number">200</span>)</div><div class="line">                                    .attr(<span class="string">"height"</span>, <span class="number">200</span>);</div><div class="line"><span class="keyword">var</span> circleGroup = svgContainer.append(<span class="string">"g"</span>)</div><div class="line">                              .attr(<span class="string">"transform"</span>, <span class="string">"translate(80, 0)"</span>);</div></pre></td></tr></table></figure>
<h1>SVG 文本元素</h1>
<p>添加 SVG 文本元素跟添加图形类型，只是该元素有一些特殊的属性。同样，使用 D3.js 添加文本和添加图形一样，操纵文本元素的属性和值就可以了。</p>
<h1>SVG 坐标轴（Axes）</h1>
<p>使用 D3.js 绘制坐标轴和坐标刻度。</p>
<p>创建坐标轴对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis();</div></pre></td></tr></table></figure>
<p>传递尺度信息给坐标轴对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> axisScale = d3.scale.linear()</div><div class="line">                        .domain([<span class="number">0</span>, <span class="number">100</span>])</div><div class="line">                        .range([<span class="number">0</span>, <span class="number">100</span>]);</div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">                  .scale(axisScale);</div></pre></td></tr></table></figure>
<p>创建坐标轴组元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xAxisGroup = svgContainer.append(<span class="string">"g"</span>)</div><div class="line">                             .call(xAxis);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://Dashingd3js.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dashingd3js.com&lt;/a&gt; 上的 D3.js 教程学习笔记。&lt;/p&gt;
&lt;h1&gt;基础&lt;/h1&gt;
&lt;p&gt;使用 D3.js 进行数据可视化需
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="D3.js" scheme="http://lix90.github.io/tags/D3-js/"/>
    
      <category term="Data viz" scheme="http://lix90.github.io/tags/Data-viz/"/>
    
      <category term="SVG" scheme="http://lix90.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>R：查看源代码</title>
    <link href="http://lix90.github.io/2016/10/08/2016-10-08-r-source-code/"/>
    <id>http://lix90.github.io/2016/10/08/2016-10-08-r-source-code/</id>
    <published>2016-10-08T14:23:57.000Z</published>
    <updated>2016-11-19T03:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote>
<p>Updated in 2016-11-11</p>
<p>为了深入了解 R 语言，谷歌检索了阅读源代码的方法，在此整理和记录以便往后查阅。要直接从 R 命令行获取源代码，需要了解一些 R 语言编程知识。R 语言中函数或者方法有许多种，例如：</p>
<ul>
<li>in-built 函数</li>
<li>S3 范型函数</li>
<li>S4 范型函数</li>
<li>non-visible functions 隐藏函数</li>
<li>unexported functions</li>
<li>compiled code</li>
<li>infix operators</li>
</ul>
<p>不同类型函数获取源代码的方式不同。要获取源代码，首先直接执行函数（不带括号），观察返回结果。一般来说，普通函数会直接返回源代码。</p>
<p>如果返回的结果包含 <code>UseMethod(&quot;function&quot;)</code>，则表示该函数为 S3 范型函数，它根据对象类型的不同调用不同的方法。然后使用 <code>methods()</code> 列出特定的范型函数和与类有关的函数 <code>methods(function)</code> <code>methods(class=&quot;classname&quot;)</code>。我们可以看到返回一些带 <code>*</code> 的函数，这类函数为 <code>Non-visible functions</code>，即隐藏的函数，表示这类函数没有从语言包的命名空间导出。但是我们仍然可以查看隐藏函数的源代码，可通过 <code>:::</code> 函数查看，即 <code>pkgname:::function</code>。另外，还可以使用 <code>getAnywhere()</code> 获取。<code>getAnywhere()</code> 并不需要知道函数来自于哪个语言包。对于没有 <code>*</code> 的方法，直接运行即可获得源代码。另外，S3 范型函数还可以通过 <code>getS3method(function, class)</code> 获取源代码。</p>
<p>如果返回的结果包含 <code>standardGeneric(&quot;function&quot;)</code>，意味着该函数为 S4 范型函数。对于这类函数，先通过 <code>showMethods(function)</code> 获得方法对应的 <code>signature</code>（不知道是神马东西）。例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; showMethods(chol2inv)</div><div class="line">Function: chol2inv (package base)</div><div class="line">x=<span class="string">"ANY"</span></div><div class="line">x=<span class="string">"CHMfactor"</span></div><div class="line">x=<span class="string">"denseMatrix"</span></div><div class="line">x=<span class="string">"diagonalMatrix"</span></div><div class="line">x=<span class="string">"dtrMatrix"</span></div><div class="line">x=<span class="string">"sparseMatrix"</span></div></pre></td></tr></table></figure>
<p>其中 <code>x=&quot;ANY&quot;</code> 就是 signature。那么，可以通过 <code>getMethod(&quot;function&quot;, &quot;signature&quot;)</code> 获取源代码。<br>
有一些方法具有更复杂的 <code>signature</code>，例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>(raster)</div><div class="line">showMethods(extract)</div><div class="line">Function: extract (package raster)</div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"data.frame"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"Extent"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"matrix"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialLines"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialPoints"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"SpatialPolygons"</span></div><div class="line">x=<span class="string">"Raster"</span>, y=<span class="string">"vector"</span></div></pre></td></tr></table></figure>
<p>那么，可以通过 <code>getMethod(&quot;function&quot;, signature = c(x = &quot;Raster&quot;, y = &quot;SpatialPolygons&quot;))</code> 获取源代码。</p>
<p>对于 <code>unexported functions</code>，可以使用和隐藏函数一样的方法获取源代码，即 <code>:::</code> 或 <code>getAnywhere()</code>。对于 <code>compiled code</code>，即返回内容中有 <code>&lt;bytecode:0x294e410&gt;</code> 的函数，仍然可以从 R 命令行查阅源代码。但是对于函数中调用的 <code>.C</code> <code>.Call</code> <code>.Fortran</code> <code>.External</code> <code>.Internal</code> <code>.Primitive</code>，无法从命令行获取源代码，需要直接查看编译前的源代码。函数 <code>pryr::show_c_source</code> 可以直接在 Github 中找到 <code>.Internal</code> 和 <code>.Primitive</code> 调用的内容。</p>
<p>对于无法直接从命令行获取源代码的函数，可以直接下载原始语言包。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## from CRAN</span></div><div class="line">download.packages(pkgs = <span class="string">"Matrix"</span>,</div><div class="line">                  destdir = <span class="string">"."</span>,</div><div class="line">                  type = <span class="string">"source"</span>)</div><div class="line"><span class="comment">## uncompressing and untaring</span></div><div class="line">untar(download.packages(pkgs = <span class="string">"Matrix"</span>,</div><div class="line">                        destdir = <span class="string">"."</span>,</div><div class="line">                        type = <span class="string">"source"</span>)[,<span class="number">2</span>])</div></pre></td></tr></table></figure>
<p>基本包的源代码，可以通过查阅 R 语言源代码： <a href="http://svn.r-project.org/R/trunk/" target="_blank" rel="external">Subversion repository</a> 或者 <a href="https://github.com/wch/r-source/tree/trunk" target="_blank" rel="external">Winston Chang’s github mirror</a>。对于其他来源的包，直接从相应网站获取。</p>
<p>最后，可以通过 <code>edit(getAnywhere(&quot;function&quot;), file = &quot;source_function.r&quot;)</code> 或者 <code>capture.output(getAnywhere(&quot;function&quot;), file = &quot;source_function.r&quot;)</code> 获得源代码的文本内容。</p>
<p>另外，还可以通过代码调试方法获得源代码 <code>debugonce(function)</code>，使用 <code>debug(function)</code> 需要使用 <code>undebug()</code> 结束调试。</p>
<p>对于 infix operators，即 <code>%%</code> <code>%*%</code> <code>%in%</code>，可以通过 <code>getAnywhere</code> 或者 使用 backticks ‘`’ 包裹然后执行即可返回源代码。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/19226816/how-can-i-view-the-source-code-for-a-function" target="_blank" rel="external">How can I view the source code for a function?</a> 主要参考资料</li>
<li><a href="http://stackoverflow.com/questions/6583265/what-does-s3-methods-mean-in-r/6583639#6583639" target="_blank" rel="external">What does “S3 methods” mean in R?</a></li>
<li><a href="http://yusung.blogspot.jp/2007/08/get-invisible-functions-or-internal.html" target="_blank" rel="external">Get source codes for invisible functions or internal functions in R</a></li>
<li><a href="http://stackoverflow.com/questions/5937832/how-do-i-show-the-source-code-of-an-s4-function-in-a-package" target="_blank" rel="external">How do I show the source code of an S4 function in a package?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;Updated in 2016-11-11&lt;/p&gt;
&lt;p&gt;为了深入了解 R 语言，谷歌检索了阅读源代码的方法，在此整理和记录以便往后查阅。要直接从 R 命令行获取源代码，需要了解一些 R 语言编程知识。R 语言中函数或者方
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
  </entry>
  
  <entry>
    <title>R：正则表达式</title>
    <link href="http://lix90.github.io/2016/10/03/2016-10-03-r-regex/"/>
    <id>http://lix90.github.io/2016/10/03/2016-10-03-r-regex/</id>
    <published>2016-10-02T16:46:15.000Z</published>
    <updated>2016-11-19T03:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>A ‘regular expression’ is a pattern that describes a set of strings.</p>
</blockquote>
<p>按照文档中的定义，正则表达式是用来描述一个字符串集合的模式（pattern）。<br>
在 R 语言中，有两类正则表达式：一是默认使用的拓展的正则表达式（extended regular expressions）；二是类 Perl 语言的正则表达式，通过 <code>perl = TRUE</code> 生效。另外还有可以通过设置参数 <code>fixed = TRUE</code> 使用 literal 正则表达式。<br>
支持正则表达式的函数包括：<code>grep</code> <code>grepl</code> <code>regexpr</code> <code>gregexpr</code> <code>sub</code> <code>gsub</code> <code>strsplit</code>。其他函数 <code>apropos</code> <code>browseEnv</code> <code>help.search</code> <code>list.files</code> <code>ls</code> 等往往通过 <code>grep</code> 函数来支持正则表达式。<br>
正则表达式过长可能不被接受，因为 POSIX 标准仅支持最高256字节。</p>
<h1>Extended Regular Expressions</h1>
<ul>
<li>字母和数字本身就是正则表达式，可用来匹配自身。</li>
<li>具有特殊含义的元字符需要通过反斜杠（backslash，<code>\</code>）逃逸其所代表的特殊含义。</li>
</ul>
<p>元字符包括：<code>. \ | ( ) [ { ^ $ * + ?</code></p>
<blockquote>
<p>Escaping non-metacharacters with a backslash is implementation-dependent. The current implementation interprets \a as BEL, \e as ESC, \f as FF, \n as LF, \r as CR and \t as TAB.<br>
A character class is a list of characters enclosed between [ and ] which matches any single character in that list; unless the first character of the list is the caret ^, when it matches any character not in the list.<br>
A range of characters may be specified by giving the first and last characters, separated by a hyphen.<br>
Certain named classes of characters are predefined. Their interpretation depends on the locale (see locales); the interpretation below is that of the POSIX locale.</p>
</blockquote>
<p><code>[:alnum:]</code> = <code>[:alpha:]</code> + <code>[:digit:]</code><br>
<code>[:alpha:]</code> = <code>[:lower:]</code> + <code>[:upper:]</code><br>
<code>[:blank:]</code> 空白符，如空格、tab<br>
<code>[:cntrl:]</code> Control characters<br>
<code>[:digit:]</code> 数字<br>
<code>[:graph:]</code> = <code>[:alnum:]</code> + <code>[:punct:]</code><br>
<code>[:lower:]</code> 小写字母<br>
<code>[:print:]</code> 可打印的字符 <code>[:alnum:]</code> <code>[:punct:]</code> 空格<br>
<code>[:punct:]</code> 标点符号<br>
<code>[:space:]</code> 空格符：tab, newline, vertical tab, form feed, carriage return, space, and possibly other locale-dependent characters<br>
<code>[:upper:]</code> 大写字母<br>
<code>[:xdigit:]</code> 十六进制数字</p>
<p>元字符</p>
<p><code>.</code> 匹配其他任何单字符<br>
<code>\w</code> 匹配单词 = <code>[[:alnum:]_]</code> <code>\W</code> = <code>[^[:alnum:]_]</code><br>
<code>\s</code> 空白符 <code>\S</code> 非空白符<br>
<code>\d</code> 数字 <code>\D</code> 非数字<br>
<code>^</code> 匹配首空字符（line）<br>
<code>$</code> 匹配尾空字符（line）<br>
<code>\&lt;</code> 匹配首空字符（word）<br>
<code>\&gt;</code> 匹配尾空字符（word）<br>
<code>\b</code> 匹配位于边缘的空字符（word）<br>
<code>\B</code> 匹配非边缘字符（word）</p>
<p>匹配频率有关的元字符</p>
<p><code>?</code> 匹配 1 次<br>
<code>*</code> 匹配 0 或多次<br>
<code>+</code> 匹配 1 或多次<br>
<code>{n}</code> 匹配 n 次<br>
<code>{n,}</code> 匹配 n 或更多次<br>
<code>{n,m}</code> 匹配 n 至 m 次</p>
<p>默认来说，默认匹配次数是有多少次就多少次。但是可以通过 <code>?</code> 来改变低频率匹配。<br>
正则表达式可以被连接起来，其作用等同于把待匹配的字符串用连接的正则表达式匹配的效果。两个正则表达式也可以通过 <code>|</code> 求并集。</p>
<h1>正则表达式函数实例</h1>
<h2 id="grep">grep</h2>
<hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A ‘regular expression’ is a pattern that describes a set of strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照文档中的定义，正则表达式是用来描述一个字符串集合的模式（patt
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="正则表达式" scheme="http://lix90.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP 安装与配置</title>
    <link href="http://lix90.github.io/2016/09/25/2016-09-25-php-config/"/>
    <id>http://lix90.github.io/2016/09/25/2016-09-25-php-config/</id>
    <published>2016-09-25T13:00:45.000Z</published>
    <updated>2016-11-28T12:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了了解 PHP 这门所谓的“世界上最好的语言”，特意安装和配置了 PHP 环境。</p>
<p>因为系统是 Mac OSX，所以直接使用 <code>brew install php56</code> 来安装。但是并未找到 php56 。于是 <code>brew search php</code>，发现 php 相关安装包位于 <code>/homebrew/php/*</code>，于是用 <code>brew install homebrew/php/php56</code> 安装。但是出现报错 <code>undefined method rebuild</code> 的错误。尝试 <code>brew cleanup &amp;&amp; brew update</code>，仍然不起作用，依旧报错。后来查询到可以更新下 homebrew 的仓库。于是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd $(brew --repo)</div><div class="line">git fetch</div><div class="line">git reset --hard origin/master</div><div class="line">brew update</div></pre></td></tr></table></figure>
<p>然后再尝试安装 <code>brew install homebrew/php/php56</code>。</p>
<p>其实也可以这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/dupes</div><div class="line">brew tap homebrew/versions</div><div class="line">brew tap homebrew/homebrew-php</div><div class="line">brew install php56</div></pre></td></tr></table></figure>
<p>然后安装了包管理工具 composer</p>
<blockquote>
<p>PHP 世界的包管理工具Composer</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install homebrew/php/composer</div></pre></td></tr></table></figure>
<p>并且安装了 psySH</p>
<blockquote>
<p>A runtime developer console, interactive debugger and REPL for PHP.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer g require psy/psysh:@stable</div></pre></td></tr></table></figure>
<p>psySH 的二进制文件位于 <code>~/.composer/vendor/psysh</code><br>
也可以通过这个来运行 <code>~/.composer/vendor/bin/psysh</code><br>
为了方便，我将其添加到 PATH <code>export $PATH:/Users/lix/.composer/vendor/bin</code></p>
<p>配置 emacs 的 php 环境<br>
先安装 ac-php 的依赖 <code>brew install cscope</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;;; php mode</div><div class="line">(use-package php-mode</div><div class="line">  :ensure t</div><div class="line">  :mode &quot;\\.php\\&apos;&quot;</div><div class="line">  :config</div><div class="line">  (progn</div><div class="line">    (add-hook &apos;php-mode-hook &apos;smartparens-mode)</div><div class="line">    (use-package ac-php</div><div class="line">      :ensure t</div><div class="line">      :config</div><div class="line">      (add-hook &apos;php-mode-hook</div><div class="line">                &apos;(lambda ()</div><div class="line">                   (use-package company-php :ensure t)</div><div class="line">                   (company-mode t)</div><div class="line">                   (add-to-list &apos;company-backends &apos;company-ac-php-backend))))</div><div class="line">    (use-package php-eldoc</div><div class="line">      :ensure t</div><div class="line">      :config</div><div class="line">      (add-hook &apos;php-mode-hook &apos;php-eldoc-enable))))</div><div class="line"></div><div class="line">;;; php REPL</div><div class="line">(use-package psysh</div><div class="line">  :if (executable-find &quot;psysh&quot;)</div><div class="line">  :ensure t</div><div class="line">  :defer t</div><div class="line">  :config</div><div class="line">  (add-hook &apos;psysh-mode-hook &apos;smartparens-mode))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了了解 PHP 这门所谓的“世界上最好的语言”，特意安装和配置了 PHP 环境。&lt;/p&gt;
&lt;p&gt;因为系统是 Mac OSX，所以直接使用 &lt;code&gt;brew install php56&lt;/code&gt; 来安装。但是并未找到 php56 。于是 &lt;code&gt;brew sea
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="Config" scheme="http://lix90.github.io/categories/Original/Config/"/>
    
    
      <category term="Configuration" scheme="http://lix90.github.io/tags/Configuration/"/>
    
      <category term="PHP" scheme="http://lix90.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>从零学机器学习之决策树</title>
    <link href="http://lix90.github.io/2016/09/22/2016-09-22-decision-tree/"/>
    <id>http://lix90.github.io/2016/09/22/2016-09-22-decision-tree/</id>
    <published>2016-09-22T02:10:09.000Z</published>
    <updated>2016-11-28T12:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>以一名数学只有普通高中水平的非理工科人的视角尝试理解机器学习之<strong>决策树</strong>。</p>
<p>决策树是一种比较好理解的分类算法，望文就能生意，而且意思还不会出现大的偏差。把这个算法的过程想像成一棵树或者根毛的生长过程，决策层越低，分支越丰富。决策树的优点之一也就在于此，容易理解，像我这样的非专业领域的人可以直接脑补。</p>
<p>《机器学习实战》这本书中描述，决策树的 <strong>计算复杂度</strong> 不高，输出结果易于理解（可以用直观来理解），对 <strong>中间值</strong> 的缺失不敏感（这里没懂，中间值是啥？），可以处理不相关特征数据（对数据要求不严格？）。但是，决策树虽简单，但容易产生过度匹配问题。为什么会产生过度匹配问题呢？也许是因为分类的标准太“粗糙”或者“武断”吧？？？。其适用数据类型包括 <strong>数值型</strong> 和 <strong>标称型</strong>。</p>
<p>决策树是通过对数据集的特征按照某种标准进行分类，分成若干个子数据集，子数据集又可以按照新的标准对子数据集进行分类。这里有个疑问，到底要分多少次呢？明白了，如果“决策”次数越多，决策树模型越复杂，模型越复杂，是不是就计算复杂度越高呢？这个又与“过度拟合”有关吗？直觉去看，一个数据集可以有许多特征，但是有些特征对分类并无太大的作用。举个例子，把人和动物进行区分，到底是“使用和制造工具的能力”还是“语言”？对决策树就是这样一个过程。挑选出最能够区分出类别的一批特征，然后对数据集进行分类。这样模型简单，精确度又越高。但是如何知道哪些特征最合适呢？<s>这就需要先验知识了，这里头就有了人为性。所以从这里也可以知道，决策树是一个监督学习。</s> 看到知乎里头一个问题 <a href="https://www.zhihu.com/question/19753084" target="_blank" rel="external">信息增益到底怎么理解呢？</a>，明白了，原来可以用 <strong>信息增益</strong> 来确定一个特征用于分类是不是合适。</p>
<p>前面说到，决策树适用的数据类型包括了 <strong>数值型</strong>，但是，<strong>树构造算法只适用于标称型数据，数值型数据必须离散化</strong>。也就是说，要用“身高”和“体重”来区分男女，必须把这两个数值型数据转化为离散的，例如 <code>&gt;170cm</code>，<code>&lt;170cm</code>，体重 <code>&gt;60kg</code>，<code>&lt;60kg</code>。或者稍微精细一点，按照 10cm 和 5kg 的精度进行分割。</p>
<p>阅读《机器学习实战》的过程中，有个概念很抽象，<strong>信息增益</strong>。我尝试去这样理解。如果没有 <strong>生物分类学</strong>，人对物种的认识和理解是杂乱的，可能每个人的主观分类都不一致，因为不同人关注于不同特征。但有了一个分类系统，本来看似乱套的系统，就有了规律，这样就有了标准，形成了可以共享的知识。在这里 “信息” 就是 “不同的生物”，“增益” 就是促进了对生物物种的认识，产生了可以交流和分享的知识。看起来，<strong>信息增益</strong> 是一个褒义词呀，信息增益越高越好。那怎么量化信息增益呢？这里又出现一个更加抽象难以理解的概念 <strong>熵</strong>。最开始见到这个词的时候，我竟担心自己读错。所以，顿时发现，隔行如隔山的罪魁祸首之一就是这些该死的专业术语了。越专业越不好好说话。不过，命名一些专业术语把知识简化，也是为了本专业内沟通的效率吧（活学活用，提高信息增益）。</p>
<p>那么什么是 <strong>信息熵</strong>？看定义，熵为信息的期望值（期望值即平均值，高中数学的水平，平均值对我来说比较好理解）。在文科生眼里，<strong>信息</strong> 用公式定义真是碉堡了。好了，不想数学公式了。总之，这里把信息当作概率去看待了。我只想明白，熵的大小意味着什么。维基百科的信息熵词条里有几句话：1. 熵最好理解为不确定性的度量而不是确定性的度量，因为越随机的信源的熵越大；2. 比较不可能发生的事情，当它发生了，会提供更多的信息。拿自己所知道的一点点背景知识理解的话，也就是小概率事件发生了，熵就变大了，熵变大了，事情就越发不可预测了，因为越随机了。也就是说，我越懵逼，熵就越大？这个世界乱成一团遭，那么熵就越大了。看来，<strong>熵</strong> 是个贬义词呀，哈哈。像那些信息量大的话，还是不说为好，毕竟熵大，有些人难以理解，毕竟不是所有人都有那么有内涵。那么用熵来量化信息增益，就是，熵变得越小，信息增益就越大。我们为的把世界看清楚，就得让熵变小。但是现实很残酷，我们无法预测未来，熵是不以我们的意志为转移的，该死的熵跟房价一样，死也降不下来啊。不过提高自身实力，认清自我，未来就不那么迷茫了，重要的是脚踏实地嘛。熵自然而然就小了。好吧，扯远了。总之，熵和信息增益是个对立的关系。</p>
<hr>
<p>待续</p>
<hr>
<p>参考资料：</p>
<ul>
<li>《机器学习实战》</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)" target="_blank" rel="external">熵 (信息论)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以一名数学只有普通高中水平的非理工科人的视角尝试理解机器学习之&lt;strong&gt;决策树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;决策树是一种比较好理解的分类算法，望文就能生意，而且意思还不会出现大的偏差。把这个算法的过程想像成一棵树或者根毛的生长过程，决策层越低，分支越丰富。决策树
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="Data science" scheme="http://lix90.github.io/categories/Original/Data-science/"/>
    
    
      <category term="Machine learning" scheme="http://lix90.github.io/tags/Machine-learning/"/>
    
      <category term="Decision tree" scheme="http://lix90.github.io/tags/Decision-tree/"/>
    
      <category term="Data science" scheme="http://lix90.github.io/tags/Data-science/"/>
    
  </entry>
  
  <entry>
    <title>零基础如何学习一门新的编程语言？</title>
    <link href="http://lix90.github.io/2016/09/17/2016-09-17-learn-new-lang/"/>
    <id>http://lix90.github.io/2016/09/17/2016-09-17-learn-new-lang/</id>
    <published>2016-09-17T06:48:43.000Z</published>
    <updated>2016-11-28T12:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在正式读研之前，我几乎没有编程基础。本科在一所不知名的民办二本院校的第一届人力资源班。只在省二级计算机考试中接触了丁点儿编程（好像是VFOX）。也没有考国家计算机二级证书。从刚读研开始，需要在 MATLAB 环境下工作，才正式学起了一门程序语言。所以学习一门编程语言并没有想象中的困难。</p>
<p>借这个地儿，分享<strong>如何从零基础菜鸟开始入门到熟悉并且掌握一门程序语言</strong>的一些经验，希望能够给同样零基础，或者畏惧编程的朋友（特别是从事科学研究的人）一些启发。</p>
<p>P.S. 内容较为简洁，后续再补充。</p>
<h1>为什么科研人员要至少学一门编程语言？</h1>
<ul>
<li>提高生产效率（productivity）</li>
<li>培养抽象逻辑思维（abstract thinking）</li>
<li>提高研究的可重复性，拥抱开放科学（<a href="https://en.wikipedia.org/wiki/Open_science" target="_blank" rel="external">open science</a>）</li>
<li>促进同行交流（communication）</li>
<li>…</li>
</ul>
<h1>对于科研工作者有哪些编程语言和工具值得一学？</h1>
<ul>
<li><code>R</code> <code>Python</code> <code>Matlab</code></li>
<li><code>Linux</code> <code>Shell</code> <code>Git</code></li>
</ul>
<p>为什么要学习这些东西，搜索引擎检索：<code>why learn x as y</code> 或者 <code>Y 为什么学 X</code>，X 为对应的语言和工具，Y 为职业或者领域。</p>
<hr>
<h1>准备工作</h1>
<h2 id="1-科学上网">1. 科学上网</h2>
<p><a href="https://zh.wikipedia.org/zh/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E" target="_blank" rel="external">GFW</a> 阻断了国人许多获取信息和知识的渠道。所以，要想借助互联网进行学习，首要解决的问题就是突破 GFW 的限制。</p>
<ul>
<li>Chrome/Firefox: 请用帐号登录浏览器，已便于同步书签；若希望跨浏览器同步书签，请使用搜索引擎检索“跨浏览器同步书签”</li>
<li><a href="https://shadowsocks.com/client.html" target="_blank" rel="external">shadowsocks</a>，请从网上获取免费或者付费帐号，不会使用请检索“如何使用shadowsocks科学上网”</li>
</ul>
<h2 id="2-环境配置">2. 环境配置</h2>
<p>要想舒服的学习程序语言，那么就要配置舒服的语言环境。就好像，学外语一样，得有一个很好的语言环境，学习起来才自然。初学者一定不要忽视编程环境的重要性，一定要让自己舒舒服服地写代码，编程的过程才不是枯燥乏味的，惹人烦的。所以，一定要扎扎实实把环境给配置好了，再开始系统地学。如果在进行配置上有困难，那就请教其他懂行的人，或者再多花一些时间。如果仅仅是在面对环境的配置就进行不下去了，那的确可以不用学编程了。</p>
<p>配置语言环境从以下三个方面进行。</p>
<ul>
<li>操作系统
<ul>
<li>Ubuntu</li>
<li>MacOS</li>
<li>Windows 下虚拟机运行 Ubuntu</li>
<li>（Windows 下进行配置本人没有尝试过）</li>
</ul>
</li>
<li>编辑器
<ul>
<li>较容易：<a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>，<a href="https://atom.io/" target="_blank" rel="external">Atom</a></li>
<li>较难：<a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a>，<a href="http://www.vim.org/" target="_blank" rel="external">Vim</a></li>
</ul>
</li>
<li>集成开发环境 IDE (Integrated development environment)
<ul>
<li>R: <a href="https://www.rstudio.com/" target="_blank" rel="external">Rstudio</a>, Emacs (ESS)</li>
<li>Python: <a href="https://ipython.org/" target="_blank" rel="external">IPython</a>, <a href="https://github.com/spyder-ide/spyder" target="_blank" rel="external">Spyder</a>, <a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, Emacs (Elpy)</li>
<li>Matlab: Matlab GUI, Emacs (matlab-mode)</li>
</ul>
</li>
</ul>
<hr>
<h1>学习资料</h1>
<h2 id="1-官方文档-documentations">1. 官方文档 Documentations</h2>
<ul>
<li><a href="https://www.r-project.org/" target="_blank" rel="external">R</a>, <a href="https://support.rstudio.com/hc/en-us/categories/200035113-Documentation" target="_blank" rel="external">Rstudio</a>, <a href="http://www.rdocumentation.org/" target="_blank" rel="external">Rdocumentation</a>, <a href="http://rseek.org/" target="_blank" rel="external">Rseek</a>,</li>
<li><a href="http://docs.python.org/2/" target="_blank" rel="external">Python2.x</a>, <a href="http://docs.python.org/3/" target="_blank" rel="external">Python3.x</a></li>
<li><a href="http://cn.mathworks.com/help/" target="_blank" rel="external">Matlab Documentation</a></li>
</ul>
<h2 id="2-搜索引擎-search-engines">2. 搜索引擎 Search Engines</h2>
<ul>
<li><strong>Google Search</strong>：<a href="https://www.zhihu.com/question/20161362" target="_blank" rel="external">谷歌学术检索技巧</a></li>
<li>DuckDuckGo</li>
<li>Bing</li>
<li>Baidu</li>
</ul>
<h2 id="3-社区-community">3. 社区 Community</h2>
<ul>
<li>综合：<a href="https://github.com/" target="_blank" rel="external">Github</a>, <a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverflow</a></li>
<li>R: <a href="http://cos.name/" target="_blank" rel="external">统计之都</a>, <a href="https://www.r-bloggers.com/" target="_blank" rel="external">R-bloggers</a>, <a href="https://github.com/qinwf/awesome-R" target="_blank" rel="external">Awesome-R</a></li>
<li>Python: <a href="http://python-china.org/" target="_blank" rel="external">Python China</a>, <a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">Awesome-Python</a></li>
<li>MATLAB: <a href="http://www.mathworks.com/matlabcentral/fileexchange/" target="_blank" rel="external">File Exchange</a>, <a href="http://cn.mathworks.com/matlabcentral/answers/index" target="_blank" rel="external">MATLAB Answers</a> <a href="https://github.com/mikecroucher/awesome-MATLAB" target="_blank" rel="external">Awesome-MATLAB</a></li>
</ul>
<h2 id="4-练习项目-toy-projects">4. 练习项目 Toy Projects</h2>
<ul>
<li>个人研究项目</li>
<li>网上公开项目（去 Google 检索或者直接去 Github 搜）</li>
</ul>
<p>需要提及的是，R 语言有一个公益项目 <a href="https://github.com/swirldev/swirl" target="_blank" rel="external">Swirl</a> 可以在 R 的命令窗口通过交互式的方式学习 R。具体请查看 Swirl 的相关文档介绍。</p>
<h2 id="5-书籍-books">5. 书籍 Books</h2>
<p>准备两三本书来系统地了解一门编程语言。网上有许多免费书籍，请看 <strong>其他线上学习资料</strong>。</p>
<h2 id="6-其他线上学习资料-待更新">6. 其他线上学习资料（待更新）</h2>
<p>前面提到的 <code>Awesome</code> 项目已经囊括了各种编程语言和其他领域的学习资源，这里仅仅提一些我看过的。</p>
<ul>
<li>General: <a href="http://programming-motherfucker.com/become.html" target="_blank" rel="external">Become a Programmer, Motherfucker</a></li>
<li>R: <a href="http://www.cookbook-r.com/" target="_blank" rel="external">Cookbook for R</a>，<a href="http://adv-r.had.co.nz/" target="_blank" rel="external">Advanced R</a>，<a href="https://csgillespie.github.io/efficientR/" target="_blank" rel="external">Efficient R programming</a>, <a href="http://health.adelaide.edu.au/psychology/ccs/teaching/lsr/" target="_blank" rel="external">Learning Statistics with R</a>,<a href="http://r4ds.had.co.nz/" target="_blank" rel="external">R for Data Science</a>, <a href="http://www.psych.upenn.edu/~baron/rpsych/rpsych.html" target="_blank" rel="external">Notes on the use of R for psychology experiments and questionnaires</a></li>
<li>Python: <a href="http://codingpy.com/books/thinkpython2/index.html" target="_blank" rel="external">Think Python 第二版</a>, <a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">Python Cookbook 第三版</a>, <a href="http://gael-varoquaux.info/stats_in_python_tutorial/" target="_blank" rel="external">Statistics in Python</a></li>
<li>MATLAB：<a href="http://mirlab.org/jang/books/matlabProgramming4beginner/" target="_blank" rel="external">MATLAB程式設計：入門篇</a>，<a href="http://mirlab.org/jang/books/matlabProgramming4guru/" target="_blank" rel="external">MATLAB程式設計：進階篇</a>，<a href="http://www.matlab-cookbook.com/" target="_blank" rel="external">MATLAB Cookbook</a></li>
</ul>
<hr>
<h1>如何学习</h1>
<h2 id="第一步：从整体上了解某种语言功能-特点以及优缺点">第一步：从整体上了解某种语言功能、特点以及优缺点</h2>
<p>这一步可以通过慕课或者书籍来对一门编程语言有一个大概的了解，知道它适合做什么，不适合做什么。</p>
<p>相关慕课请通过搜索引擎进行检索。个人不太喜欢看视频学一门编程语言，相对来说比较喜欢看书。习惯看电子书的可以访问前面提到的免费电子书。习惯看纸质书的借一本翻翻就行了。也许其他人比较喜欢看视频教学。</p>
<h2 id="第二步：弄明白如何查询和获取帮助文档-getting-help">第二步：弄明白如何查询和获取帮助文档 Getting Help</h2>
<p>以下是一些获取帮助的命令，先熟练这几个命令的用法，对后面学习其他函数和命令有非常大的帮助。并不是任何时候都需要查谷歌搜百度。通过这些命令也可以对相关编程语言进行学习。</p>
<ul>
<li>R: <code>?function</code> <code>help(function)</code> <code>help.search()</code> <code>apropos()</code></li>
<li>Python: <code>?</code> <code>??</code> <code>help()</code> <code>dir()</code> <code>__doc__</code></li>
<li>Matlab: <code>help</code> <code>doc</code> <code>lookfor</code></li>
</ul>
<h2 id="第三步：熟悉基本语法和编码规范-grammar-style">第三步：熟悉基本语法和编码规范 Grammar &amp; Style</h2>
<ul>
<li><a href="https://learnxinyminutes.com/" target="_blank" rel="external">Learn X in Y Minutes</a>
<ul>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/r-cn/" target="_blank" rel="external">X 分钟速成 R</a></li>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/python-cn/" target="_blank" rel="external">X 分钟速成 Python</a></li>
<li><a href="https://learnxinyminutes.com/docs/zh-cn/matlab-cn/" target="_blank" rel="external">X 分钟速成 MATLAB</a></li>
</ul>
</li>
<li>通过 <strong>Cheat Sheet</strong> 来快速了解基本语法
<ul>
<li><a href="https://www.cheatography.com/" target="_blank" rel="external">Cheatography</a></li>
<li><a href="http://www.cheat-sheets.org/" target="_blank" rel="external">Cheat-Sheets.org</a></li>
<li>或者谷歌检索 <code>cheat sheet r/python/matlab filetype:pdf</code> 或者 <code>quick reference r/python/matlab filetype:pdf</code></li>
</ul>
</li>
<li>代码规范 Coding Style
<ul>
<li>R: <a href="https://google.github.io/styleguide/Rguide.xml" target="_blank" rel="external">Google’s R Style Guide</a>, <a href="http://adv-r.had.co.nz/Style.html" target="_blank" rel="external">R Style guide</a></li>
<li>Python: <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP 8 – Style Guide for Python Code</a>, <a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="external">Google Python Style Guide</a></li>
<li>MATLAB: <a href="https://cn.mathworks.com/matlabcentral/fileexchange/46056-matlab-style-guidelines-2-0" target="_blank" rel="external">MATLAB Style Guidelines 2.0</a>, <a href="www.cs.cornell.edu/courses/cs321/2003fa/Matlab%20Coding%20Style.pdf">Matlab Coding Style</a></li>
</ul>
</li>
</ul>
<h2 id="第四步：在练习或实践中探索性地学习-practice-experimentation">第四步：在练习或实践中探索性地学习 Practice &amp; Experimentation</h2>
<p>在学习和使用编程语言的过程中，不可避免的遇到各种报错信息。这并不是不好的信号，而正式掌握一个函数或者语法时候。有时候可以故意“犯错”，看看出现什么样的报错信息。总之，多去根据文档里头的例子或者自己编个例子尝试尝试一个函数的用法。</p>
<h2 id="第五步：阅读书籍和源码-books-source-code">第五步：阅读书籍和源码 Books &amp; Source code</h2>
<p>一般来说，不做程序员，就没必要学得太深入。但是如果感兴趣，要进一步提高，那就要多阅读经典技术书籍和源代码咯。</p>
<hr>
<h1>Linux, Shell, &amp; Git 学习资源</h1>
<p>Linux</p>
<ul>
<li><a href="http://linux.vbird.org/linux_basic/" target="_blank" rel="external">鸟哥的 Linux 私房菜</a></li>
<li><a href="https://github.com/aleksandar-todorovic/awesome-linux" target="_blank" rel="external">Awesome Linux</a></li>
</ul>
<p>Shell</p>
<ul>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">快乐的 Linux 命令行</a></li>
<li><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="external">Awesome Shell</a></li>
</ul>
<p>Git</p>
<ul>
<li><a href="https://git-scm.com/documentation" target="_blank" rel="external">Git Documentation</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git 简明指南</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></li>
</ul>
<hr>
<h1>总结</h1>
<ul>
<li>在科学上网的前提下，善用<strong>搜索引擎</strong>；</li>
<li>学会查询和阅读<strong>文档</strong>；</li>
<li>在最开始就养成良好的<strong>编程规范</strong>；</li>
<li>探索性地<strong>边做边学</strong>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正式读研之前，我几乎没有编程基础。本科在一所不知名的民办二本院校的第一届人力资源班。只在省二级计算机考试中接触了丁点儿编程（好像是VFOX）。也没有考国家计算机二级证书。从刚读研开始，需要在 MATLAB 环境下工作，才正式学起了一门程序语言。所以学习一门编程语言并没有想
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="Learning" scheme="http://lix90.github.io/categories/Original/Learning/"/>
    
    
      <category term="Programming" scheme="http://lix90.github.io/tags/Programming/"/>
    
      <category term="How-to-learn" scheme="http://lix90.github.io/tags/How-to-learn/"/>
    
  </entry>
  
  <entry>
    <title>SQL 语言入门笔记</title>
    <link href="http://lix90.github.io/2016/09/17/2016-09-17-sql/"/>
    <id>http://lix90.github.io/2016/09/17/2016-09-17-sql/</id>
    <published>2016-09-17T01:46:39.000Z</published>
    <updated>2016-11-28T12:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>《数据库系统概论》第三章笔记。</p>
<h1>基础</h1>
<h2 id="sql-历史">SQL 历史</h2>
<ul>
<li>1974 年，Boyce 和 Chamberlin 提出，Sequel</li>
<li>1986 年 10 月，美国国家标准局（ANSI）的数据库委员会 X3H2 批准，同年公布 SQL 标准文本</li>
<li>1987 年，国际化标准组织（ISO）通过这一标准</li>
</ul>
<p>没有一个数据库系统能够支持 SQL 标准的所有概念和特性。许多软件厂商对 SQL 的基本命令集进行了不同程度的扩充和修改，又可以支持标准以外的一些功能特性。</p>
<h2 id="sql-特点">SQL 特点</h2>
<ul>
<li>综合统一
<ul>
<li>SQL 集 <code>数据定义语言</code>、<code>数据操纵语言</code>、<code>数据控制语言</code> 的功能于一体，可以独立完成数据库生命周期中的全部活动。
<ul>
<li>定义和修改、删除关系模式，定义和删除视图，插入数据，建立数据库；</li>
<li>对数据库中的数据进行查询和更新；</li>
<li>数据库重构和维护；</li>
<li>数据库安全性、完整性控制，以及事务控制；</li>
<li>嵌入式 SQL 和动态 SQL 定义。</li>
</ul>
</li>
</ul>
</li>
<li>高度非过程化</li>
<li>面向集合的操作方式</li>
<li>以同一种语法结构提供多种使用方式
<ul>
<li>既是独立语言，又是嵌入式语言</li>
</ul>
</li>
<li>语言简洁，易学易用</li>
</ul>
<h2 id="sql-基本概念">SQL 基本概念</h2>
<p>三级模式结构</p>
<ul>
<li>外模式：若干视图、部分基本表</li>
<li>模式：若干基本表</li>
<li>内模式：若干存储文件</li>
</ul>
<hr>
<h1>数据定义</h1>
<h2 id="模式的定义与删除">模式的定义与删除</h2>
<h3 id="1-定义模式">1. 定义模式</h3>
<p><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;</code></p>
<p>进行该操作需具备数据库管理员权限，或者获得了数据库管理员授予的 CREATE SCHEMA 的权限。</p>
<p>定义模式实际上定义了一个命名空间，在此可以进一步定义该模式包含的数据库对象。</p>
<p><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</code></p>
<h3 id="2-删除模式">2. 删除模式</h3>
<p><code>DROP SCHEMA &lt;模式名&gt;&lt;CASCADE|RESTRICT&gt;</code></p>
<ul>
<li><code>CASCADE</code> 级联，表示在删除模式时把该模式中所有的数据库对象全部删除；</li>
<li><code>RESTRICT</code> 限制，表示如果该模式中定义了下属的数据库对象（如表或视图），则拒绝该删除语句的执行。</li>
</ul>
<h2 id="基本表的定义-删除与修改">基本表的定义、删除与修改</h2>
<h3 id="1-定义基本表">1. 定义基本表</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;</div><div class="line">    (&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]</div><div class="line">    [,&lt;列名&gt;&lt;数据类型&gt; [列级完整性约束条件]]</div><div class="line">    ...</div><div class="line">    [,&lt;表级完整性约束条件&gt;]);</div></pre></td></tr></table></figure>
<h3 id="2-数据类型">2. 数据类型</h3>
<p>在 SQL 中域的概念用数据类型来实现。定义表的各个属性时需要指明其数据类型及长度。选择数据类型从两方面考虑，一是取值范围，二是要做哪些运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>CHAR(n)</code>,<code>CHARACTER(n)</code></td>
<td style="text-align:left">长度为 n 的定长字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>VARCHAR(n)</code>,<code>CHARACTERVARYING(n)</code></td>
<td style="text-align:left">最大长度为 n 的变长字符串</td>
</tr>
<tr>
<td style="text-align:left"><code>CLOB</code></td>
<td style="text-align:left">字符串大对象</td>
</tr>
<tr>
<td style="text-align:left"><code>BLOB</code></td>
<td style="text-align:left">二进制大对象</td>
</tr>
<tr>
<td style="text-align:left"><code>INT</code>,<code>INTEGER</code></td>
<td style="text-align:left">长整数（4字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>SMALLINT</code></td>
<td style="text-align:left">短整数（2字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>BIGINT</code></td>
<td style="text-align:left">大整数（8字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>NUMERIC(p,d)</code></td>
<td style="text-align:left">定点数，由 p 位数字（不包括符号、小数点）组成，小数点后面有 d 位数字</td>
</tr>
<tr>
<td style="text-align:left"><code>DECIMAL(p,d)</code>,<code>DEC(p,d)</code></td>
<td style="text-align:left">同 NUMERIC</td>
</tr>
<tr>
<td style="text-align:left"><code>REAL</code></td>
<td style="text-align:left">取决于机器精度的单精度浮点数</td>
</tr>
<tr>
<td style="text-align:left"><code>DOUBLE PRECISION</code></td>
<td style="text-align:left">取决于机器精度的双精度浮点数</td>
</tr>
<tr>
<td style="text-align:left"><code>FLOAT(n)</code></td>
<td style="text-align:left">可选精度的浮点数，精度至少位 n 位数字</td>
</tr>
<tr>
<td style="text-align:left"><code>BOOLEAN</code></td>
<td style="text-align:left">逻辑布尔量</td>
</tr>
<tr>
<td style="text-align:left"><code>DATE</code></td>
<td style="text-align:left">日期，包含年、月、日，格式为 YYYY-MM-DD</td>
</tr>
<tr>
<td style="text-align:left"><code>TIME</code></td>
<td style="text-align:left">时间，包含一日的时、分、秒，格式为 HH:MM:SS</td>
</tr>
<tr>
<td style="text-align:left"><code>TIMESTAMP</code></td>
<td style="text-align:left">时间戳类型</td>
</tr>
<tr>
<td style="text-align:left"><code>INTERVAL</code></td>
<td style="text-align:left">时间间隔类型</td>
</tr>
</tbody>
</table>
<h3 id="3-模式与表">3. 模式与表</h3>
<p>三种方法定义基本表所属的模式：</p>
<ol>
<li>在表名中明显地给出模式名；</li>
<li>在创建模式语句中同时创建表；</li>
<li>设置所属的模式，这样在创建表时表名中不必给出模式名。</li>
</ol>
<p>显示当前搜索路径：<code>SHOW search_path</code>;<br>
设置搜索路径：<code>SET search_path &lt;模式名&gt;,PUBLIC</code>;</p>
<h3 id="4-修改基本表">4. 修改基本表</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt;</div><div class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] &lt;新列名&gt;&lt;数据类型&gt; [完整性约束]]</div><div class="line">[<span class="keyword">ADD</span> &lt;表级完整性约束&gt;]</div><div class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] &lt;列名&gt; [<span class="keyword">CASCADE</span>|RESTRICT]]</div><div class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> &lt;完整性约束&gt; [RESTRICT|<span class="keyword">CASCADE</span>]]</div><div class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> &lt;列名&gt;&lt;数据类型&gt;];</div></pre></td></tr></table></figure>
<h3 id="5-删除基本表">5. 删除基本表</h3>
<p><code>DROP TABLE &lt;表名&gt; [RESTRICT|CASCADE]</code></p>
<p>不同的数据库产品在遵循 SQL 标准的基础上具体实现细节和处理策略会与标准有差别。</p>
<h2 id="索引的建立与删除">索引的建立与删除</h2>
<p>建立索引时加快查询速度的有效手段。索引是关系数据库管理系统的内部实现技术，属于内模式范畴。用户不必也不能显式地选择索引。</p>
<p>常见的数据库索引：</p>
<ul>
<li>顺序文件上的索引；</li>
<li>B+树索引</li>
<li>散列索引</li>
<li>位图索引</li>
</ul>
<h3 id="1-建立索引">1. 建立索引</h3>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] <span class="keyword">INDEX</span> &lt;索引名&gt;</div><div class="line"><span class="keyword">ON</span> &lt;表名&gt;(&lt;列名&gt; [&lt;次序&gt;][,&lt;列名&gt; [&lt;次序&gt;]] ...);</div></pre></td></tr></table></figure>
<h3 id="2-修改索引">2. 修改索引</h3>
<p><code>ALTER INDEX &lt;旧索引名&gt;RENAME TO&lt;新索引名&gt;</code></p>
<h3 id="3-删除索引">3. 删除索引</h3>
<p><code>DROP INDEX &lt;索引名&gt;</code></p>
<h2 id="数据字典">数据字典</h2>
<blockquote>
<p>数据字典时关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息，包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行 SQL 的数据定义语句时，实际上就是在更新数据字典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</p>
</blockquote>
<hr>
<h1>数据查询</h1>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> [ALL|<span class="keyword">DISTINCT</span>] &lt;目标列表达式&gt; [,&lt;目标列表达式&gt;]...</div><div class="line"><span class="keyword">FROM</span> &lt;表名或视图名&gt; [,&lt;表名或视图名&gt;]|(&lt;<span class="keyword">SELECT</span> 语句&gt;)[<span class="keyword">AS</span>]&lt;别名&gt;</div><div class="line">[<span class="keyword">WHERE</span> &lt;条件表达式&gt;]</div><div class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;列名<span class="number">1</span>&gt; [<span class="keyword">HAVING</span> &lt;条件表达式&gt;]]</div><div class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;列名<span class="number">2</span>&gt; [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]];</div></pre></td></tr></table></figure>
<h2 id="单表查询">单表查询</h2>
<ol>
<li>选择表中若干列</li>
<li>选择表中若干元组</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">查询条件</th>
<th style="text-align:left">谓词</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">比较</td>
<td style="text-align:left"><code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>!&gt;</code>, <code>!&lt;</code>; <code>NOT+上述比较运算符</code></td>
</tr>
<tr>
<td style="text-align:left">确定范围</td>
<td style="text-align:left"><code>BETWEEN AND</code>, <code>NOT BETWEEN AND</code></td>
</tr>
<tr>
<td style="text-align:left">确定集合</td>
<td style="text-align:left"><code>IN</code>, <code>NOT IN</code></td>
</tr>
<tr>
<td style="text-align:left">字符匹配</td>
<td style="text-align:left"><code>LIKE</code>, <code>NOT LIKE</code></td>
</tr>
<tr>
<td style="text-align:left">空值</td>
<td style="text-align:left"><code>IS NULL</code>, <code>IS NOT NULL</code></td>
</tr>
<tr>
<td style="text-align:left">多重条件（逻辑运算）</td>
<td style="text-align:left"><code>AND</code>, <code>OR</code>, <code>NOT</code></td>
</tr>
</tbody>
</table>
<ol start="3">
<li><code>OBDER BY</code> 子句</li>
<li>聚集函数</li>
<li><code>GROUP BY</code> 子句</li>
</ol>
<h2 id="连接查询">连接查询</h2>
<p>连接查询：查询同时涉及两个以上的表。</p>
<ol>
<li>等值与非等值连接的查询</li>
<li>自身连接</li>
<li>外连接</li>
<li>多表连接</li>
</ol>
<h2 id="嵌套查询">嵌套查询</h2>
<blockquote>
<p>在 SQL 语言中，一个 <code>SELECT-FROM-WHERE</code> 语句称为一个查询块。将一个查询块嵌套再另一个查询块的 <code>WHERE</code> 子句或 <code>HAVING</code> 短语的条件中的查询称为嵌套查询。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Sname <span class="comment">/*外层查询或父查询*/</span></div><div class="line"><span class="keyword">FROM</span> Student</div><div class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></div><div class="line">    (<span class="keyword">SELECT</span> Sno <span class="comment">/*内层查询或子查询*/</span></div><div class="line">    <span class="keyword">FROM</span> SC</div><div class="line">    <span class="keyword">WHERE</span> Cno=<span class="string">'2'</span>);</div></pre></td></tr></table></figure>
<ol>
<li>带有 <code>IN</code> 谓词的子查询</li>
<li>带有比较运算符的子查询</li>
<li>带有 <code>ANY (SOME)</code> 或 <code>ALL</code> 谓词的子查询</li>
<li>带有 <code>EXISTS</code> 谓词的子查询</li>
</ol>
<h2 id="集合查询">集合查询</h2>
<blockquote>
<p>集合操作主要包括并操作 <code>UNION</code>、交操作 <code>INTERSECT</code> 和差操作 <code>EXCEPT</code>。参加集合操作的各查询结果的<strong>列数</strong>必须相同；对应项的<strong>数据类型</strong>也必须相同。</p>
</blockquote>
<h2 id="基于派生表的查询">基于派生表的查询</h2>
<blockquote>
<p>子查询不仅可以出现在 <code>WHERE</code> 子句中，还可以出现再 <code>FROM</code> 子句中，这时子查询生成的临时派生表称为主查询的查询对象。</p>
</blockquote>
<hr>
<h1>数据更新</h1>
<h2 id="插入数据">插入数据</h2>
<ol>
<li>插入元组</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span></div><div class="line"><span class="keyword">INTO</span> &lt;表名&gt; [(&lt;属性列 <span class="number">1</span>&gt; [, &lt;属性列 <span class="number">2</span>&gt;] ...)]</div><div class="line"><span class="keyword">VALUES</span> (&lt;常量 <span class="number">1</span>&gt; [,&lt;常量 <span class="number">2</span>&gt;]); <span class="comment">-- 字符串常量使用单引号括起来</span></div></pre></td></tr></table></figure>
<ol start="2">
<li>插入子查询结果</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span></div><div class="line"><span class="keyword">INTO</span> &lt;表名&gt; [(&lt;属性列 <span class="number">1</span>&gt; [, &lt;属性列 <span class="number">2</span>&gt;] ...)]</div><div class="line">子查询;</div></pre></td></tr></table></figure>
<h2 id="修改数据">修改数据</h2>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> &lt;<span class="keyword">TABLE</span>&gt;</div><div class="line"><span class="keyword">SET</span> &lt;<span class="keyword">column</span>&gt;=&lt;expression&gt; [,&lt;<span class="keyword">column</span>&gt;=&lt;expression&gt;]</div><div class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;];</div></pre></td></tr></table></figure>
<h2 id="删除数据">删除数据</h2>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span></div><div class="line"><span class="keyword">FROM</span> &lt;<span class="keyword">table</span>&gt;</div><div class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;];</div></pre></td></tr></table></figure>
<hr>
<h1>空值的处理</h1>
<p>空值：不知道或者不存在或者无意义的值。</p>
<p>以下条件取空值：</p>
<ul>
<li>该属性应该有一个值，但目前不知道；</li>
<li>该属性不应该有值；</li>
<li>由于某种原因不便于填写。</li>
</ul>
<p>空值的判断：<code>IS NULL</code> <code>IS NOT NULL</code>。</p>
<hr>
<h1>视图</h1>
<p><code>CREATE VIEW</code><br>
<code>ALTER VIEW</code><br>
<code>DROP VIEW</code><br>
<code>SHOW VIEW</code></p>
<h2 id="视图的作用">视图的作用</h2>
<ul>
<li>简化用户操作</li>
<li>使用户以多种角度看待同一数据</li>
<li>对重构数据库提供了一定程度的逻辑独立性</li>
<li>对机密数据提供安全保护</li>
<li>适当利用视图可以更清晰地表达查询</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《数据库系统概论》第三章笔记。&lt;/p&gt;
&lt;h1&gt;基础&lt;/h1&gt;
&lt;h2 id=&quot;sql-历史&quot;&gt;SQL 历史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1974 年，Boyce 和 Chamberlin 提出，Sequel&lt;/li&gt;
&lt;li&gt;1986 年 10 月，美国国家标准局（ANS
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
      <category term="Database" scheme="http://lix90.github.io/categories/Notes/Database/"/>
    
    
      <category term="Database" scheme="http://lix90.github.io/tags/Database/"/>
    
      <category term="SQL" scheme="http://lix90.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>R：向量化运算</title>
    <link href="http://lix90.github.io/2016/09/13/2016-09-13-r-apply-family/"/>
    <id>http://lix90.github.io/2016/09/13/2016-09-13-r-apply-family/</id>
    <published>2016-09-13T14:50:21.000Z</published>
    <updated>2016-11-28T12:42:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Updated in 2016-11-12</p>
</blockquote>
<p>学习 <code>sapply</code> <code>lapply</code> <code>apply</code> <code>tapply</code> <code>by</code> <code>aggregate</code> 等向量化运算函数的笔记。</p>
<h1><code>apply</code></h1>
<p>当输入数据为矩阵或数组时使用，如果输入数据为 <code>data.frame</code>，则不建议使用。</p>
<p><code>apply(X, MARGIN, FUN, ...)</code></p>
<ul>
<li><code>X</code> 数组或矩阵</li>
<li><code>MARGIN</code> 指定 <code>FUN</code> 作用的由下标组成的向量。若 <code>X</code> 为矩阵，1 表示行，2 表示列。<code>c(1,2)</code> 表示行和列。如果 <code>X</code> 包含 <code>dimnames</code>，那么也可以为字符向量。</li>
<li><code>FUN</code> 使用的函数</li>
</ul>
<p>如果需要在行或者列上求均值和求和，则建议使用 <code>colMeans</code> <code>rowMeans</code> <code>colSums</code> <code>rowSums</code>。</p>
<h1><code>tapply</code></h1>
<p>需要对向量按组或者因素水平计算，类似于 <code>split-apply-combine</code>。</p>
<h1><code>by</code></h1>
<p>可替代 <code>tapply</code>，在无法使用 <code>tapply</code> 的情况下仍然可用。</p>
<p><a href="http://stackoverflow.com/a/32262439/6469987" target="_blank" rel="external">参考</a></p>
<h1><code>aggregate</code></h1>
<p>跟 <code>tapply</code> 类似，不同的是，<code>aggregate</code> 的第二个参数必须为 list，输出为 data.frame。<code>aggregate</code> 的参数还可以为 formula。需要主要的是 <code>aggregate</code> 的 formula 方法默认 <code>na.action = na.omit</code>，所以需要手动设置参数 <code>na.rm = TRUE</code>。</p>
<h1><code>lapply</code></h1>
<p>输入和输出都为 list。其他 <code>*apply</code> 函数底层都是调用 <code>lapply</code> 函数。</p>
<p><code>lapply(X, FUN, ...)</code></p>
<p>返回与 <code>X</code> 等长度的 list，每个元素是由 <code>X</code> 中的元素经过 <code>FUN</code> 计算得到。</p>
<h1><code>sapply</code></h1>
<p>输入为 list，但输出为 vector。</p>
<p><code>sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)</code></p>
<p>比 <code>lapply</code> 更友好，虽然默认返回 vector，matrix，但是如果增加 <code>simplify = &quot;array&quot;</code> 的参数，将返回 array。<code>sapply(x, f, simplify=FALSE, USE.NAMES = FALSE)</code> 等同于 <code>lapply(x, f)</code>。</p>
<h1><code>vapply</code></h1>
<p><code>vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)</code></p>
<p>类似与 <code>sapply</code>，但是返回值的类型是事先确定。</p>
<h1><code>replicate</code></h1>
<p>重复地执行表达式。</p>
<h1>其他相关函数</h1>
<p><code>outer</code> <code>ave</code> <code>eapply</code></p>
<h1>比较好的总结</h1>
<blockquote>
<ul>
<li><strong>lapply</strong> is a list apply which acts on a list or vector and returns a list.</li>
<li><strong>sapply</strong> is a simple lapply (function defaults to returning a vector or matrix when possible)</li>
<li><strong>vapply</strong> is a verified apply (allows the return object type to be prespecified)</li>
<li><strong>rapply</strong> is a recursive apply for nested lists, i.e. lists within lists</li>
<li><strong>tapply</strong> is a tagged apply where the tags identify the subsets</li>
<li><strong>apply</strong> is generic: applies a function to a matrix’s rows or columns (or, more generally, to dimensions of an array)</li>
</ul>
</blockquote>
<p><a href="http://stackoverflow.com/a/23282110/6469987" target="_blank" rel="external">参考</a></p>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3505701/r-grouping-functions-sapply-vs-lapply-vs-apply-vs-tapply-vs-by-vs-aggrega" target="_blank" rel="external">R Grouping functions: sapply vs. lapply vs. apply. vs. tapply vs. by vs. aggregate</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Updated in 2016-11-12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习 &lt;code&gt;sapply&lt;/code&gt; &lt;code&gt;lapply&lt;/code&gt; &lt;code&gt;apply&lt;/code&gt; &lt;code&gt;tapply&lt;/code&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
      <category term="R" scheme="http://lix90.github.io/categories/Notes/R/"/>
    
    
      <category term="R" scheme="http://lix90.github.io/tags/R/"/>
    
      <category term="R-basics" scheme="http://lix90.github.io/tags/R-basics/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装与配置（MacOS）</title>
    <link href="http://lix90.github.io/2016/09/13/2016-09-13-mysql-config/"/>
    <id>http://lix90.github.io/2016/09/13/2016-09-13-mysql-config/</id>
    <published>2016-09-13T12:59:16.000Z</published>
    <updated>2016-11-28T12:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1>下载 MySQL</h1>
<p>从<a href="http://www.mysql.com/downloads/" target="_blank" rel="external">官方网站</a>下载 <code>MySQL Community Server</code>。</p>
<h1>安装 MySQL</h1>
<p>在网上教程发现提到这三个文件</p>
<ol>
<li>mysql-*.pkg：MySql的主要程序包</li>
<li>MySQL_StartupItem.pkg：MySql的启动项</li>
<li>MySQL.prefPane：MySQL的偏好设置，主要用来启动MySQL服务</li>
</ol>
<p>但是打开 dmg 文件，仅仅发现一个 mysql-<version>.pkg 文件</version></p>
<h1>安装 MySQL Workbench（GUI Tool）</h1>
<p>仍然从官网下载。下载后安装然后进行配置。</p>
<p>数据库访问密码的设置</p>
<blockquote>
<p>MySQL的默认账号密码是root/root，正常情况下我们如果单纯的只是使用MySQL Workbench来管理数据库的这个账号是可以的，但是当我们在编程代码中通过jdbc来访问MySQL时我们就会发现使用这个账号是不行，无法访问，因为MySQL需要我们更改密码，也就是说root这个是个默认的密码也就是弱密码，需要我们修改之后才能在代码中使用。</p>
</blockquote>
<h1>添加到 <strong>PATH</strong></h1>
<p>将 <code>/usr/local/mysql/bin</code> 添加到 <code>PATH</code> 中<br>
编辑 <code>.bash_profile</code> 加入 <code>export PATH=$PATH:/usr/local/mysql/bin</code></p>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;export PATH=$PATH:/usr/local/mysql/bin&quot; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<h1>报错</h1>
<p>查询 MySQL 版本是 <code>mysql -v</code> 报错：<br>
<code>Can't connect to local MySQL server through socket '/tmp/mysql.sock'</code></p>
<p>网上寻找教程，发现有解决办法是对 <code>mysql.sock</code> 建立符号链接。但是在 Mac 上并未找到这个文件。</p>
<p><s>寻找 <code>mysql.sock</code> 文件：<code>find / -name &quot;mysql.sock&quot;</code> 得到 <code>/var/lib/mysql/mysql.sock</code><br>
那么建立 <code>symbolic link</code>：<code>ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock</code></s></p>
<p>后来发现，这个报错是因为 <code>MySQL Server</code> 没有运行。于是打开 <code>MySQL.prefPane</code>，打开 <code>MySQL Server</code>。</p>
<p>又出现另外的报错 <code>ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)</code>。</p>
<p>检索相关问题发现导致这个报错的原因有以下三种：</p>
<ol>
<li>客户端远程访问的用户帐号并未创建；</li>
<li>用户帐号存在，但未对其所在的客户端的 IP 进行远程访问授权允许；</li>
<li>用户帐号授权访问的密码不正确。</li>
</ol>
<p>看到前面安装 GUI 工具的部分说到，必须重新设置账户密码，root 的密码为弱密码。</p>
<p>MySQL 还有个配置文件 <code>my.cnf</code>，里面可以设置帐号密码。</p>
<p><strong>最后发现</strong>，原来在安装 MySQL 时，弹出来一个临时密码的提醒，这个密码用于第一次登录 MySQL，并修改密码。现在终于想起来那个临时密码，但是已经忘了有没有保存。因为自己挖的坑，折腾了很久。</p>
<p>于是为了图方便，先把 MySQL 完全卸载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># first stop the database server</div><div class="line">sudo rm /usr/local/mysql</div><div class="line">sudo rm -rf /usr/local/mysql*</div><div class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</div><div class="line">sudo rm -rf /Library/PreferencePanes/My*</div><div class="line"># edit /etc/hostconfig and remove the line MYSQLCOM=-YES-</div><div class="line">rm -rf ~/Library/PreferencePanes/My*</div><div class="line">sudo rm -rf /Library/Receipts/mysql*</div><div class="line">sudo rm -rf /Library/Receipts/MySQL*</div><div class="line">sudo rm -rf /private/var/db/receipts/*mysql*</div><div class="line">sudo rm -rf /var/db/receipts/com.mysql.*</div></pre></td></tr></table></figure>
<p>然后再重新安装 MySQL。</p>
<p>这次长记性保存了临时密码。</p>
<p>接下来重新配置 MySQL。</p>
<p>修改根用户密码：<code>mysqldmin -u root -p password</code><br>
提示输入旧密码，然后输入新密码，最后确认新密码。然后会得到以下提示：</p>
<blockquote>
<p>Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</p>
</blockquote>
<p>通过新修改的密码登录 MySQL：<code>mysql -u root -p</code>，提示输入密码，终于成功登录。</p>
<p>吸取教训，<strong>一定不要完全按照网上的教程来安装配置应用程序，尽量根据官网文档</strong>。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://www.cnblogs.com/macro-cheng/archive/2011/10/25/mysql-001.html" target="_blank" rel="external">MAC下安装与配置MySQL</a></li>
<li><a href="http://blog.csdn.net/zzq900503/article/details/14163341" target="_blank" rel="external">Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</a></li>
<li><a href="https://segmentfault.com/q/1010000000094608" target="_blank" rel="external">Mac上MySQL报错</a></li>
<li><a href="http://obscuredclarity.blogspot.in/2009/08/install-mysql-on-mac-os-x.html" target="_blank" rel="external">Install MySQL on Mac OS X</a></li>
<li><a href="http://blog.csdn.net/lioncode/article/details/7917310" target="_blank" rel="external">连接MySQL数据库时常见故障问题的分析与解决</a></li>
<li><a href="http://stackoverflow.com/questions/1436425/how-do-you-uninstall-mysql-from-mac-os-x" target="_blank" rel="external">How do you uninstall MySQL from Mac OS X?</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/osx-installation-pkg.html" target="_blank" rel="external">Installing MySQL on OS X Using Native Packages</a></li>
<li><a href="http://community.jaspersoft.com/wiki/uninstall-mysql-mac-os-x" target="_blank" rel="external">Uninstall MySql on a Mac OS X</a></li>
<li><a href="https://www.howtoforge.com/setting-changing-resetting-mysql-root-passwords" target="_blank" rel="external">Setting, Changing And Resetting MySQL Root Passwords</a></li>
<li><a href="http://stackoverflow.com/questions/33387879/mysql-password-expired-cant-connect" target="_blank" rel="external">Mysql password expired. Can’t connect</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;下载 MySQL&lt;/h1&gt;
&lt;p&gt;从&lt;a href=&quot;http://www.mysql.com/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt;下载 &lt;code&gt;MySQL Community Server&lt;/code
    
    </summary>
    
      <category term="Original" scheme="http://lix90.github.io/categories/Original/"/>
    
      <category term="Config" scheme="http://lix90.github.io/categories/Original/Config/"/>
    
    
      <category term="Database" scheme="http://lix90.github.io/tags/Database/"/>
    
      <category term="MySQL" scheme="http://lix90.github.io/tags/MySQL/"/>
    
      <category term="Configuration" scheme="http://lix90.github.io/tags/Configuration/"/>
    
  </entry>
  
  <entry>
    <title>数据冗余</title>
    <link href="http://lix90.github.io/2016/09/11/2016-09-11-data-redundency/"/>
    <id>http://lix90.github.io/2016/09/11/2016-09-11-data-redundency/</id>
    <published>2016-09-11T11:54:11.000Z</published>
    <updated>2016-11-19T03:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>数据冗余</h1>
<h2 id="什么是数据冗余？">什么是数据冗余？</h2>
<p><code>数据冗余</code> 是指<strong>同一个数据</strong>在系统中<strong>多次重复</strong>出现。</p>
<p>数据库系统仅仅降低了数据冗余，仍然存在数据冗余问题。消除数据冗余的目的是为了避免更新时可能出现的问题，以便<strong>保持数据的一致性</strong>。</p>
<p>Q: 数据冗余会造成什么影响和后果？</p>
<h2 id="数据冗余的类型">数据冗余的类型</h2>
<ul>
<li>空间冗余</li>
<li>时间冗余</li>
<li>结构冗余</li>
<li>知识冗余</li>
<li>视觉冗余</li>
<li>信息熵冗余</li>
</ul>
<p>Q：数据冗余与文件压缩有什么样的关系？</p>
<h2 id="什么时候增加数据冗余？">什么时候增加数据冗余？</h2>
<p>虽然一般情况下，应尽量减少数据冗余，保证数据的一致性，但在某些情况下，也需要适当增加数据冗余度。数据冗余或者信息冗余是生产、生活所必然存在的行为，没有好与坏的总体倾向。</p>
<ul>
<li>重复存储或传输数据以<strong>防止数据丢失</strong>；</li>
<li>对数据进行冗余性的编码来防止数据的丢失、错误，并提供<strong>对错误数据进行反变换</strong>得到原始数据的功能；</li>
<li>为方便处理和使同一信息在不同地点有<strong>不同的表现形式</strong>；</li>
<li>为了提高数据的<strong>检索速度</strong>。</li>
</ul>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="http://wiki.mbalib.com/wiki/%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99" target="_blank" rel="external">wiki.mbalib.com/wiki/数据冗余</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;数据冗余&lt;/h1&gt;
&lt;h2 id=&quot;什么是数据冗余？&quot;&gt;什么是数据冗余？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;数据冗余&lt;/code&gt; 是指&lt;strong&gt;同一个数据&lt;/strong&gt;在系统中&lt;strong&gt;多次重复&lt;/strong&gt;出现。&lt;/p&gt;
&lt;p&gt;数据库系统仅仅降低了数据冗
    
    </summary>
    
      <category term="Notes" scheme="http://lix90.github.io/categories/Notes/"/>
    
    
      <category term="Database" scheme="http://lix90.github.io/tags/Database/"/>
    
  </entry>
  
</feed>
